/**
 * Modern AI Assistant - New Architecture
 * Based on scalable service-oriented design
 */

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const { supabase } = require('./config/database');
const { ToolsService } = require('./tools');
const { RoutingService } = require('./services/routing');
const { TelegramConnector, TelegramChannelConnector } = require('./connectors/telegram');
const { GoogleSheetsConnector, GoogleCalendarConnector } = require('./connectors/google');
const { writeExpense, writeTask, writeBookmark } = require('./services/googleSheets');
const { processTask } = require('./services/taskProcessor');
const { createTeamReminder } = require('./services/googleCalendar');
const ReminderService = require('./services/reminderService');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3009;

// Initialize clients
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
    polling: process.env.NODE_ENV !== 'production',
    webHook: process.env.NODE_ENV === 'production'
});

// Add event listeners for debugging
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error.message);
});

bot.on('webhook_error', (error) => {
    console.error('‚ùå Webhook error:', error.message);
});

bot.on('error', (error) => {
    console.error('‚ùå Bot error:', error.message);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å)
async function processReminder(text, context, chatId) {
    try {
        console.log('‚è∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å:', text);
        return await reminderService.processReminder(text, context, chatId);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
async function writeToGoogleSheets(text, context, chatId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        if (context.teamSetupState && context.teamSetupState.step) {
            console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google Sheets - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º Google Sheets ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const spreadsheetId = await getUserGoogleSheetsId(context.tenant_id);
        if (!spreadsheetId) {
            console.log('‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞—é –≤ Google Sheets:', text);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        if (text.toLowerCase().includes('–ø–æ—Ç—Ä–∞—Ç–∏–ª') || text.toLowerCase().includes('—Ä–∞—Å—Ö–æ–¥')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const amountMatch = text.match(/(\d+)/);
            const amount = amountMatch ? amountMatch[1] : '0';
            const description = text.replace(/\d+/g, '').replace(/–ø–æ—Ç—Ä–∞—Ç–∏–ª|—Ä–∞—Å—Ö–æ–¥/gi, '').trim();
            
            const success = await writeExpense(spreadsheetId, amount, description, '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', chatId.toString());
            if (success) {
                console.log('‚úÖ –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets');
            }
        } else if (text.toLowerCase().includes('–∑–∞–¥–∞—á–∞') || text.toLowerCase().includes('todo')) {
            // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
            const taskResult = await processTask(text, context, chatId);
            if (taskResult && taskResult.success) {
                console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É–º–Ω–æ:', taskResult.message);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await bot.sendMessage(chatId, taskResult.message);
            }
        } else if (text.toLowerCase().includes('–Ω–∞–ø–æ–º–Ω–∏') || text.toLowerCase().includes('–Ω–∞–ø–æ–º–Ω–∏—Ç—å')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            const reminderResult = await processReminder(text, context, chatId);
            if (reminderResult && reminderResult.success) {
                console.log('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', reminderResult.message);
                await bot.sendMessage(chatId, reminderResult.message);
            }
        } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç "–ó–∞–∫–ª–∞–¥–∫–∏"
            const success = await writeBookmark(spreadsheetId, '–ó–∞–º–µ—Ç–∫–∞', text, '', chatId.toString());
            if (success) {
                console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google Sheets');
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserGoogleSheetsId(tenantId) {
    try {
        const { data: destinations, error } = await supabase
            .from('destinations')
            .select('external_id')
            .eq('tenant_id', tenantId)
            .eq('type', 'sheet')
            .eq('provider', 'google')
            .limit(1);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID:', error);
            return null;
        }

        if (destinations && destinations.length > 0) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ external_id (—Ñ–æ—Ä–º–∞—Ç: "spreadsheetId!SheetName")
            const externalId = destinations[0].external_id;
            const spreadsheetId = externalId.split('!')[0];
            console.log('‚úÖ Google Sheets ID –Ω–∞–π–¥–µ–Ω:', spreadsheetId);
            return spreadsheetId;
        }

        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID:', error);
        return null;
    }
}

// Handle incoming messages
bot.on('message', async (msg) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', JSON.stringify(msg, null, 2));
    
    try {
        const chatId = msg.chat.id;
        const text = msg.text || '';
        const username = msg.from.username || msg.from.first_name || 'Unknown';
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${chatId}) –Ω–∞–ø–∏—Å–∞–ª: ${text}`);
        
        const context = await getContext(chatId.toString());
        console.log('Context:', context);

        // Handle commands
        if (text.startsWith('/')) {
            console.log('Processing command:', text);
            await handleCommand(text, chatId, context);
            return;
        }

        // Handle voice messages
        if (msg.voice) {
            console.log('Processing voice message');
            const transcribedText = await transcribeVoice(msg.voice);
            if (transcribedText) {
                console.log('Transcribed:', transcribedText);
                const result = await llmService.processMessage(transcribedText, context);
                await handleLLMResponse(result, chatId);
            }
            return;
        }

        // Handle text messages
        if (text) {
            console.log('Processing text message:', text);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            if (context.teamSetupState && context.teamSetupState.step) {
                console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–∞–Ω–¥—ã, —à–∞–≥: ${context.teamSetupState.step}`);
                console.log(`üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ:`, JSON.stringify(context.teamSetupState, null, 2));
                console.log(`üöÄ –í–´–ó–´–í–ê–ï–ú handleTeamSetupStep —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: chatId=${chatId}, text="${text}"`);
                
                try {
                    const updatedContext = await handleTeamSetupStep(chatId, context, text);
                    console.log('‚úÖ handleTeamSetupStep –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
                    if (updatedContext) {
                        Object.assign(context, updatedContext);
                        console.log('üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ handleTeamSetupStep');
                    }
                } catch (teamSetupError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTeamSetupStep:', teamSetupError);
                    console.error('Stack:', teamSetupError.stack);
                    
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    context.teamSetupState = null;
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥—ã: ${teamSetupError.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ /team - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`);
                }
                return;
            }
            
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
            
            try {
                const result = await llmService.processMessage(text, context);
                console.log('LLM result:', result);
                await handleLLMResponse(result, chatId);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                // –ù–û –ù–ï –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                if (!context.teamSetupState || !context.teamSetupState.step) {
                    await writeToGoogleSheets(text, context, chatId);
                } else {
                    console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google Sheets - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã');
                }
                
            } catch (error) {
                console.error('LLM processing error:', error);
                // Fallback to simple responses
                if (text.toLowerCase().includes('–ø–æ—Ç—Ä–∞—Ç–∏–ª') || text.toLowerCase().includes('—Ä–∞—Å—Ö–æ–¥')) {
                    await bot.sendMessage(chatId, `üí∞ –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: ${text}\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                } else if (text.toLowerCase().includes('–∑–∞–¥–∞—á–∞') || text.toLowerCase().includes('todo')) {
                    await bot.sendMessage(chatId, `üìã –ó–∞–ø–∏—Å–∞–ª –∑–∞–¥–∞—á—É: ${text}\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                } else {
                    await bot.sendMessage(chatId, `ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                }
            }
        }
    } catch (error) {
        console.error('Message handling error:', error);
        console.error('Error stack:', error.stack);
        
        try {
            const chatId = msg.chat.id; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        } catch (botError) {
            console.error('Bot send error:', botError);
        }
    }
});

// Handle callback queries (button clicks) for polling mode
bot.on('callback_query', async (query) => {
    console.log('üîò –ü–æ–ª—É—á–µ–Ω callback query:', JSON.stringify(query, null, 2));
    
    try {
        await handleCallbackQuery(query);
    } catch (error) {
        console.error('Callback query error:', error);
        console.error('Error stack:', error.stack);
        
        try {
            await bot.answerCallbackQuery(query.id, {
                text: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                show_alert: true
            });
        } catch (answerError) {
            console.error('Answer callback error:', answerError);
        }
    }
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Setup webhook for production
async function setupWebhook() {
    try {
        if (process.env.NODE_ENV === 'production') {
            const webhookUrl = `https://${process.env.VERCEL_URL || 'ai-assist-62v3e0kmt-irinashafeevas-projects.vercel.app'}/webhook`;
            
            console.log(`üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: ${webhookUrl}`);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            await bot.deleteWebhook();
            console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            await bot.setWebhook(webhookUrl);
            console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            const webhookInfo = await bot.getWebhookInfo();
            console.log('üìã Webhook —Å—Ç–∞—Ç—É—Å:', {
                url: webhookInfo.url,
                pending_update_count: webhookInfo.pending_update_count,
                last_error_date: webhookInfo.last_error_date,
                last_error_message: webhookInfo.last_error_message
            });
            
        } else {
            console.log(`‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling`);
            if (!bot.isPolling()) {
                bot.startPolling();
            }
            console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error.message);
        console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling —Ä–µ–∂–∏–º`);
        try {
            if (!bot.isPolling()) {
                bot.startPolling();
            }
            console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ (fallback)`);
        } catch (pollingError) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', pollingError.message);
        }
    }
}

// Initialize services
const toolsService = new ToolsService();
const routingService = new RoutingService();
const reminderService = new ReminderService(bot);

// Register connectors
routingService.registerConnector('telegram_dm', new TelegramConnector(bot));
routingService.registerConnector('telegram_channel', new TelegramChannelConnector(bot));
routingService.registerConnector('google_sheets', new GoogleSheetsConnector());
routingService.registerConnector('google_calendar', new GoogleCalendarConnector());

// Middleware
app.use(cors({
    origin: [
        'https://bespoke-platypus-5c4604.netlify.app',
        'https://ai-assist-62v3e0kmt-irinashafeevas-projects.vercel.app',
        'https://reminder-dashboard-brc1elya1-irinashafeevas-projects.vercel.app',
        'http://localhost:3000',
        'http://localhost:3009'
    ],
    credentials: true
}));
app.use(express.json());
// Remove static files middleware as there's no frontend

// LLM Service with Tools
class LLMService {
    constructor() {
        this.systemPrompt = `–¢—ã ‚Äî —Å–µ–º–µ–π–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥–∞–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–∞–∫–ª–∞–¥–∫–∞–º–∏.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- resolve_person(name) - –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏/–∞–ª–∏–∞—Å—É
- add_expense(payload) - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
- add_task(payload) - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
- add_bookmark(payload) - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É
- search(query) - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏
- route(record) - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. "–ü–æ—Ç—Ä–∞—Ç–∏–ª 5000 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" ‚Üí add_expense({title: "–ü—Ä–æ–¥—É–∫—Ç—ã", amount: -5000})
2. "–ó–∞–¥–∞—á–∞ –¥–ª—è –ò–≤–∞–Ω–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫" ‚Üí resolve_person("–ò–≤–∞–Ω") ‚Üí add_task({title: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫", assignee: "–ò–≤–∞–Ω"})
3. "–°–æ—Ö—Ä–∞–Ω–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Ç" ‚Üí add_bookmark({title: "–†–µ—Ü–µ–ø—Ç", url: "..."})

–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.`;
    }

    async processMessage(message, context) {
        try {
            const tools = toolsService.getTools();
            
            const completion = await openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: [
                    { role: "system", content: this.systemPrompt },
                    { role: "user", content: message }
                ],
                tools: tools.map(tool => ({
                    type: "function",
                    function: tool
                })),
                tool_choice: "auto",
                temperature: 0.7,
                max_tokens: 1000
            });

            const response = completion.choices[0].message;
            let result = { type: 'text', content: response.content };

            // Execute tool calls if present
            if (response.tool_calls) {
                const toolResults = [];
                
                for (const toolCall of response.tool_calls) {
                    try {
                        const toolResult = await toolsService.executeTool(
                            toolCall.function.name,
                            JSON.parse(toolCall.function.arguments),
                            context
                        );
                        
                        toolResults.push({
                            tool: toolCall.function.name,
                            result: toolResult
                        });

                        // If it's an add_* tool, process the record through routing
                        if (toolCall.function.name.startsWith('add_') && toolResult.record_id) {
                            // Get the created record
                            const { data: record } = await supabase
                                .from('records')
                                .select('*, assignee:team_members(*)')
                                .eq('id', toolResult.record_id)
                                .single();

                            if (record) {
                                // Process through routing service
                                const routingResult = await routingService.processRecord(record);
                                toolResult.routing = routingResult;
                            }
                        }
                    } catch (error) {
                        console.error('Tool execution error:', error);
                        toolResults.push({
                            tool: toolCall.function.name,
                            error: error.message
                        });
                    }
                }

                result = {
                    type: 'tools_executed',
                    content: response.content,
                    tools: toolResults
                };
            }

            return result;
        } catch (error) {
            console.error('LLM processing error:', error);
            return {
                type: 'error',
                content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.'
            };
        }
    }
}

const llmService = new LLMService();

// Context Management
async function getContext(tgChatId) {
    console.log(`üîß –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ ${tgChatId}...`);
    
    try {
        // Get or create tenant (for now, one tenant per chat)
        console.log('1Ô∏è‚É£ –ò—â—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tenant...');
        let tenant = await getTenant(tgChatId);
        console.log('Tenant –Ω–∞–π–¥–µ–Ω:', tenant);
        
        if (!tenant) {
            console.log('2Ô∏è‚É£ Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...');
            tenant = await createTenant(tgChatId);
            console.log('–ù–æ–≤—ã–π tenant —Å–æ–∑–¥–∞–Ω:', tenant);
        }

        // Get or create user
        console.log('3Ô∏è‚É£ –ò—â—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        let user = await getUser(tenant.id, tgChatId);
        console.log('User –Ω–∞–π–¥–µ–Ω:', user);
        
        if (!user) {
            console.log('4Ô∏è‚É£ User –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ...');
            user = await createUser(tenant.id, tgChatId);
            console.log('–ù–æ–≤—ã–π user —Å–æ–∑–¥–∞–Ω:', user);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã (30 –º–∏–Ω—É—Ç)
        if (user.meta?.teamSetupState && user.meta.teamSetupState.createdAt) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã:`, user.meta.teamSetupState);
            
            const createdAt = new Date(user.meta.teamSetupState.createdAt);
            const now = new Date();
            const timeDiff = now - createdAt;
            const timeoutMinutes = 30;
            
            console.log(`‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${createdAt.toISOString()}`);
            console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);
            console.log(`‚è∞ –†–∞–∑–Ω–∏—Ü–∞: ${Math.round(timeDiff / 60000)} –º–∏–Ω—É—Ç`);
            
            if (timeDiff > timeoutMinutes * 60 * 1000) {
                console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
                
                // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const { error: clearError } = await supabase
                    .from('users')
                    .update({ 
                        meta: {
                            ...user.meta,
                            teamSetupState: null
                        }
                    })
                    .eq('id', user.id);
                
                if (clearError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', clearError);
                }
                
                user.meta.teamSetupState = null;
            } else {
                console.log(`‚úÖ –í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ù–ï –∏—Å—Ç–µ–∫–ª–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ`);
            }
        } else {
            console.log(`‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        
        const context = {
            tenant_id: tenant.id,
            user_id: user.id,
            tg_chat_id: tgChatId,
            meta: user.meta || {},
            teamSetupState: user.meta?.teamSetupState || null
        };
        
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', context);
        console.log(`üîç teamSetupState –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:`, context.teamSetupState);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: context.teamSetupState && context.teamSetupState.step = ${!!(context.teamSetupState && context.teamSetupState.step)}`);
        return context;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
        console.error('Stack trace:', error.stack);
        
        // Fallback to simple context if database fails
        const fallbackContext = {
            tenant_id: `fallback_tenant_${tgChatId}`,
            user_id: `fallback_user_${tgChatId}`,
            tg_chat_id: tgChatId
        };
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç:', fallbackContext);
        return fallbackContext;
    }
}

async function getTenant(tgChatId) {
    // For now, create tenant per chat. In production, you'd have proper tenant management
    const { data } = await supabase
        .from('tenants')
        .select('*')
        .eq('name', `chat_${tgChatId}`)
        .single();
    
    return data;
}

async function createTenant(tgChatId) {
    const { data, error } = await supabase
        .from('tenants')
        .insert({
            name: `chat_${tgChatId}`,
            plan: 'free'
        })
        .select()
        .single();

    if (error) throw error;

    // Create default entitlements
    await supabase
        .from('entitlements')
        .insert([
            { tenant_id: data.id, key: 'max_users', value: '5' },
            { tenant_id: data.id, key: 'max_routes', value: '3' },
            { tenant_id: data.id, key: 'search_history_days', value: '30' }
        ]);

    return data;
}

async function getUser(tenantId, tgChatId) {
    const { data } = await supabase
        .from('users')
        .select('*')
        .eq('tenant_id', tenantId)
        .eq('tg_chat_id', tgChatId)
        .single();
    
    return data;
}

async function createUser(tenantId, tgChatId) {
    try {
        // Create user with current schema
        let userData = {
            tenant_id: tenantId,
            tg_chat_id: tgChatId,
            username: `user_${tgChatId}`,
            first_name: 'User',
            last_name: tgChatId,
            tier: 'free', // –ò—Å–ø–æ–ª—å–∑—É–µ–º tier –≤–º–µ—Å—Ç–æ role, –∑–Ω–∞—á–µ–Ω–∏–µ 'free' –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            meta: {} // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é meta –∫–æ–ª–æ–Ω–∫—É
        };
        
        const { data, error } = await supabase
            .from('users')
            .insert(userData)
            .select()
            .single();
        
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}

// Message processing function (used by webhook)
async function processMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text || '';
    const voice = msg.voice;

    console.log('Processing message:', { chatId, text, voice: !!voice });

    try {
        const context = await getContext(chatId.toString());
        console.log('Context:', context);

        // Handle commands
        if (text.startsWith('/')) {
            console.log('Processing command:', text);
            await handleCommand(text, chatId, context);
            return;
        }

        // Handle voice messages
        if (voice) {
            console.log('Processing voice message');
            const transcribedText = await transcribeVoice(voice);
            if (transcribedText) {
                console.log('Transcribed:', transcribedText);
                const result = await llmService.processMessage(transcribedText, context);
                await handleLLMResponse(result, chatId);
            }
            return;
        }

        // Handle text messages
        if (text) {
            console.log('Processing text message:', text);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            if (context.teamSetupState && context.teamSetupState.step) {
                console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–∞–Ω–¥—ã, —à–∞–≥: ${context.teamSetupState.step}`);
                console.log(`üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ:`, JSON.stringify(context.teamSetupState, null, 2));
                console.log(`üöÄ –í–´–ó–´–í–ê–ï–ú handleTeamSetupStep —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: chatId=${chatId}, text="${text}"`);
                
                try {
                    const updatedContext = await handleTeamSetupStep(chatId, context, text);
                    console.log('‚úÖ handleTeamSetupStep –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
                    if (updatedContext) {
                        Object.assign(context, updatedContext);
                        console.log('üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ handleTeamSetupStep');
                    }
                } catch (teamSetupError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTeamSetupStep:', teamSetupError);
                    console.error('Stack:', teamSetupError.stack);
                    
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    context.teamSetupState = null;
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥—ã: ${teamSetupError.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ /team - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`);
                }
                return;
            }
            
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Telegram Chat ID –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await updateTeamMemberTelegramId(chatId, context);
            
            // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ /team
            
            try {
                const result = await llmService.processMessage(text, context);
                console.log('LLM result:', result);
                await handleLLMResponse(result, chatId);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                // –ù–û –ù–ï –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                if (!context.teamSetupState || !context.teamSetupState.step) {
                    await writeToGoogleSheets(text, context, chatId);
                } else {
                    console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google Sheets - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã');
                }
                
            } catch (error) {
                console.error('LLM processing error:', error);
                // Fallback to simple responses
                if (text.toLowerCase().includes('–ø–æ—Ç—Ä–∞—Ç–∏–ª') || text.toLowerCase().includes('—Ä–∞—Å—Ö–æ–¥')) {
                    await bot.sendMessage(chatId, `üí∞ –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: ${text}\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                } else if (text.toLowerCase().includes('–∑–∞–¥–∞—á–∞') || text.toLowerCase().includes('todo')) {
                    await bot.sendMessage(chatId, `üìã –ó–∞–ø–∏—Å–∞–ª –∑–∞–¥–∞—á—É: ${text}\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                } else {
                    await bot.sendMessage(chatId, `ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.`);
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ, –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    if (!context.teamSetupState || !context.teamSetupState.step) {
                        await writeToGoogleSheets(text, context, chatId);
                    }
                }
            }
        }
    } catch (error) {
        console.error('Message handling error:', error);
        console.error('Error stack:', error.stack);
        
        try {
            const chatId = msg.chat.id; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        } catch (botError) {
            console.error('Bot send error:', botError);
        }
    }
}

async function transcribeVoice(voice) {
    try {
        const file = await bot.getFile(voice.file_id);
        const audioResponse = await fetch(`https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`);
        const audioBuffer = await audioResponse.arrayBuffer();
        
        const transcription = await openai.audio.transcriptions.create({
            file: Buffer.from(audioBuffer),
            model: "whisper-1"
        });

        return transcription.text;
    } catch (error) {
        console.error('Voice transcription error:', error);
        return null;
    }
}

async function handleCommand(command, chatId, context) {
    const [cmd, ...args] = command.split(' ');
    
    switch (cmd) {
        case '/start':
            await handleStartCommand(chatId, context);
            break;

        case '/help':
            await bot.sendMessage(chatId, `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üí∞ –†–∞—Å—Ö–æ–¥—ã:
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 1000 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
"–î–æ—Ö–æ–¥ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"

üìã –ó–∞–¥–∞—á–∏:
"–ó–∞–¥–∞—á–∞ –¥–ª—è –ò–≤–∞–Ω–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
"–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±"

üîñ –ó–∞–∫–ª–∞–¥–∫–∏:  
"–°–æ—Ö—Ä–∞–Ω–∏ https://example.com"

üë• –ö–æ–º–∞–Ω–¥–∞:
"–ó–∞–¥–∞—á–∞ –¥–ª—è –ú–∞—à–∏: –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
"–ü–æ–ø—Ä–æ—Å–∏ –í–∞–Ω—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫"

üîç –ü–æ–∏—Å–∫:
"–ù–∞–π–¥–∏ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é"
"–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –ò–≤–∞–Ω–∞"

üí° –ö–æ–º–∞–Ω–¥—ã: /start, /help, /status, /team, /setup, /sheets`);
            break;

        case '/status':
            if (context.teamSetupState && context.teamSetupState.step) {
                const state = context.teamSetupState;
                let statusMessage = `üîÑ **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã**\n\n`;
                statusMessage += `üìù **–®–∞–≥:** ${state.step}\n`;
                statusMessage += `‚è∞ **–ù–∞—á–∞—Ç–æ:** ${new Date(state.createdAt).toLocaleString('ru-RU')}\n`;
                statusMessage += `üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${new Date(state.lastUpdated).toLocaleString('ru-RU')}\n\n`;
                
                if (state.memberData) {
                    statusMessage += `üë§ **–î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:**\n`;
                    if (state.memberData.display_name) {
                        statusMessage += `‚Ä¢ –ò–º—è: ${state.memberData.display_name}\n`;
                    }
                    if (state.memberData.aliases && state.memberData.aliases.length > 0) {
                        statusMessage += `‚Ä¢ –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: ${state.memberData.aliases.join(', ')}\n`;
                    }
                    if (state.memberData.tg_chat_id) {
                        statusMessage += `‚Ä¢ Telegram: ${state.memberData.tg_chat_id}\n`;
                    }
                    if (state.memberData.gcal_email) {
                        statusMessage += `‚Ä¢ Google Calendar: ${state.memberData.gcal_email}\n`;
                    }
                }
                
                statusMessage += `\nüí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
                statusMessage += `‚Ä¢ "–æ—Ç–º–µ–Ω–∞" - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n`;
                statusMessage += `‚Ä¢ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥\n`;
                statusMessage += `‚Ä¢ /team - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π`;
                
                await bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(chatId, `‚ÑπÔ∏è **–°—Ç–∞—Ç—É—Å:** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** /team –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π`);
            }
            break;
            
        case '/search':
            if (args.length > 0) {
                const query = args.join(' ');
                const result = await toolsService.executeTool('search', { query }, context);
                
                if (result.length > 0) {
                    let message = `üîç –ù–∞–π–¥–µ–Ω–æ ${result.length} –∑–∞–ø–∏—Å–µ–π:\n\n`;
                    result.forEach((record, i) => {
                        message += `${i + 1}. ${record.title} (${record.kind})\n`;
                        if (record.snippet) message += `   ${record.snippet}\n`;
                        message += '\n';
                    });
                    await bot.sendMessage(chatId, message);
                } else {
                    await bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.');
                }
            }
            break;
            
        case '/setup':
            await handleSetupCommand(chatId, context);
            break;
            
        case '/sheets':
            await handleSheetsCommand(chatId, context, args.join(' '));
            break;
            
        case '/calendar':
            await handleCalendarCommand(chatId, context, args.join(' '));
            break;
            
        case '/team':
            await handleTeamCommand(chatId, context);
            break;

        default:
            await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    }
}

async function handleStartCommand(chatId, context) {
    // Check if user already has setup
    const { data: destinations } = await supabase
        .from('destinations')
        .select('*')
        .eq('tenant_id', context.tenant_id)
        .limit(1);
    
    if (destinations && destinations.length > 0) {
        // User already set up
        await bot.sendMessage(chatId, `üéØ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º:
üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
üìã –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏  
üîñ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –æ–±–µ–¥"
"–ó–∞–¥–∞—á–∞: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
"–°–æ—Ö—Ä–∞–Ω–∏ https://example.com"

/setup - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { 
                            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Dashboard', 
                            web_app: { url: 'https://reminder-dashboard-6i5jaiyj8-irinashafeevas-projects.vercel.app' }
                        }
                    ]
                ]
            }
        });
    } else {
        // New user onboarding
        await bot.sendMessage(chatId, `üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Assistant!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
üí∞ –†–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã
üìã –ó–∞–¥–∞—á–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üîñ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ?
1Ô∏è‚É£ –¢–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å)
2Ô∏è‚É£ –í Google Sheets (—É–¥–æ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1Ô∏è‚É£ –¢–æ–ª—å–∫–æ –ø–∞–º—è—Ç—å', callback_data: 'setup_memory' },
                        { text: '2Ô∏è‚É£ Google Sheets', callback_data: 'setup_sheets' }
                    ],
                    [
                        { text: '3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ', callback_data: 'setup_later' }
                    ],
                    [
                        { 
                            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Dashboard', 
                            web_app: { url: 'https://reminder-dashboard-6i5jaiyj8-irinashafeevas-projects.vercel.app' }
                        }
                    ]
                ]
            }
        });
    }
}

async function getCurrentIntegrations(tenantId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º destinations (Google Sheets)
        const { data: destinations } = await supabase
            .from('destinations')
            .select('*')
            .eq('tenant_id', tenantId)
            .eq('provider', 'google');
            
        // –ü–æ–ª—É—á–∞–µ–º team members
        const { data: members } = await supabase
            .from('team_members')
            .select('*')
            .eq('tenant_id', tenantId)
            .eq('is_active', true);
            
        return {
            sheets: destinations?.filter(d => d.type === 'sheet') || [],
            calendars: destinations?.filter(d => d.type === 'calendar') || [],
            members: members || []
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
        return { sheets: [], calendars: [], members: [] };
    }
}

async function handleSetupCommand(chatId, context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const integrations = await getCurrentIntegrations(context.tenant_id);
    
    let statusMessage = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n\n`;
    statusMessage += `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n`;
    
    // Google Sheets
    if (integrations.sheets.length > 0) {
        const sheetsId = integrations.sheets[0].external_id.split('!')[0];
        statusMessage += `‚úÖ Google Sheets: –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (${integrations.sheets.length} –ª–∏—Å—Ç–æ–≤)\n`;
        statusMessage += `   üìã ID: ${sheetsId}\n`;
    } else {
        statusMessage += `‚ùå Google Sheets: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n`;
    }
    
    // Team Members
    if (integrations.members.length > 0) {
        statusMessage += `‚úÖ –ö–æ–º–∞–Ω–¥–∞: ${integrations.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
        integrations.members.forEach(member => {
            const hasPhone = member.tg_chat_id ? 'üì±' : '‚ùå';
            statusMessage += `   ${hasPhone} ${member.display_name}\n`;
        });
    } else {
        statusMessage += `‚ùå –ö–æ–º–∞–Ω–¥–∞: —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n`;
    }
    
    // Google Calendar
    const hasCalendar = integrations.members.some(m => m.gcal_connection_id);
    if (hasCalendar) {
        statusMessage += `‚úÖ Google Calendar: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
    } else {
        statusMessage += `‚ùå Google Calendar: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
    }
    
    statusMessage += `\nüîß –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?`;

    await bot.sendMessage(chatId, statusMessage, {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìä Google Sheets', callback_data: 'setup_sheets' },
                    { text: 'üë• –ö–æ–º–∞–Ω–¥–∞', callback_data: 'setup_team' }
                ],
                [
                    { text: 'üìÖ Google Calendar', callback_data: 'setup_calendar' },
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'setup_refresh' }
                ],
                [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'setup_cancel' }
                ]
            ]
        }
    });
}

async function handleTeamCommand(chatId, context) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const { data: teamMembers, error: membersError } = await supabase
            .from('team_members')
            .select('id, display_name, aliases, meta')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true);

        if (membersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã:', membersError);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã');
            return;
        }

        let message = `üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π**\n\n`;
        
        if (teamMembers && teamMembers.length > 0) {
            message += `‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã (${teamMembers.length}):**\n`;
            teamMembers.forEach((member, index) => {
                message += `${index + 1}. **${member.display_name}**\n`;
                if (member.aliases && member.aliases.length > 0) {
                    message += `   üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: ${member.aliases.join(', ')}\n`;
                }
                if (member.meta?.tg_chat_id) {
                    message += `   üì± Telegram: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
                }
                if (member.meta?.gcal_email) {
                    message += `   üìÖ Google Calendar: ${member.meta.gcal_email}\n`;
                }
                message += '\n';
            });
        } else {
            message += `üìù **–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞**\n\n`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        if (context.teamSetupState && context.teamSetupState.step) {
            message += `‚ö†Ô∏è **–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã**\n`;
            message += `‚Ä¢ –¢–µ–∫—É—â–∏–π —à–∞–≥: ${context.teamSetupState.step}\n`;
            message += `‚Ä¢ –ù–∞—á–∞—Ç–æ: ${new Date(context.teamSetupState.createdAt).toLocaleString('ru-RU')}\n\n`;
        }
        
        message += `üîß **–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**\n`;
        message += `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n`;
        message += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n`;
        message += `‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar\n`;
        message += `‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏\n\n`;

        message += `üìÖ **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n`;
        message += `‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –ò—Ä–µ –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"\n`;
        message += `‚Ä¢ "–ó–∞–¥–∞—á–∞ –¥–ª—è –ú–∞—à–∏: –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"\n`;
        message += `‚Ä¢ "–ü–æ–ø—Ä–æ—Å–∏ –í–∞–Ω—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫"\n\n`;

        message += `üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;

        const keyboard = [];
        
        if (teamMembers && teamMembers.length > 0) {
            keyboard.push([
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data: 'team_add_member' },
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'team_edit_members' }
            ]);
            keyboard.push([
                { text: 'üì± Telegram', callback_data: 'team_setup_telegram' },
                { text: 'üìÖ Google Calendar', callback_data: 'team_setup_calendar' }
            ]);
        } else {
            keyboard.push([
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data: 'team_add_member' }
            ]);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (context.teamSetupState && context.teamSetupState.step) {
            keyboard.push([
                { text: 'üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', callback_data: 'team_continue_setup' }
            ]);
        }
        
        keyboard.push([
            { text: 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data: 'team_instructions' },
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_cancel' }
        ]);

        await bot.sendMessage(chatId, message, { 
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /team:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã');
    }
}

async function handleSheetsCommand(chatId, context, url) {
    if (!url || !url.includes('docs.google.com/spreadsheets')) {
        await bot.sendMessage(chatId, `üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets

–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets
2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è: ai-assistant@your-project.iam.gserviceaccount.com
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π: /sheets –°–°–´–õ–ö–ê

–ü—Ä–∏–º–µ—Ä:
/sheets https://docs.google.com/spreadsheets/d/1ABC123.../edit`);
        return;
    }
    
    try {
        // Extract spreadsheet ID from URL
        const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
        if (!match) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets.');
            return;
        }
        
        const spreadsheetId = match[1];
        
        // Test mode - just show success message
        await bot.sendMessage(chatId, `‚úÖ Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–Ω! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)

üìä ID —Ç–∞–±–ª–∏—Ü—ã: ${spreadsheetId}
üìù –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ª–∏—Å—Ç—ã:
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã
‚Ä¢ –ó–∞–¥–∞—á–∏  
‚Ä¢ –ó–∞–∫–ª–∞–¥–∫–∏

‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.
–î–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ Google API.`);
        
        // Try to save to database if available
        try {
            // Save destinations for different record types
            const destinations = [
                {
                    tenant_id: context.tenant_id,
                    type: 'sheet',
                    provider: 'google',
                    external_id: `${spreadsheetId}!–†–∞—Å—Ö–æ–¥—ã`,
                    meta: { sheet_name: '–†–∞—Å—Ö–æ–¥—ã', record_kind: 'expense' }
                },
                {
                    tenant_id: context.tenant_id,
                    type: 'sheet', 
                    provider: 'google',
                    external_id: `${spreadsheetId}!–ó–∞–¥–∞—á–∏`,
                    meta: { sheet_name: '–ó–∞–¥–∞—á–∏', record_kind: 'task' }
                },
                {
                    tenant_id: context.tenant_id,
                    type: 'sheet',
                    provider: 'google', 
                    external_id: `${spreadsheetId}!–ó–∞–∫–ª–∞–¥–∫–∏`,
                    meta: { sheet_name: '–ó–∞–∫–ª–∞–¥–∫–∏', record_kind: 'bookmark' }
                }
            ];
            
            // Insert destinations
            const { error } = await supabase
                .from('destinations')
                .upsert(destinations);
                
            if (error) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å destinations:', error.message);
            } else {
                console.log('‚úÖ Destinations —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
                await bot.sendMessage(chatId, `üéâ Google Sheets –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É.`);
            }
            
        } catch (dbError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', dbError.message);
        }
        
    } catch (error) {
        console.error('Sheets setup error:', error);
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏".`);
    }
}

async function handlePersonalCalendarSetup(chatId, context) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–∂–µ –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('meta')
            .eq('id', context.user_id)
            .single();
            
        if (userError) throw userError;
        
        const hasPersonalCalendar = user.meta?.personal_calendar_id;
        
        let message = `üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ–≥–æ Google Calendar\n\n`;
        
        if (hasPersonalCalendar) {
            message += `‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n`;
            message += `üìÖ Calendar ID: ${user.meta.personal_calendar_id}\n\n`;
            message += `üîÑ –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å Calendar ID?`;
        } else {
            message += `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Google Calendar:\n\n`;
            message += `1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar\n`;
            message += `2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —Å:\n`;
            message += `üìß ai-assistant-bot-270@ai-assistant-sheets.iam.gserviceaccount.com\n`;
            message += `3Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ "–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"\n`;
            message += `4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Calendar ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n`;
            message += `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /calendar YOUR_CALENDAR_ID\n\n`;
            message += `üí° –ö–∞–∫ –Ω–∞–π—Ç–∏ Calendar ID:\n`;
            message += `‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n`;
            message += `‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"\n`;
            message += `‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è"`;
        }
        
        await bot.sendMessage(chatId, message, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'personal_calendar_help' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_refresh' }
                    ]
                ]
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    }
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
const TIMEZONES = [
    { name: 'üá∑üá∫ –ú–æ—Å–∫–≤–∞', value: 'Europe/Moscow', offset: 'UTC+3' },
    { name: 'üá∫üá¶ –ö–∏–µ–≤', value: 'Europe/Kiev', offset: 'UTC+2' },
    { name: 'üá©üá™ –ë–µ—Ä–ª–∏–Ω', value: 'Europe/Berlin', offset: 'UTC+1' },
    { name: 'üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫', value: 'America/New_York', offset: 'UTC-5' },
    { name: 'üá¶üá™ –î—É–±–∞–π', value: 'Asia/Dubai', offset: 'UTC+4' },
    { name: 'üáØüáµ –¢–æ–∫–∏–æ', value: 'Asia/Tokyo', offset: 'UTC+9' }
];

async function handleCalendarCommand(chatId, context, calendarId) {
    if (!calendarId || !calendarId.includes('@') || calendarId.length < 10) {
        await bot.sendMessage(chatId, `üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calendar YOUR_CALENDAR_ID

–ü—Ä–∏–º–µ—Ä:
/calendar your-email@gmail.com

–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ Calendar ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Calendar.`);
        return;
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingTimezone = context.meta?.timezone;
        
        if (existingTimezone) {
            // –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            const { error } = await supabase
                .from('users')
                .update({ 
                    meta: {
                        ...context.meta,
                        personal_calendar_id: calendarId.trim(),
                        calendar_setup_date: new Date().toISOString()
                    }
                })
                .eq('id', context.user_id);
                
            if (error) throw error;
            
            await bot.sendMessage(chatId, `‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

üìÖ Calendar ID: ${calendarId}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${existingTimezone}

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º Google Calendar.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ" üìû`);
        } else {
            // –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Calendar ID –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            const { error } = await supabase
                .from('users')
                .update({ 
                    meta: {
                        ...context.meta,
                        personal_calendar_id: calendarId.trim(),
                        calendar_setup_date: new Date().toISOString(),
                        calendar_setup_pending: true
                    }
                })
                .eq('id', context.user_id);
                
            if (error) throw error;
            
            await showTimezoneSelection(chatId, 'personal');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Calendar ID:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Calendar ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function showTimezoneSelection(chatId, type, memberData = null) {
    const keyboard = TIMEZONES.map(tz => [
        { text: `${tz.name} (${tz.offset})`, callback_data: `timezone_${type}_${tz.value}` }
    ]);
    
    keyboard.push([
        { text: 'üåç –î—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data: `timezone_${type}_other` }
    ]);
    
    let message = '';
    if (type === 'personal') {
        message = `‚è∞ **–í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ Google Calendar –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:`;
    } else if (type === 'team') {
        message = `‚è∞ **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberData?.name || ''}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:`;
        keyboard.unshift([
            { text: 'üîÑ –¢–∞–∫–æ–π –∂–µ –∫–∞–∫ —É –º–µ–Ω—è', callback_data: `timezone_team_same` }
        ]);
    }
    
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

async function handleLLMResponse(result, chatId) {
    switch (result.type) {
        case 'text':
            if (result.content) {
                await bot.sendMessage(chatId, result.content);
            }
            break;

        case 'tools_executed':
            let message = result.content || '';
            
            if (result.tools && result.tools.length > 0) {
                for (const tool of result.tools) {
                    if (tool.error) {
                        message += `\n‚ùå –û—à–∏–±–∫–∞: ${tool.error}`;
                    } else if (tool.tool.startsWith('add_')) {
                        const kind = tool.tool.replace('add_', '');
                        const emoji = kind === 'expense' ? 'üí∞' : kind === 'task' ? 'üìã' : 'üîñ';
                        message += `\n${emoji} –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`;
                        
                        if (tool.result.routing?.deliveries_created > 0) {
                            message += ` (${tool.result.routing.deliveries_created} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)`;
                        }
                    }
                }
            }
            
            if (message) {
                await bot.sendMessage(chatId, message);
            }
            break;

        case 'error':
            await bot.sendMessage(chatId, result.content);
            break;
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook secret –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// app.use('/webhook', (req, res, next) => {
//     if (req.method === 'POST') {
//         const secretToken = req.headers['x-telegram-bot-api-secret-token'];
//         const expectedSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
//         
//         console.log('üîç Webhook debug:', {
//             secretToken,
//             expectedSecret,
//             headers: req.headers
//         });
//         
//         if (!expectedSecret || secretToken !== expectedSecret) {
//             console.log('‚ùå Webhook secret token mismatch');
//             return res.status(401).json({ error: 'Unauthorized' });
//         }
//     }
//     next();
// });

// Webhook for Telegram
app.get('/webhook', (req, res) => {
    res.json({ 
        status: 'webhook_ready',
        message: 'Webhook endpoint is ready for POST requests',
        method: 'POST only'
    });
});

app.post('/webhook', async (req, res) => {
    console.log('üîç Webhook called with body:', req.body);
    
    try {
        const update = req.body;
        
        if (!update) {
            console.log('‚ùå No update in request body');
            return res.json({ ok: true });
        }
        
        // Handle message
        if (update.message) {
            console.log('üì® Processing message from webhook:', update.message);
            try {
                await processMessage(update.message);
                console.log('‚úÖ Message processed successfully');
            } catch (msgError) {
                console.error('‚ùå Error processing message:', msgError);
            }
        }
        
        // Handle callback queries (inline buttons)
        if (update.callback_query) {
            console.log('üîò Processing callback query from webhook');
            try {
                await handleCallbackQuery(update.callback_query);
                console.log('‚úÖ Callback query processed successfully');
            } catch (callbackError) {
                console.error('‚ùå Error processing callback query:', callbackError);
            }
        }
        
        console.log('‚úÖ Webhook response sent');
        res.json({ ok: true });
    } catch (error) {
        console.error('‚ùå Webhook error:', error);
        console.error('Webhook error stack:', error.stack);
        res.status(500).json({ 
            error: 'Internal server error',
            message: error.message 
        });
    }
});

// Handle callback queries
async function handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    try {
        const context = await getContext(chatId.toString());
        
        switch (data) {
            case 'setup_memory':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ!' });
                await bot.sendMessage(chatId, `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏.
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /search

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –∫–æ—Ñ–µ" ‚òï
"–ó–∞–¥–∞—á–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ" üìû`);
                break;
                
            case 'setup_sheets':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Sheets...' });
                await handleSheetsCommand(chatId, context, '');
                break;
                
            case 'setup_later':
                await bot.answerCallbackQuery(query.id, { text: '–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ' });
                await bot.sendMessage(chatId, `üëå –•–æ—Ä–æ—à–æ, –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–∑–∂–µ.

–ü–æ–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.
–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ - /setup

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 –Ω–∞ –æ–±–µ–¥" üçΩÔ∏è
"–ò–¥–µ—è: —Å–¥–µ–ª–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" üí°`);
                break;
                
            case 'setup_team':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã...' });
                await handleTeamCommand(chatId, context);
                break;
                
            case 'setup_refresh':
                await bot.answerCallbackQuery(query.id, { text: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...' });
                await handleSetupCommand(chatId, context);
                break;
                
            case 'setup_calendar':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...' });
                await handlePersonalCalendarSetup(chatId, context);
                break;
                
            case 'setup_cancel':
                await bot.answerCallbackQuery(query.id, { text: '–û—Ç–º–µ–Ω–µ–Ω–æ' });
                await bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup');
                break;

            case 'team_add_member':
                await bot.answerCallbackQuery(query.id, { text: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞...' });
                await startAddTeamMember(chatId, context);
                break;

            case 'team_edit_members':
                await bot.answerCallbackQuery(query.id, { text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...' });
                await showEditTeamMembers(chatId, context);
                break;

            case 'team_setup_telegram':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram...' });
                await setupTeamTelegram(chatId, context);
                break;

            case 'team_setup_calendar':
                await bot.answerCallbackQuery(query.id, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar...' });
                await setupTeamCalendar(chatId, context);
                break;

            case 'team_instructions':
                await bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...' });
                await showTeamInstructions(chatId);
                break;

            case 'team_continue_setup':
                await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...' });
                await continueTeamSetup(chatId, context);
                break;

            case 'team_save_member':
                await bot.answerCallbackQuery(query.id, { text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' });
                await saveTeamMember(chatId, context);
                break;

            case 'team_cancel_add':
                await bot.answerCallbackQuery(query.id, { text: '–û—Ç–º–µ–Ω–µ–Ω–æ' });
                try {
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const { error } = await supabase
                        .from('users')
                        .update({ 
                            meta: {
                                ...context.meta,
                                teamSetupState: null
                            }
                        })
                        .eq('id', context.user_id);
                    
                    if (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:', error);
                    } else {
                        console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.user_id}`);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context.teamSetupState = null;
                    context.meta.teamSetupState = null;
                    
                    await bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π.');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
                    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π.');
                }
                break;



            case 'team_check_telegram':
                await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–≤–µ—Ä–∫–∞...' });
                await checkTeamTelegramStatus(chatId, context);
                break;

            case 'team_calendar_instructions':
                await bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...' });
                await showCalendarSetupInstructions(chatId);
                break;
                
            case 'personal_calendar_help':
                await bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...' });
                await showPersonalCalendarInstructions(chatId);
                break;
                
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            case (data.match(/^timezone_personal_(.+)$/) || {}).input:
                const personalTimezone = data.match(/^timezone_personal_(.+)$/)?.[1];
                if (personalTimezone) {
                    await bot.answerCallbackQuery(query.id, { text: '–°–æ—Ö—Ä–∞–Ω—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...' });
                    await handlePersonalTimezoneSelection(chatId, context, personalTimezone);
                }
                break;
                
            case (data.match(/^timezone_team_(.+)$/) || {}).input:
                const teamTimezone = data.match(/^timezone_team_(.+)$/)?.[1];
                if (teamTimezone) {
                    await bot.answerCallbackQuery(query.id, { text: '–°–æ—Ö—Ä–∞–Ω—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞...' });
                    await handleTeamTimezoneSelection(chatId, context, teamTimezone);
                }
                break;

            case (data.match(/^edit_member_(\d+)$/) || {}).input:
                const memberId = data.match(/^edit_member_(\d+)$/)?.[1];
                if (memberId) {
                    await bot.answerCallbackQuery(query.id, { text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' });
                    await editTeamMember(chatId, context, memberId);
                }
                break;
                
            case 'setup_notifications':
                await bot.answerCallbackQuery(query.id, { text: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...' });
                await bot.sendMessage(chatId, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:

üìä Google Sheets - –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—ã
üë• –ö–æ–º–∞–Ω–¥–∞ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥–∞–º
üìß Email - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É

/sheets –°–°–´–õ–ö–ê - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets`);
                break;
                
            case 'setup_cancel':
                await bot.answerCallbackQuery(query.id, { text: '–û—Ç–º–µ–Ω–µ–Ω–æ' });
                await bot.sendMessage(chatId, `‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 1000 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" üí∞`);
                break;
                
            default:
                await bot.answerCallbackQuery(query.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
        }
    } catch (error) {
        console.error('Callback query error:', error);
        await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}

// API endpoints
app.get('/api/records', async (req, res) => {
    try {
        const { tenant_id, kind, limit = 20 } = req.query;
        
        let query = supabase
            .from('records')
            .select('*, assignee:team_members(display_name)')
            .eq('tenant_id', tenant_id)
            .order('created_at', { ascending: false })
            .limit(limit);
            
        if (kind) {
            query = query.eq('kind', kind);
        }
        
        const { data, error } = await query;
        
        if (error) throw error;
        res.json(data);
    } catch (error) {
        console.error('API records error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.get('/api/search', async (req, res) => {
    try {
        const { tenant_id, user_id, query, kind, limit } = req.query;
        
        const result = await toolsService.executeTool('search', 
            { query, kind, limit: parseInt(limit) || 20 }, 
            { tenant_id, user_id }
        );
        
        res.json(result);
    } catch (error) {
        console.error('API search error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Mini App API endpoint for reminders
app.post('/api/mini-app/reminders', async (req, res) => {
    try {
        const { title, time, assignee, type, tgWebAppData } = req.body;
        
        console.log('üì± Mini App reminder request:', { title, time, assignee, type });
        
        // Validate Telegram Web App data
        if (!tgWebAppData || !tgWebAppData.user) {
            return res.status(401).json({
                success: false,
                error: 'Unauthorized: Invalid Telegram Web App data'
            });
        }
        
        const tgUser = tgWebAppData.user;
        const chatId = tgUser.id;
        
        console.log('üë§ Telegram user:', tgUser);
        
        // Get user context from database
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('tg_chat_id', chatId.toString())
            .single();
        
        if (userError || !user) {
            console.error('‚ùå User not found:', userError);
            return res.status(404).json({
                success: false,
                error: 'User not found. Please start the bot first with /start'
            });
        }
        
        const context = {
            tenant_id: user.tenant_id,
            user_id: user.id,
            meta: user.meta || {}
        };
        
        console.log('üè¢ User context:', context);
        
        // Create reminder text for processing
        let reminderText;
        if (type === 'team' && assignee) {
            reminderText = `–Ω–∞–ø–æ–º–Ω–∏ ${assignee} ${title} ${time}`;
        } else {
            reminderText = `–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ ${title} ${time}`;
        }
        
        console.log('üìù Processing reminder text:', reminderText);
        
        // Process reminder using the existing service
        const result = await reminderService.processReminder(reminderText, context, chatId);
        
        console.log('‚úÖ Reminder processing result:', result);
        
        if (result.success) {
            res.json({
                success: true,
                data: {
                    id: Date.now(),
                    emoji: 'üîî',
                    title,
                    time,
                    assignee,
                    status: 'pending',
                    type: type || 'personal'
                },
                message: result.message
            });
        } else {
            res.status(400).json({
                success: false,
                error: result.message || 'Failed to create reminder'
            });
        }
        
    } catch (error) {
        console.error('‚ùå Mini App reminder error:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// Team management functions
async function startAddTeamMember(chatId, context) {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        const teamSetupState = {
            step: 'name',
            memberData: {},
            createdAt: new Date().toISOString(),
            lastUpdated: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...context.meta,
                    teamSetupState: teamSetupState
                }
            })
            .eq('id', context.user_id);

        if (error) throw error;

        console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.user_id}`);

        await bot.sendMessage(chatId, `üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã**

–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ò—Ä–∞, –ú–∞—à–∞, –í–∞–Ω—è, –ê–ª–µ–∫—Å–µ–π
üí° **–ö–æ–º–∞–Ω–¥—ã:** –æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ

‚ÑπÔ∏è **–í–∞–∂–Ω–æ:** –í–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∑–∞–º–µ—Ç–∫–∏ Google Sheets.`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        console.error('Stack trace:', error.stack);
        
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error.message}

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /team
‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);
    }
}



async function showEditTeamMembers(chatId, context) {
    try {
        const { data: teamMembers, error: membersError } = await supabase
            .from('team_members')
            .select('id, display_name, aliases, meta')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true);

        if (membersError) throw membersError;

        if (!teamMembers || teamMembers.length === 0) {
            await bot.sendMessage(chatId, 'üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!');
            return;
        }

        let message = `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã**\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`;

        const keyboard = teamMembers.map((member, index) => [
            { 
                text: `${index + 1}. ${member.display_name}`, 
                callback_data: `edit_member_${member.id}` 
            }
        ]);

        keyboard.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
        ]);

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    }
}

async function setupTeamTelegram(chatId, context) {
    try {
        const { data: teamMembers, error: membersError } = await supabase
            .from('team_members')
            .select('id, display_name, aliases, meta')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true)
            .or('meta->tg_chat_id.is.null,meta->tg_chat_id.eq.null');

        if (membersError) throw membersError;

        if (!teamMembers || teamMembers.length === 0) {
            await bot.sendMessage(chatId, `‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!

üì± **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Chat ID:**
1. –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –µ–≥–æ Chat ID
3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID`);
            return;
        }

        let message = `üì± **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n`;
        message += `–°–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è Telegram:\n\n`;

        teamMembers.forEach((member, index) => {
            message += `${index + 1}. **${member.display_name}**\n`;
        });

        message += `\nüìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n`;
        message += `1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
        message += `2Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –≤–∞—à Chat ID\n`;
        message += `3Ô∏è‚É£ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot\n\n`;
        message += `üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å:\n`;
        message += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö\n`;
        message += `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö\n`;
        message += `‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'team_check_telegram' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram');
    }
}

async function setupTeamCalendar(chatId, context) {
    try {
        const { data: teamMembers, error: membersError } = await supabase
            .from('team_members')
            .select('*')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true)
            .is('meta->gcal_email', null);

        if (membersError) throw membersError;

        if (!teamMembers || teamMembers.length === 0) {
            await bot.sendMessage(chatId, `‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è Google Calendar!

üìÖ **–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:**
‚Ä¢ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            return;
        }

        let message = `üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar**\n\n`;
        message += `–°–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è Google Calendar:\n\n`;

        teamMembers.forEach((member, index) => {
            message += `${index + 1}. **${member.display_name}**\n`;
        });

        message += `\nüîß **–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**\n`;
        message += `1Ô∏è‚É£ Google Service Account\n`;
        message += `2Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
        message += `3Ô∏è‚É£ Calendar ID –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n`;
        message += `üí° **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n`;
        message += `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n`;
        message += `‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏\n`;
        message += `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', callback_data: 'team_calendar_instructions' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar');
    }
}

async function showTeamInstructions(chatId) {
    try {
        const message = `üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥—ã**\n\n`;

        message += `üë• **1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**\n`;
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"\n`;
        message += `‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã\n`;
        message += `‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ Telegram Chat ID\n`;
        message += `‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar\n\n`;

        message += `üì± **2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram**\n`;
        message += `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
        message += `‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –µ–≥–æ Chat ID\n`;
        message += `‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot\n\n`;

        message += `üìÖ **3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar**\n`;
        message += `‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ Service Account\n`;
        message += `‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º\n`;
        message += `‚Ä¢ –£–∫–∞–∂–∏—Ç–µ Calendar ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n`;

        message += `üéØ **4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**\n`;
        message += `‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –ò—Ä–µ –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"\n`;
        message += `‚Ä¢ "–ó–∞–¥–∞—á–∞ –¥–ª—è –ú–∞—à–∏: –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"\n`;
        message += `‚Ä¢ "–ü–æ–ø—Ä–æ—Å–∏ –í–∞–Ω—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫"\n\n`;

        message += `üí° **–°–æ–≤–µ—Ç—ã:**\n`;
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n`;
        message += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n`;
        message += `‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π');
    }
}

async function saveTeamMember(chatId, context) {
    try {
        const state = context.teamSetupState;
        if (!state || !state.memberData) {
            await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /team');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data: member, error: saveError } = await supabase
            .from('team_members')
            .insert({
                tenant_id: context.tenant_id,
                display_name: state.memberData.display_name,
                aliases: state.memberData.aliases,
                gcal_connection_id: null,
                meta: {
                    tg_chat_id: state.memberData.tg_chat_id,
                    gcal_email: state.memberData.gcal_email,
                    setup_date: new Date().toISOString()
                },
                is_active: true
            })
            .select()
            .single();

        if (saveError) throw saveError;

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { error: clearError } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...context.meta,
                    teamSetupState: null
                }
            })
            .eq('id', context.user_id);

        if (clearError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', clearError);
        } else {
            console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.user_id}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.teamSetupState = null;
        context.meta.teamSetupState = null;

        let message = `‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n`;
        message += `üë§ **–ò–º—è:** ${member.display_name}\n`;
        if (member.aliases && member.aliases.length > 0) {
            message += `üè∑Ô∏è **–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** ${member.aliases.join(', ')}\n`;
        }
        if (member.meta?.tg_chat_id) {
            message += `üì± **Telegram:** –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
        }
        if (member.meta?.gcal_email) {
            message += `üìÖ **Google Calendar:** ${member.meta.gcal_email}\n`;
        }

        message += `\nüéØ **–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n`;
        message += `‚Ä¢ "–ó–∞–¥–∞—á–∞ –¥–ª—è ${member.display_name}: [–æ–ø–∏—Å–∞–Ω–∏–µ]"\n`;
        message += `‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏—Ç—å ${member.display_name} –æ [—Å–æ–±—ã—Ç–∏–∏]"\n`;
        message += `‚Ä¢ "–ü–æ–ø—Ä–æ—Å–∏ ${member.display_name} [–¥–µ–π—Å—Ç–≤–∏–µ]"`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data: 'team_add_member' },
                        { text: 'üîô –ö –∫–æ–º–∞–Ω–¥–µ', callback_data: 'setup_team' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.teamSetupState = null;
        context.meta.teamSetupState = null;
    }
}

async function checkTeamTelegramStatus(chatId, context) {
    try {
        const { data: teamMembers, error: membersError } = await supabase
            .from('team_members')
            .select('*')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true);

        if (membersError) throw membersError;

        if (!teamMembers || teamMembers.length === 0) {
            await bot.sendMessage(chatId, 'üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }

        let message = `üì± **–°—Ç–∞—Ç—É—Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n`;

        teamMembers.forEach((member, index) => {
            message += `${index + 1}. **${member.display_name}**\n`;
            if (member.meta?.tg_chat_id) {
                message += `   ‚úÖ Telegram: –Ω–∞—Å—Ç—Ä–æ–µ–Ω (${member.meta.tg_chat_id})\n`;
            } else {
                message += `   ‚ùå Telegram: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
            }
            message += '\n';
        });

        const configuredCount = teamMembers.filter(m => m.meta?.tg_chat_id).length;
        const totalCount = teamMembers.length;

        message += `üìä **–ò—Ç–æ–≥–æ:** ${configuredCount}/${totalCount} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n\n`;

        if (configuredCount < totalCount) {
            message += `üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n`;
            message += `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
            message += `‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot\n`;
            message += `‚Ä¢ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"`;
        }

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'team_check_telegram' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram');
    }
}

async function updateTeamMemberTelegramId(chatId, context) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ Telegram Chat ID
        const { data: membersWithoutTelegram, error: checkError } = await supabase
            .from('team_members')
            .select('id, display_name, aliases, meta')
            .eq('tenant_id', context.tenant_id)
            .eq('is_active', true)
            .or('meta->tg_chat_id.is.null,meta->tg_chat_id.eq.null');

        if (checkError || !membersWithoutTelegram || membersWithoutTelegram.length === 0) {
            return; // –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('tenant_id', context.tenant_id)
            .eq('tg_chat_id', chatId.toString())
            .single();

        if (userError || !user) {
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const member = membersWithoutTelegram.find(m => 
            m.display_name.toLowerCase() === user.display_name?.toLowerCase() ||
            (m.aliases && m.aliases.some(alias => 
                alias.toLowerCase() === user.display_name?.toLowerCase()
            ))
        );

        if (member) {
            // –û–±–Ω–æ–≤–ª—è–µ–º Telegram Chat ID –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ meta –∫–æ–ª–æ–Ω–∫–µ
            const { error: updateError } = await supabase
                .from('team_members')
                .update({ 
                    meta: {
                        ...member.meta,
                        tg_chat_id: chatId.toString()
                    }
                })
                .eq('id', member.id);

            if (!updateError) {
                console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω Telegram Chat ID –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${member.display_name}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
                await bot.sendMessage(chatId, `‚úÖ **Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã!**

üë§ **–£—á–∞—Å—Ç–Ω–∏–∫:** ${member.display_name}
üì± **Chat ID:** ${chatId}

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π`);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram Chat ID:', error);
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    }
}

async function editTeamMember(chatId, context, memberId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const { data: member, error: memberError } = await supabase
            .from('team_members')
            .select('id, display_name, aliases, meta')
            .eq('id', memberId)
            .eq('tenant_id', context.tenant_id)
            .single();

        if (memberError || !member) {
            await bot.sendMessage(chatId, '‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        let message = `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã**\n\n`;
        message += `üë§ **–ò–º—è:** ${member.display_name}\n`;
        if (member.aliases && member.aliases.length > 0) {
            message += `üè∑Ô∏è **–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** ${member.aliases.join(', ')}\n`;
        }
        if (member.meta?.tg_chat_id) {
            message += `üì± **Telegram:** ${member.meta.tg_chat_id}\n`;
        }
        if (member.meta?.gcal_email) {
            message += `üìÖ **Google Calendar:** ${member.meta.gcal_email}\n`;
        }

        message += `\nüí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;

        const keyboard = [
            [
                { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: `edit_name_${memberId}` },
                { text: 'üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã', callback_data: `edit_aliases_${memberId}` }
            ],
            [
                { text: 'üì± Telegram', callback_data: `edit_telegram_${memberId}` },
                { text: 'üìÖ Google Calendar', callback_data: `edit_calendar_${memberId}` }
            ],
            [
                { text: '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `deactivate_member_${memberId}` },
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
            ]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }
}

async function continueTeamSetup(chatId, context) {
    try {
        const state = context.teamSetupState;
        if (!state || !state.step) {
            await bot.sendMessage(chatId, '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /team');
            return;
        }

        console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–∞–Ω–¥—ã —Å —à–∞–≥–∞: ${state.step}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        switch (state.step) {
            case 'name':
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ 'name' —Å —Ç–µ–∫—Å—Ç–æ–º: "${text}"`);
                
                if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞' || text.toLowerCase() === 'cancel') {
                    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await clearState();
                    
                    await bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π.');
                    return;
                }
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
                const trimmedName = text.trim();
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è: "${trimmedName}"`);
                
                if (trimmedName.length < 2) {
                    console.log(`‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: ${trimmedName.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                if (trimmedName.length > 50) {
                    console.log(`‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: ${trimmedName.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                const isValidChars = /^[–∞-—è—ëa-z\s\-']+$/i.test(trimmedName);
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: ${isValidChars ? '‚úÖ' : '‚ùå'}`);
                
                if (!isValidChars) {
                    console.log(`‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: "${trimmedName}"`);
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω:**
‚Ä¢ –ò—Ä–∏–Ω–∞ –®–∞—Ñ–µ–µ–≤–∞
‚Ä¢ Irina Shafeeva
‚Ä¢ –ú–∞—Ä–∏—è-–ê–Ω–Ω–∞
‚Ä¢ O'Connor

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                console.log(`‚úÖ –ò–º—è –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: "${trimmedName}"`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º: "${trimmedName}"`);
                const { data: existingMember, error: checkError } = await supabase
                    .from('team_members')
                    .select('id, display_name')
                    .eq('tenant_id', context.tenant_id)
                    .eq('is_active', true)
                    .ilike('display_name', trimmedName)
                    .single();
                
                if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', checkError);
                }
                
                if (existingMember) {
                    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: ${existingMember.display_name}`);
                    await bot.sendMessage(chatId, `‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º **${existingMember.display_name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.

üí° **–í–∞—Ä–∏–∞–Ω—Ç—ã:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò—Ä–∏–Ω–∞ –®–∞—Ñ–µ–µ–≤–∞" –≤–º–µ—Å—Ç–æ "–ò—Ä–∏–Ω–∞")
‚Ä¢ –ò–ª–∏ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞`);
                    return;
                }
                
                console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
                
                state.memberData.display_name = trimmedName;
                state.step = 'aliases';
                state.lastUpdated = new Date().toISOString();
                
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 'aliases'`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await saveState();
                
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É`);
                
                await bot.sendMessage(chatId, `‚úÖ –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: **${state.memberData.display_name}**

üè∑Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ò—Ä–∞, –ò—Ä–∏–Ω–∞, –ò—Ä—É—à–∫–∞
üí° **–ò–ª–∏:** –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞:** –í–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∑–∞–º–µ—Ç–∫–∏.`);
                
                console.log(`‚úÖ –®–∞–≥ 'name' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                break;
                
            case 'aliases':
                const nameText = state.memberData.display_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                await bot.sendMessage(chatId, `‚úÖ –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: **${nameText}**

üè∑Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ò—Ä–∞, –ò—Ä–∏–Ω–∞, –ò—Ä—É—à–∫–∞
üí° **–ò–ª–∏:** –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`);
                break;
                
            case 'telegram':
                const aliasesText = state.memberData.aliases && state.memberData.aliases.length > 0 
                    ? state.memberData.aliases.join(', ') 
                    : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
                await bot.sendMessage(chatId, `‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: **${aliasesText}**

üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram Chat ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Chat ID:**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot
‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∂–µ`);
                break;
                
            case 'gcal_email':
                const telegramText = state.memberData.tg_chat_id 
                    ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (${state.memberData.tg_chat_id})` 
                    : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                await bot.sendMessage(chatId, `‚úÖ Telegram: **${telegramText}**

üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email Google Calendar —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ ivan@gmail.com
‚Ä¢ ivan@company.com
‚Ä¢ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`);
                break;
                
            case 'confirm':
                const gcalText = state.memberData.gcal_email 
                    ? state.memberData.gcal_email 
                    : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                await bot.sendMessage(chatId, `‚úÖ Google Calendar email: **${gcalText}**

üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞:**

üë§ **–ò–º—è:** ${state.memberData.display_name}
üè∑Ô∏è **–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** ${state.memberData.aliases && state.memberData.aliases.length > 0 ? state.memberData.aliases.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üì± **Telegram:** ${state.memberData.tg_chat_id ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (${state.memberData.tg_chat_id})` : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìÖ **Google Calendar:** ${gcalText}

üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'team_save_member' },
                                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'team_cancel_add' }
                            ]
                        ]
                    }
                });
                break;
                
            default:
                await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /team');
                // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await supabase
                    .from('users')
                    .update({ 
                        meta: {
                            ...context.meta,
                            teamSetupState: null
                        }
                    })
                    .eq('id', context.user_id);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /team');
    }
}

async function showCalendarSetupInstructions(chatId) {
    try {
        const message = `üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar –¥–ª—è –∫–æ–º–∞–Ω–¥—ã**\n\n`;

        message += `üîß **–®–∞–≥ 1: Google Service Account**\n`;
        message += `1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Cloud Console\n`;
        message += `2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n`;
        message += `3. –í–∫–ª—é—á–∏—Ç–µ Google Calendar API\n`;
        message += `4. –°–æ–∑–¥–∞–π—Ç–µ Service Account\n`;
        message += `5. –°–∫–∞—á–∞–π—Ç–µ JSON –∫–ª—é—á\n`;
        message += `6. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤ google-credentials.json\n\n`;

        message += `üîë **–®–∞–≥ 2: –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º**\n`;
        message += `1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n`;
        message += `2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞–π–¥–∏—Ç–µ "–î–µ–ª–∏—Ç—å—Å—è —Å –ª—é–¥—å–º–∏"\n`;
        message += `3. –î–æ–±–∞–≤—å—Ç–µ email –∏–∑ Service Account\n`;
        message += `4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ "–í–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"\n\n`;

        message += `üÜî **–®–∞–≥ 3: Calendar ID**\n`;
        message += `1. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞–π–¥–∏—Ç–µ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"\n`;
        message += `2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Calendar ID\n`;
        message += `3. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n`;

        message += `üí° **–°–æ–≤–µ—Ç—ã:**\n`;
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω Service Account –¥–ª—è –≤—Å–µ—Ö\n`;
        message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º\n`;
        message += `‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_team' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π');
    }
}

async function showPersonalCalendarInstructions(chatId) {
    try {
        let message = `üìÖ **–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è**\n\n`;
        
        message += `üîë **1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞**\n`;
        message += `‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar\n`;
        message += `‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n`;
        message += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø"\n\n`;
        
        message += `üë• **2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞**\n`;
        message += `‚Ä¢ –ù–∞–π–¥–∏—Ç–µ "–î–µ–ª–∏—Ç—å—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏"\n`;
        message += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π"\n`;
        message += `‚Ä¢ –í–≤–µ–¥–∏—Ç–µ: ai-assistant-bot-270@ai-assistant-sheets.iam.gserviceaccount.com\n`;
        message += `‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞: "–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"\n`;
        message += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"\n\n`;
        
        message += `üÜî **3. –ü–æ–ª—É—á–µ–Ω–∏–µ Calendar ID**\n`;
        message += `‚Ä¢ –í —Ç–æ–º –∂–µ –º–µ–Ω—é –Ω–∞–π–¥–∏—Ç–µ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"\n`;
        message += `‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è"\n`;
        message += `‚Ä¢ –û–±—ã—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–∞—à email\n\n`;
        
        message += `üìù **4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–æ—Ç–µ**\n`;
        message += `‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /calendar –í–ê–®_CALENDAR_ID\n`;
        message += `‚Ä¢ –ü—Ä–∏–º–µ—Ä: /calendar irina@gmail.com\n\n`;
        
        message += `‚úÖ **5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**\n`;
        message += `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"\n`;
        message += `‚Ä¢ –°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ`;
        
        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'setup_calendar' }
                    ]
                ]
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π');
    }
}

async function handlePersonalTimezoneSelection(chatId, context, timezone) {
    try {
        if (timezone === 'other') {
            await bot.sendMessage(chatId, `üåç **–î—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å**

–î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/timezone Europe/Your_City

–ü—Ä–∏–º–µ—Ä—ã:
/timezone Europe/London
/timezone Asia/Shanghai  
/timezone America/Los_Angeles

–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones`);
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        const { error } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...context.meta,
                    timezone: timezone,
                    calendar_setup_pending: false
                }
            })
            .eq('id', context.user_id);
            
        if (error) throw error;
        
        const timezoneName = TIMEZONES.find(tz => tz.value === timezone)?.name || timezone;
        
        await bot.sendMessage(chatId, `‚úÖ **–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**

üìÖ Calendar ID: ${context.meta?.personal_calendar_id}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezoneName}

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º Google Calendar —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ" üìû`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleTeamTimezoneSelection(chatId, context, timezone) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        const teamSetupState = context.teamSetupState;
        if (!teamSetupState || !teamSetupState.memberData) {
            await bot.sendMessage(chatId, '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /team');
            return;
        }
        
        let selectedTimezone = timezone;
        if (timezone === 'same') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selectedTimezone = context.meta?.timezone;
            if (!selectedTimezone) {
                await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑ /calendar');
                return;
            }
        } else if (timezone === 'other') {
            await bot.sendMessage(chatId, `üåç **–î—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞**

–î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/member_timezone Europe/Your_City

–ü—Ä–∏–º–µ—Ä—ã:
/member_timezone Europe/London
/member_timezone Asia/Shanghai`);
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        teamSetupState.memberData.timezone = selectedTimezone;
        teamSetupState.lastUpdated = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...context.meta,
                    teamSetupState: teamSetupState
                }
            })
            .eq('id', context.user_id);
            
        if (error) throw error;
        
        const timezoneName = TIMEZONES.find(tz => tz.value === selectedTimezone)?.name || selectedTimezone;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        let message = `‚úÖ **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${timezoneName}**\n\n`;
        message += `üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞:**\n\n`;
        message += `üë§ **–ò–º—è:** ${teamSetupState.memberData.display_name}\n`;
        if (teamSetupState.memberData.aliases && teamSetupState.memberData.aliases.length > 0) {
            message += `üè∑Ô∏è **–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** ${teamSetupState.memberData.aliases.join(', ')}\n`;
        }
        if (teamSetupState.memberData.tg_chat_id) {
            message += `üì± **Telegram:** –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
        }
        if (teamSetupState.memberData.gcal_email) {
            message += `üìÖ **Google Calendar:** ${teamSetupState.memberData.gcal_email}\n`;
        }
        message += `‚è∞ **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** ${timezoneName}\n`;
        message += `\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'team_save_member' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'team_cancel_add' }
                    ]
                ]
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleTeamSetupStep(chatId, context, text) {
    console.log(`üéØ ===== handleTeamSetupStep –í–´–ó–í–ê–ù–ê =====`);
    console.log(`üöÄ handleTeamSetupStep –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
    console.log(`   chatId: ${chatId}`);
    console.log(`   text: "${text}"`);
    console.log(`   state:`, JSON.stringify(context.teamSetupState, null, 2));
    
    try {
        const state = context.teamSetupState;
        
        if (!state || !state.step) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', state);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.');
            return;
        }
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥: ${state.step}`);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const saveState = async (retryCount = 0) => {
            console.log(`üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (${retryCount + 1}/3):`, {
                userId: context.user_id,
                step: state.step,
                memberData: state.memberData
            });
            
            try {
                const { error } = await supabase
                    .from('users')
                    .update({ 
                        meta: {
                            ...context.meta,
                            teamSetupState: state
                        }
                    })
                    .eq('id', context.user_id);
                
                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ SQL –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, error);
                    throw error;
                }
                
                console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.user_id}, —à–∞–≥: ${state.step}`);
                return true;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error);
                console.error(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
                    message: error.message,
                    code: error.code,
                    details: error.details,
                    hint: error.hint
                });
                
                if (retryCount < 2) {
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
                    await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                    return await saveState(retryCount + 1);
                }
                
                throw error;
            }
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const clearState = async () => {
            try {
                const { error } = await supabase
                    .from('users')
                    .update({ 
                        meta: {
                            ...context.meta,
                            teamSetupState: null
                        }
                    })
                    .eq('id', context.user_id);
                
                if (error) throw error;
                
                console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.user_id}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.teamSetupState = null;
                context.meta.teamSetupState = null;
                
                return true;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, error);
                throw error;
            }
        };
        
        switch (state.step) {
            case 'name':
                if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞' || text.toLowerCase() === 'cancel') {
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await clearState();
                    
                    await bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π.');
                    return;
                }
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
                const trimmedName = text.trim();
                if (trimmedName.length < 2) {
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                if (trimmedName.length > 50) {
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if (!/^[–∞-—è—ëa-z\s\-']+$/i.test(trimmedName)) {
                    await bot.sendMessage(chatId, `‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω:**
‚Ä¢ –ò—Ä–∏–Ω–∞ –®–∞—Ñ–µ–µ–≤–∞
‚Ä¢ Irina Shafeeva
‚Ä¢ –ú–∞—Ä–∏—è-–ê–Ω–Ω–∞
‚Ä¢ O'Connor

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                const { data: existingMember, error: checkError } = await supabase
                    .from('team_members')
                    .select('id, display_name')
                    .eq('tenant_id', context.tenant_id)
                    .eq('is_active', true)
                    .ilike('display_name', trimmedName)
                    .single();
                
                if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', checkError);
                }
                
                if (existingMember) {
                    await bot.sendMessage(chatId, `‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º **${existingMember.display_name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.

üí° **–í–∞—Ä–∏–∞–Ω—Ç—ã:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò—Ä–∏–Ω–∞ –®–∞—Ñ–µ–µ–≤–∞" –≤–º–µ—Å—Ç–æ "–ò—Ä–∏–Ω–∞")
‚Ä¢ –ò–ª–∏ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞`);
                    return;
                }
                
                state.memberData.display_name = trimmedName;
                state.step = 'aliases';
                state.lastUpdated = new Date().toISOString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await saveState();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.teamSetupState = state;
                context.meta.teamSetupState = state;
                
                await bot.sendMessage(chatId, `‚úÖ –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: **${state.memberData.display_name}**

üè∑Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ò—Ä–∞, –ò—Ä–∏–Ω–∞, –ò—Ä—É—à–∫–∞
üí° **–ò–ª–∏:** –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞:** –í–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∑–∞–º–µ—Ç–∫–∏.`);
                break;
                
            case 'aliases':
                if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text.toLowerCase() === 'skip') {
                    state.memberData.aliases = [];
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    const aliases = text.split(',')
                        .map(a => a.trim())
                        .filter(a => a && a.length > 0);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
                    const invalidAliases = aliases.filter(a => a.length > 30);
                    if (invalidAliases.length > 0) {
                        await bot.sendMessage(chatId, `‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤): ${invalidAliases.join(', ')}

–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –∑–∞–Ω–æ–≤–æ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".`);
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
                    const invalidChars = aliases.filter(a => !/^[–∞-—è—ëa-z0-9\s\-']+$/i.test(a));
                    if (invalidChars.length > 0) {
                        await bot.sendMessage(chatId, `‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: ${invalidChars.join(', ')}

üí° **–†–∞–∑—Ä–µ—à–µ–Ω—ã:** –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ò—Ä–∞, –ò—Ä—É—à–∫–∞, Irina, Irka

–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –∑–∞–Ω–æ–≤–æ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".`);
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    const uniqueAliases = [...new Set(aliases)];
                    if (uniqueAliases.length !== aliases.length) {
                        await bot.sendMessage(chatId, `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã. –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã.

üí° **–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:** ${uniqueAliases.join(', ')}`);
                    }
                    
                    state.memberData.aliases = uniqueAliases;
                }
                
                state.step = 'telegram';
                state.lastUpdated = new Date().toISOString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await saveState();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.teamSetupState = state;
                context.meta.teamSetupState = state;
                
                const aliasesText = state.memberData.aliases.length > 0 
                    ? state.memberData.aliases.join(', ') 
                    : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
                
                await bot.sendMessage(chatId, `‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: **${aliasesText}**

üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram Chat ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Chat ID:**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot
‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∂–µ`);
                break;
                
            case 'telegram':
                if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text.toLowerCase() === 'skip') {
                    state.memberData.tg_chat_id = null;
                } else {
                    const chatIdMatch = text.match(/-?\d+/);
                    if (chatIdMatch) {
                        const chatIdValue = chatIdMatch[0];
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Chat ID –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                        if (chatIdValue.length > 20) {
                            await bot.sendMessage(chatId, `‚ùå Chat ID —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Chat ID –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".`);
                            return;
                        }
                        
                        state.memberData.tg_chat_id = chatIdValue;
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".

üí° **–ü—Ä–∏–º–µ—Ä—ã Chat ID:**
‚Ä¢ 123456789
‚Ä¢ -987654321
‚Ä¢ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`);
                        return;
                    }
                }
                
                state.step = 'gcal_email';
                state.lastUpdated = new Date().toISOString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await saveState();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.teamSetupState = state;
                context.meta.teamSetupState = state;
                
                const telegramText = state.memberData.tg_chat_id 
                    ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (${state.memberData.tg_chat_id})` 
                    : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                
                await bot.sendMessage(chatId, `‚úÖ Telegram: **${telegramText}**

üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email Google Calendar —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ ivan@gmail.com
‚Ä¢ ivan@company.com
‚Ä¢ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`);
                break;
                
            case 'gcal_email':
                if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text.toLowerCase() === 'skip') {
                    state.memberData.gcal_email = null;
                } else {
                    const emailMatch = text.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
                    if (emailMatch) {
                        const email = text.trim();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É email
                        if (email.length > 100) {
                            await bot.sendMessage(chatId, `‚ùå Email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".`);
                            return;
                        }
                        
                        state.memberData.gcal_email = email;
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".

üí° **–ü—Ä–∏–º–µ—Ä—ã email:**
‚Ä¢ ivan@gmail.com
‚Ä¢ ivan@company.com
‚Ä¢ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`);
                        return;
                    }
                }
                
                state.step = 'confirm';
                state.lastUpdated = new Date().toISOString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await saveState();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.teamSetupState = state;
                context.meta.teamSetupState = state;
                
                const gcalText = state.memberData.gcal_email 
                    ? state.memberData.gcal_email 
                    : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                
                await bot.sendMessage(chatId, `‚úÖ Google Calendar email: **${gcalText}**

üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞:**

üë§ **–ò–º—è:** ${state.memberData.display_name}
üè∑Ô∏è **–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** ${state.memberData.aliases.length > 0 ? state.memberData.aliases.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üì± **Telegram:** ${state.memberData.tg_chat_id ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (${state.memberData.tg_chat_id})` : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìÖ **Google Calendar:** ${gcalText}

üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'team_save_member' },
                                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'team_cancel_add' }
                            ]
                        ]
                    }
                });
                break;
                
            default:
                console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${state.step}`);
                await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π.');
                await clearState();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return context;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
        console.error('Stack trace:', error.stack);
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (context.teamSetupState) {
                await supabase
                    .from('users')
                    .update({ 
                        meta: {
                            ...context.meta,
                            teamSetupState: null
                        }
                    })
                    .eq('id', context.user_id);
            }
        } catch (clearError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ:', clearError);
        }
        
        await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥—ã: ${error.message}

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞–Ω–æ–≤–æ
‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        return null;
    }
}

// Background tasks
setInterval(async () => {
    try {
        // Retry failed deliveries every 5 minutes
        await routingService.retryFailedDeliveries();
    } catch (error) {
        console.error('Background task error:', error);
    }
}, 5 * 60 * 1000);

// Health check endpoint for Vercel
app.get('/', (req, res) => {
    res.json({
        status: 'ok',
        message: 'ü§ñ AI Assistant v2.0 is running!',
        version: '2.0.0',
        endpoints: {
            webhook: '/webhook',
            api: '/api/*'
        }
    });
});

// Start server (only in non-serverless environment)
if (process.env.NODE_ENV !== 'production') {
    app.listen(PORT, async () => {
        console.log(`üöÄ AI Assistant server running on port ${PORT}`);
        console.log(`üì± Webhook URL: ${process.env.TELEGRAM_WEBHOOK_URL || `http://localhost:${PORT}/webhook`}`);
        console.log('üéØ New architecture ready!');
        
        // Setup webhook
        await setupWebhook();
    });
}

module.exports = app;
/**
 * Reminder Service
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: Google Calendar + Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

const { createTeamReminder } = require('./googleCalendar');
const { writeReminder } = require('./googleSheets');
const { supabase } = require('../config/database');

class ReminderService {
    constructor(bot) {
        this.bot = bot;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
     * @param {Object} reminderData - –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
     * @param {string} reminderData.contact - –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
     * @param {string} reminderData.what - —á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
     * @param {string} reminderData.when - –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
     * @param {string} reminderData.tenantId - ID —Ç–µ–Ω–∞–Ω—Ç–∞
     * @param {string} reminderData.chatId - ID —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
     */
    async createTeamReminder(reminderData) {
        try {
            const { contact, what, when, tenantId, chatId } = reminderData;
            
            console.log(`üìÖ –°–æ–∑–¥–∞—é –∫–æ–º–∞–Ω–¥–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ${contact}: ${what} –≤ ${when}`);

            // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã
            console.log(`üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${contact} –≤ tenant: ${tenantId}`);
            const teamMember = await this.getTeamMember(tenantId, contact);
            console.log(`üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:`, teamMember);
            
            if (!teamMember) {
                console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã "${contact}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return {
                    success: false,
                    message: `‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã "${contact}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
                };
            }
            
            console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–π–¥–µ–Ω: ${teamMember.display_name}`);

            // 2. –ü–æ–ª—É—á–∞–µ–º Google Sheets ID
            const spreadsheetId = await this.getUserGoogleSheetsId(tenantId);
            if (!spreadsheetId) {
                return {
                    success: false,
                    message: '‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                };
            }

            // 3. –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Calendar
            const calendarResult = await createTeamReminder(contact, what, when, tenantId);
            
            if (!calendarResult.success) {
                return {
                    success: false,
                    message: `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ Google Calendar: ${calendarResult.message || calendarResult.error}`
                };
            }

            // 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
            await writeReminder(spreadsheetId, contact, what, when, chatId);

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
            const telegramResult = await this.sendTelegramNotifications(teamMember, what, when, chatId);

            return {
                success: true,
                message: `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è ${contact}:\n\nüìÖ ${what}\n‚è∞ ${when}\n\nüì± –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar\nüìä –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram`,
                calendarEvent: calendarResult,
                telegramNotifications: telegramResult
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã
     */
    async getTeamMember(tenantId, contactName) {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            const nameVariations = this.generateNameVariations(contactName);
            console.log(`üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:`, nameVariations);
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–º–µ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ team_members
            for (const variation of nameVariations) {
                console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: "${variation}"`);
                
                const { data, error } = await supabase
                    .from('team_members')
                    .select('id, display_name, aliases, meta, tg_chat_id')
                    .eq('tenant_id', tenantId)
                    .eq('is_active', true)
                    .ilike('display_name', variation);

                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É "${variation}":`, error);
                    continue;
                }

                if (data && data.length > 0) {
                    const member = data[0];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã: "${variation}" ‚Üí ${member.display_name}`);
                    console.log(`üìß Meta –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:`, member.meta);
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–¥
                    return {
                        member_id: member.id,
                        display_name: member.display_name,
                        tg_chat_id: member.tg_chat_id,
                        meta: member.meta,
                        gcal_connection_id: null // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ
                    };
                }
            }

            console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã "${contactName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É`);
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
            return null;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ä–∞–∑–Ω—ã–µ –ø–∞–¥–µ–∂–∏)
     */
    generateNameVariations(name) {
        const variations = [name];
        
        // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
        if (name.endsWith('–∏')) {
            // "–ú–∞—Ä–∏–∏" ‚Üí "–ú–∞—Ä–∏—è"
            variations.push(name.slice(0, -1) + '—è');
            // "–ú–∞—Ä–∏–∏" ‚Üí "–ú–∞—Ä–∏—è" (—É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏)
            variations.push(name.slice(0, -1));
        }
        
        if (name.endsWith('–µ')) {
            // "–°–∞—à–µ" ‚Üí "–°–∞—à–∞"
            variations.push(name.slice(0, -1) + '–∞');
        }
        
        if (name.endsWith('—É')) {
            // "–°–∞—à—É" ‚Üí "–°–∞—à–∞"  
            variations.push(name.slice(0, -1) + '–∞');
        }
        
        if (name.endsWith('—é')) {
            // "–ú–∞—à—é" ‚Üí "–ú–∞—à–∞"
            variations.push(name.slice(0, -1) + '–∞');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if (!name.endsWith('–∞') && !name.endsWith('—è')) {
            variations.push(name + '–∞');
            variations.push(name + '—è');
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return [...new Set(variations)];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç Google Sheets ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserGoogleSheetsId(tenantId) {
        try {
            const { data: destinations, error } = await supabase
                .from('destinations')
                .select('external_id')
                .eq('tenant_id', tenantId)
                .eq('type', 'sheet')
                .eq('provider', 'google')
                .limit(1);

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID:', error);
                return null;
            }

            if (destinations && destinations.length > 0) {
                const externalId = destinations[0].external_id;
                const spreadsheetId = externalId.split('!')[0];
                return spreadsheetId;
            }

            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID:', error);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
     */
    async sendTelegramNotifications(teamMember, what, when, senderChatId) {
        try {
            const results = [];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–æ–º–∞–Ω–¥—ã
            const memberChatId = teamMember.tg_chat_id || teamMember.meta?.tg_chat_id;
            if (memberChatId) {
                try {
                    const message = this.formatReminderMessage(what, when, 'personal');
                    await this.bot.sendMessage(memberChatId, message, {
                        parse_mode: 'Markdown'
                    });
                    
                    results.push({
                        target: memberChatId,
                        status: 'sent',
                        type: 'personal'
                    });
                    
                    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${teamMember.display_name} –≤ Telegram (${memberChatId})`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${teamMember.display_name}:`, error);
                    results.push({
                        target: memberChatId,
                        status: 'failed',
                        error: error.message,
                        type: 'personal'
                    });
                }
            } else {
                console.log(`‚ö†Ô∏è Telegram chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${teamMember.display_name}`);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            try {
                const confirmationMessage = this.formatReminderMessage(what, when, 'confirmation', teamMember.display_name);
                await this.bot.sendMessage(senderChatId, confirmationMessage, {
                    parse_mode: 'Markdown'
                });
                
                results.push({
                    target: senderChatId,
                    status: 'sent',
                    type: 'confirmation'
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:', error);
                results.push({
                    target: senderChatId,
                    status: 'failed',
                    error: error.message,
                    type: 'confirmation'
                });
            }

            return {
                success: true,
                results: results,
                totalSent: results.filter(r => r.status === 'sent').length,
                totalFailed: results.filter(r => r.status === 'failed').length
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
     */
    formatReminderMessage(what, when, type, contactName = '') {
        const emoji = '‚è∞';
        const time = new Date().toLocaleString('ru-RU');
        
        switch (type) {
            case 'personal':
                return `${emoji} *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å*\n\nüìÖ ${what}\n‚è∞ ${when}\n\n_–°–æ–∑–¥–∞–Ω–æ: ${time}_`;
            
            case 'personal_calendar':
                return `${emoji} *–õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ*\n\nüìÖ ${what}\n‚è∞ ${when}\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à Google Calendar\nüìä –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets\n\n_–°–æ–∑–¥–∞–Ω–æ: ${time}_`;
            
            case 'confirmation':
                return `${emoji} *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ*\n\nüë§ –î–ª—è: ${contactName}\nüìÖ ${what}\n‚è∞ ${when}\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n\n_–í—Ä–µ–º—è: ${time}_`;
            
            default:
                return `${emoji} *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüìÖ ${what}\n‚è∞ ${when}\n\n_–í—Ä–µ–º—è: ${time}_`;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
     */
    async createPersonalReminder(reminderData) {
        try {
            const { what, when, tenantId, chatId } = reminderData;
            
            console.log(`üìÖ –°–æ–∑–¥–∞—é –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${what} –≤ ${when}`);

            // –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–π Calendar ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: user, error: userError } = await supabase
                .from('users')
                .select('meta')
                .eq('tenant_id', tenantId)
                .eq('tg_chat_id', chatId.toString())
                .single();
                
            if (userError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
                return {
                    success: false,
                    message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                };
            }
            
            const personalCalendarId = user.meta?.personal_calendar_id;
            const userTimezone = user.meta?.timezone || 'Europe/Moscow';
            console.log(`üìÖ Personal Calendar ID: ${personalCalendarId}`);
            console.log(`üåç User Timezone: ${userTimezone}`);
            
            if (!personalCalendarId) {
                return {
                    success: false,
                    message: '‚ùå –õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar'
                };
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            const { createPersonalCalendarEvent } = require('./googleCalendar');
            const calendarResult = await createPersonalCalendarEvent(personalCalendarId, what, when, userTimezone);
            
            if (!calendarResult.success) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', calendarResult.error);
                return {
                    success: false,
                    message: `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ Google Calendar: ${calendarResult.error || calendarResult.message}`
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º Google Sheets ID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ —Ç–æ–∂–µ
            const spreadsheetId = await this.getUserGoogleSheetsId(tenantId);
            if (spreadsheetId) {
                await writeReminder(spreadsheetId, '–Ø', what, when, chatId);
                console.log('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const message = this.formatReminderMessage(what, when, 'personal_calendar');
            await this.bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown'
            });

            return {
                success: true,
                message: `‚úÖ –õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\nüìÖ ${what}\n‚è∞ ${when}\n\nüìÜ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar\nüìä –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏ —Å–æ–∑–¥–∞–µ—Ç)
     */
    async processReminder(text, context, chatId) {
        try {
            console.log('‚è∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:', text);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            const reminderInfo = this.extractReminderInfo(text);
            console.log('üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:', reminderInfo);
            
            if (reminderInfo.contact && reminderInfo.when) {
                // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
                const timezoneConflict = await this.checkTimezoneConflict(context.tenant_id, chatId.toString(), reminderInfo.contact);
                
                if (timezoneConflict) {
                    // –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return await this.handleTimezoneConflict(timezoneConflict, reminderInfo, context, chatId);
                }
                
                // –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                return await this.createTeamReminder({
                    ...reminderInfo,
                    tenantId: context.tenant_id,
                    chatId: chatId.toString()
                });
            } else {
                // –õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                return await this.createPersonalReminder({
                    ...reminderInfo,
                    tenantId: context.tenant_id,
                    chatId: chatId.toString()
                });
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
     */
    async checkTimezoneConflict(tenantId, senderChatId, contactName) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            const { data: sender, error: senderError } = await supabase
                .from('users')
                .select('meta')
                .eq('tenant_id', tenantId)
                .eq('tg_chat_id', senderChatId)
                .single();
            
            if (senderError) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
                return null;
            }

            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            const teamMember = await this.getTeamMember(tenantId, contactName);
            
            if (!teamMember || !teamMember.meta) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
                return null;
            }

            const senderTimezone = sender.meta?.timezone || 'Europe/Moscow';
            const recipientTimezone = teamMember.meta?.timezone || 'Europe/Moscow';

            console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${senderTimezone}`);
            console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${recipientTimezone}`);

            if (senderTimezone !== recipientTimezone) {
                return {
                    senderTimezone,
                    recipientTimezone,
                    senderName: '–í—ã',
                    recipientName: contactName
                };
            }

            return null; // –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:', error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleTimezoneConflict(conflict, reminderInfo, context, chatId) {
        try {
            const message = `üåç *–ö–æ–Ω—Ñ–ª–∏–∫—Ç —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤*\n\n` +
                `–í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è *${conflict.recipientName}*:\n` +
                `üìÖ ${reminderInfo.what}\n` +
                `‚è∞ ${reminderInfo.when}\n\n` +
                `–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *${conflict.senderTimezone}*\n` +
                `–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ${conflict.recipientName}: *${conflict.recipientTimezone}*\n\n` +
                `–ü–æ —á—å–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?`;

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: `üïê –ü–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (${conflict.senderTimezone})`,
                            callback_data: `timezone_conflict_sender_${chatId}_${Date.now()}`
                        }
                    ],
                    [
                        {
                            text: `üïë –ü–æ –≤—Ä–µ–º–µ–Ω–∏ ${conflict.recipientName} (${conflict.recipientTimezone})`,
                            callback_data: `timezone_conflict_recipient_${chatId}_${Date.now()}`
                        }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });

            return {
                success: true,
                message: '–û–∂–∏–¥–∞—é –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞...',
                pendingTimezoneConflict: true
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:', error);
            return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤' };
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    extractReminderInfo(text) {
        const lowerText = text.toLowerCase();
        
        // –°–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const personalPronouns = ['–º–Ω–µ', '—Å–µ–±–µ', '–º–Ω–æ–π', '—Å–æ–±–æ–π'];
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∏—á–Ω–æ–µ –ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const hasPersonalPronoun = personalPronouns.some(pronoun => 
            lowerText.includes(pronoun)
        );
        
        if (hasPersonalPronoun) {
            // –≠—Ç–æ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (—É–±–∏—Ä–∞–µ–º "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ")
            const personalMatch = text.match(/(?:–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\s+(?:–º–Ω–µ|—Å–µ–±–µ)\s+(.+?)(?:\s+(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}:\d{2}|\d{1,2}\.\d{1,2}))/i) ||
                                text.match(/(?:–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\s+(?:–º–Ω–µ|—Å–µ–±–µ)\s+(.+)/i);
            
            let what = '';
            if (personalMatch) {
                what = personalMatch[1].trim();
                // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                what = what.replace(/(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}:\d{2}|\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)|\d{1,2}\.\d{1,2}|–≤\s+\d{1,2})\s*/gi, '').trim();
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            const dayMatch = text.match(/(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)|\d{1,2}\.\d{1,2}\.?\d{0,4})/i);
            const timeMatch = text.match(/(\d{1,2}):(\d{2})/);
            const hourMatch = text.match(/–≤\s+(\d{1,2})(?!\d)/); // "–≤ 12" –Ω–æ –Ω–µ "–≤ 12:00"
            
            let whenParts = [];
            if (dayMatch) whenParts.push(dayMatch[0]);
            if (timeMatch) {
                whenParts.push(timeMatch[0]);
            } else if (hourMatch) {
                whenParts.push(hourMatch[1] + ':00');
            }
            
            const when = whenParts.length > 0 ? whenParts.join(' –≤ ') : '–∑–∞–≤—Ç—Ä–∞';
            
            return {
                contact: null, // –õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                what: what || '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                when: when,
                originalText: text,
                isPersonal: true
            };
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π)
        const contactPatterns = [
            /(?:–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\s+(?:–¥–ª—è\s+)?([–∞-—è—ë]+)\s+(?:–æ\s+)?(.+?)(?:\s+(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}:\d{2}|\d{1,2}\.\d{1,2}))/i,
            /(?:–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\s+([–∞-—è—ë]+)\s+(?:–æ\s+)?(.+?)(?:\s+(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}:\d{2}|\d{1,2}\.\d{1,2}))/i
        ];
        
        let contact = null;
        let what = '';
        let when = '';
        
        for (const pattern of contactPatterns) {
            const match = text.match(pattern);
            if (match) {
                const potentialContact = match[1];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º
                if (!personalPronouns.includes(potentialContact.toLowerCase())) {
                    contact = potentialContact;
                    what = match[2].trim();
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                    const dayMatch = text.match(/(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)|\d{1,2}\.\d{1,2}\.?\d{0,4})/i);
                    const timeMatch = text.match(/(\d{1,2}):(\d{2})/);
                    const hourMatch = text.match(/–≤\s+(\d{1,2})(?!\d)/);
                    
                    let whenParts = [];
                    if (dayMatch) whenParts.push(dayMatch[0]);
                    if (timeMatch) {
                        whenParts.push(timeMatch[0]);
                    } else if (hourMatch) {
                        whenParts.push(hourMatch[1] + ':00');
                    }
                    
                    when = whenParts.length > 0 ? whenParts.join(' –≤ ') : '–∑–∞–≤—Ç—Ä–∞';
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç, —ç—Ç–æ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!contact) {
            console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
            
            const fallbackMatch = text.match(/(?:–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\s+(.+)/i);
            if (fallbackMatch) {
                what = fallbackMatch[1].trim();
                // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                what = what.replace(/(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}:\d{2}|\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)|\d{1,2}\.\d{1,2}|–≤\s+\d{1,2})\s*/gi, '').trim();
            }
            
            const dayMatch = text.match(/(?:–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)|\d{1,2}\.\d{1,2}\.?\d{0,4})/i);
            const timeMatch = text.match(/(\d{1,2}):(\d{2})/);
            const hourMatch = text.match(/–≤\s+(\d{1,2})(?!\d)/);
            
            let whenParts = [];
            if (dayMatch) whenParts.push(dayMatch[0]);
            if (timeMatch) {
                whenParts.push(timeMatch[0]);
            } else if (hourMatch) {
                whenParts.push(hourMatch[1] + ':00');
            }
            
            when = whenParts.length > 0 ? whenParts.join(' –≤ ') : '–∑–∞–≤—Ç—Ä–∞';
        }
        
        return {
            contact,
            what: what || text,
            when: when || '–∑–∞–≤—Ç—Ä–∞',
            originalText: text,
            isPersonal: !contact
        };
    }
}

module.exports = ReminderService;

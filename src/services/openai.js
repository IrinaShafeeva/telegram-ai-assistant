const OpenAI = require('openai');
const FormData = require('form-data');
const axios = require('axios');
const { EXPENSE_PARSING_PROMPT, ANALYTICS_PROMPT } = require('../config/constants');
const logger = require('../utils/logger');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

class OpenAIService {
  async transcribeVoice(audioBuffer, mimeType = 'audio/ogg') {
    try {
      const formData = new FormData();
      formData.append('file', audioBuffer, {
        filename: 'voice.ogg',
        contentType: mimeType,
      });
      formData.append('model', 'whisper-1');
      formData.append('language', 'ru');

      const response = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          ...formData.getHeaders(),
        },
      });

      return response.data.text;
    } catch (error) {
      logger.error('Voice transcription failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  async parseExpense(userInput) {
    try {
      let prompt = EXPENSE_PARSING_PROMPT.replace('{{userInput}}', userInput);

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 200
      });

      const result = completion.choices[0].message.content.trim();
      
      // Remove markdown code blocks if present
      const cleanResult = result.replace(/```json\n?|\n?```/g, '');
      
      try {
        const parsed = JSON.parse(cleanResult);
        
        // Validate required fields
        if (!parsed.amount || isNaN(parsed.amount)) {
          throw new Error('Invalid amount');
        }
        
        // Clean and validate data
        return {
          amount: parseFloat(parsed.amount),
          currency: parsed.currency || null,
          description: parsed.description || '–†–∞—Å—Ö–æ–¥',
          category: parsed.category || null
        };
      } catch (parseError) {
        logger.error('Failed to parse OpenAI response:', result);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —è—Å–Ω–µ–µ.');
      }
    } catch (error) {
      logger.error('Expense parsing failed:', error);
      throw error;
    }
  }

  async parseTransaction(userInput, userContext = {}) {
    try {
      const { categories = [], projects = [], primaryCurrency = 'RUB' } = userContext;

      // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
      logger.info(`üß† AI parsing transaction: "${userInput}"`);
      logger.info(`üìä User context - Projects: ${JSON.stringify(projects)}`);
      logger.info(`üìÇ User context - Categories: ${JSON.stringify(categories)}`);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
      let contextPrompt = '';
      if (projects.length > 0 || categories.length > 0) {
        contextPrompt = `
–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ):

`;
        if (projects.length > 0) {
          contextPrompt += `–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–†–û–ï–ö–¢–´:
${projects.map(p => `- ${p.name}: ${p.keywords}`).join('\n')}

`;
        }

        if (categories.length > 0) {
          contextPrompt += `–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
${categories.map(c => `- ${c.name}: ${c.keywords}`).join('\n')}

`;
        }
      }

      logger.info(`üìù Context prompt for AI:\n${contextPrompt}`);

      const prompt = `
–û–ø—Ä–µ–¥–µ–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–¢–µ–∫—Å—Ç: "${userInput}"

${contextPrompt}–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫, —Ç–æ—á–∫–∞–º–∏ —Å –∑–∞–ø—è—Ç–æ–π, –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) - –≤–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
–ï—Å–ª–∏ –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –≤–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º.

–í–µ—Ä–Ω–∏ JSON –≤ —Ç–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {
    "type": "income" | "expense",
    "amount": —á–∏—Å–ª–æ,
    "currency": "RUB" | "USD" | "EUR" | null,
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
    "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" | null,
    "project": "–ø—Ä–æ–µ–∫—Ç" | null
  }
]

–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:
1. –°–ù–ê–ß–ê–õ–ê –∏—â–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
2. –£—á–∏—Ç—ã–≤–∞–π –ø–∞–¥–µ–∂–∏, —Å–∏–Ω–æ–Ω–∏–º—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—à—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
4. type: "income" –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤, "expense" –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
5. amount: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã
6. currency: –æ–ø—Ä–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π "${primaryCurrency}" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
7. description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
8. category: –¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
9. project: –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ("–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" –∏–ª–∏ "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")

–í–ê–ñ–ù–û –î–õ–Ø –ü–†–û–ï–ö–¢–û–í:
- –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - –Ω–∞–∑–Ω–∞—á–∞–π —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
- –ï—Å–ª–∏ –ù–ï–¢ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ - –∏—â–∏ –ø—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" –∏–ª–∏ "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –∏–∑ —Å–ø–∏—Å–∫–∞
- –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
- –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
- –ù–ï –æ—Å—Ç–∞–≤–ª—è–π project –∫–∞–∫ null

–†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –í–ê–õ–Æ–¢ (—É—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è):
- RUB: —Ä—É–±–ª—å, —Ä—É–±–ª–µ–π, —Ä—É–±–ª—è–º, —Ä—É–±–ª—è–º–∏, —Ä—É–±–ª—è—Ö, —Ä—É–±, —Ä, ‚ÇΩ
- USD: –¥–æ–ª–ª–∞—Ä, –¥–æ–ª–ª–∞—Ä–æ–≤, –¥–æ–ª–ª–∞—Ä–∞–º, –¥–æ–ª–ª–∞—Ä–∞–º–∏, –¥–æ–ª–ª–∞—Ä–∞—Ö, –±–∞–∫—Å, $
- EUR: –µ–≤—Ä–æ, ‚Ç¨
- UAH: –≥—Ä–∏–≤–Ω–∞, –≥—Ä–∏–≤–µ–Ω, –≥—Ä–∏–≤–Ω—ã, –≥—Ä–∏–≤–Ω–∞–º, –≥—Ä–∏–≤–Ω–∞–º–∏, –≥—Ä–∏–≤–Ω–∞—Ö, –≥—Ä–Ω, ‚Ç¥
- GBP: —Ñ—É–Ω—Ç, —Ñ—É–Ω—Ç–æ–≤, —Ñ—É–Ω—Ç–∞–º, —Ñ—É–Ω—Ç–∞–º–∏, —Ñ—É–Ω—Ç–∞—Ö, ¬£
- KZT: —Ç–µ–Ω–≥–µ, ‚Ç∏

–í–ê–ñ–ù–û: –û–±—Ä–∞—â–∞–π –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≥—Ä–∏–≤–Ω—ã - "–≥—Ä–∏–≤–µ–Ω", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω—ã" = UAH

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è fallback:
–î–æ—Ö–æ–¥—ã: –ó–∞—Ä–ø–ª–∞—Ç–∞, –§—Ä–∏–ª–∞–Ω—Å, –ü—Ä–æ–¥–∞–∂–∏, –ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã
–†–∞—Å—Ö–æ–¥—ã: –ï–¥–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –ó–¥–æ—Ä–æ–≤—å–µ, –ü–æ–∫—É–ø–∫–∏, –ü—Ä–æ—á–µ–µ

–ü—Ä–∏–º–µ—Ä—ã:
–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã: [{"name": "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"}, {"name": "RentaCar"}]
"–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 50000" ‚Üí {"type": "income", "amount": 50000, "currency": "RUB", "description": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "category": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "project": "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"}
"–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 –Ω–∞ –∫–æ—Ñ–µ" ‚Üí {"type": "expense", "amount": 200, "currency": "RUB", "description": "–ö–æ—Ñ–µ", "category": "–ï–¥–∞", "project": "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"}
"–û–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ 1500" (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π) ‚Üí {"type": "expense", "amount": 1500, "currency": "RUB", "description": "–û–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", "category": "–ï–¥–∞", "project": "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"}

–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã: [{"name": "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã"}, {"name": "–†–∞–±–æ—Ç–∞"}]
"135 –≥—Ä–∏–≤–µ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã" ‚Üí {"type": "expense", "amount": 135, "currency": "UAH", "description": "–ü—Ä–æ–¥—É–∫—Ç—ã", "category": "–ï–¥–∞", "project": "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã"}
"50 –¥–æ–ª–ª–∞—Ä–æ–≤ —Ç–∞–∫—Å–∏" ‚Üí {"type": "expense", "amount": 50, "currency": "USD", "description": "–¢–∞–∫—Å–∏", "category": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "project": "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã"}

"–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É –º–∞—à–∏–Ω—ã 5000" (–µ—Å–ª–∏ "RentaCar" –∏–º–µ–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ "–∞—Ä–µ–Ω–¥–∞, –º–∞—à–∏–Ω–∞") ‚Üí {"type": "expense", "amount": 5000, "currency": "RUB", "description": "–ê—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã", "category": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "project": "RentaCar"}
`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 200
      });

      const result = completion.choices[0].message.content.trim();
      logger.info(`ü§ñ AI raw response: ${result}`);

      // Remove markdown code blocks if present
      const cleanResult = result.replace(/```json\n?|\n?```/g, '');

      try {
        const parsed = JSON.parse(cleanResult);
        logger.info(`‚úÖ AI parsed result: ${JSON.stringify(parsed)}`);

        // Ensure we have an array
        const transactions = Array.isArray(parsed) ? parsed : [parsed];

        // Validate and process each transaction
        const processedTransactions = transactions.map((transaction, index) => {
          if (!transaction.amount || isNaN(transaction.amount)) {
            throw new Error(`Invalid amount in transaction ${index + 1}`);
          }

          if (!['income', 'expense'].includes(transaction.type)) {
            throw new Error(`Invalid transaction type in transaction ${index + 1}`);
          }

          return {
            type: transaction.type,
            amount: parseFloat(transaction.amount),
            currency: transaction.currency || null,
            description: transaction.description || (transaction.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'),
            category: transaction.category || null,
            project: transaction.project || null
          };
        });

        logger.info(`üéØ Final AI result (${processedTransactions.length} transactions): ${JSON.stringify(processedTransactions)}`);

        // For backward compatibility, return single transaction if only one
        return processedTransactions.length === 1 ? processedTransactions[0] : processedTransactions;
        
      } catch (parseError) {
        logger.error('JSON parsing failed:', parseError, 'Raw result:', cleanResult);
        throw new Error('parsing');
      }

    } catch (error) {
      logger.error('Transaction parsing failed:', error);
      throw error;
    }
  }

  async analyzeExpenses(userQuestion, expensesData, userId) {
    try {
      // Prepare expense data for context
      const expenseContext = expensesData.map(exp => 
        `${exp.expense_date}: ${exp.description} - ${exp.amount} ${exp.currency} (${exp.category})`
      ).join('\n');

      const prompt = ANALYTICS_PROMPT
        .replace('{{userQuestion}}', userQuestion)
        .replace('{{expenseData}}', expenseContext || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö');

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 500
      });

      return completion.choices[0].message.content.trim();
    } catch (error) {
      logger.error('Expense analysis failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async analyzeExpensesWithData(userQuestion, analyticsData, userId) {
    try {
      const categoryList = analyticsData.categoryBreakdown
        .map(cat => `${cat.category}: ${cat.formatted} (${cat.percentage}%)`)
        .join('\n');
      
      const monthlyList = analyticsData.monthlyBreakdown
        .map(month => `${month.month}: ${month.formatted}`)
        .join('\n');

      const prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${userQuestion}"

–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ):
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${analyticsData.totalAmount}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: ${analyticsData.totalExpenses}
üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${analyticsData.topCategory}
üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${analyticsData.averagePerDay}

üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
${categoryList}

üìÖ –ü–æ –º–µ—Å—è—Ü–∞–º:
${monthlyList}

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥—Ä—É–≥–∏–µ
- –í—Å–µ —Å—É–º–º—ã —É–∂–µ –≤ –≤–∞–ª—é—Ç–µ ${analyticsData.primaryCurrency}
- –ü—Ä–æ—Ü–µ–Ω—Ç—ã —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${analyticsData.topCategory}"

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2, // Lower temperature for more accurate responses
        max_tokens: 500
      });

      return completion.choices[0].message.content.trim();

    } catch (error) {
      logger.error('OpenAI analytics with data failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async analyzeExpensesWithFlexibleData(userQuestion, analyticsData, userId) {
    try {
      const categoryList = analyticsData.categoryBreakdown
        .map(cat => `${cat.category}: ${cat.formatted} (${cat.percentage}%)`).join('\\n');
      
      const monthlyList = analyticsData.monthlyBreakdown
        .map(month => `${month.month}: ${month.formatted}`).join('\\n');

      // Prepare detailed expense list for specific queries
      const expensesList = analyticsData.detailedExpenses
        .slice(0, 100) // Limit to avoid token overflow
        .map(exp => `${exp.date}: ${exp.description} - ${exp.amount} ${exp.currency} (${exp.category})`)
        .join('\\n');

      const prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${userQuestion}"

–ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï (—É–∂–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ):
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${analyticsData.totalAmount}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: ${analyticsData.totalExpenses}  
üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${analyticsData.topCategory}
üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${analyticsData.averagePerDay}

üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
${categoryList}

üìÖ –ü–æ –º–µ—Å—è—Ü–∞–º:
${monthlyList}

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ê–¢–´ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –º–µ—Å—Ç–∞–º, –¥–∞—Ç–∞–º):
${expensesList}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ —Å—É–º–º–∞—Ö/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—Ä–∞—Ç—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é/–º–µ—Å—Ç—É - –∏—â–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç–∞—Ö  
3. –í–ê–ñ–ù–û: –ò—â–∏ –ø–æ –¢–û–ß–ù–û–ú–£ –æ–ø–∏—Å–∞–Ω–∏—é! "–≤–∫—É—Å–Ω—è—à–∫–∏" ‚â† "–µ–¥–∞", —Å–º–æ—Ç—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞—Ç!
4. –í—Å–µ —Å—É–º–º—ã —É–∂–µ –≤ –≤–∞–ª—é—Ç–µ ${analyticsData.primaryCurrency}
5. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6. –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "–≤–∫—É—Å–Ω—è—à–∫–∏") –∏—â–∏ –ò–ú–ï–ù–ù–û —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö

–î–∞–π —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã.'
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 600
      });

      return completion.choices[0].message.content.trim();

    } catch (error) {
      logger.error('OpenAI flexible analytics failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async categorizeExpense(description, availableCategories) {
    try {
      const prompt = `
–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏: "${description}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
${availableCategories.join('\n')}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ.
–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –≤—ã–±–µ—Ä–∏ "–ü—Ä–æ—á–µ–µ".
      `;

      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 50
      });

      const result = completion.choices[0].message.content.trim();
      
      // Find matching category (case-insensitive)
      const matchedCategory = availableCategories.find(cat => 
        cat.toLowerCase().includes(result.toLowerCase()) || 
        result.toLowerCase().includes(cat.toLowerCase())
      );

      return matchedCategory || '–ü—Ä–æ—á–µ–µ';
    } catch (error) {
      logger.error('Expense categorization failed:', error);
      return '–ü—Ä–æ—á–µ–µ';
    }
  }

  async analyzeFinancialData(userQuestion, financialData, userId) {
    try {
      // Prepare financial summary
      const incomeSummary = financialData.incomeCategories
        .map(cat => `${cat.category}: ${cat.formatted} (${cat.percentage}%)`)
        .join('\n');
      
      const expenseSummary = financialData.expenseCategories
        .map(cat => `${cat.category}: ${cat.formatted} (${cat.percentage}%)`)
        .join('\n');

      const incomeMonthly = financialData.incomeMonthly
        .map(month => `${month.month}: ${month.formatted}`)
        .join('\n');
        
      const expenseMonthly = financialData.expenseMonthly
        .map(month => `${month.month}: ${month.formatted}`)
        .join('\n');

      // Prepare detailed transactions (limit to avoid token overflow)
      const allTransactions = [
        ...financialData.detailedIncomes.map(t => ({ ...t, type: 'income' })),
        ...financialData.detailedExpenses.map(t => ({ ...t, type: 'expense' }))
      ]
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(0, 100);

      const transactionsList = allTransactions
        .map(t => `${t.date}: ${t.description} - ${t.type === 'income' ? '+' : '-'}${t.amount} ${t.currency} (${t.category})`)
        .join('\n');

      const prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${userQuestion}"

–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è):
üí∞ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: ${financialData.totalIncome}
üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${financialData.totalExpenses}
üíµ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${financialData.profit}
üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤: ${financialData.incomeCount}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${financialData.expenseCount}
üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤: ${financialData.topIncomeCategory}
üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: ${financialData.topExpenseCategory}
üìÖ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${financialData.averageIncomePerDay}
üìÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${financialData.averageExpensePerDay}

üìã –î–û–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
${incomeSummary || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üí∏ –†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
${expenseSummary || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üìÖ –î–û–•–û–î–´ –ü–û –ú–ï–°–Ø–¶–ê–ú:
${incomeMonthly || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üìÖ –†–ê–°–•–û–î–´ –ü–û –ú–ï–°–Ø–¶–ê–ú:
${expenseMonthly || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é/–¥–∞—Ç–∞–º):
${transactionsList}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ —Å—É–º–º–∞—Ö/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ
2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é/–¥–∞—Ç–∞–º - –∏—â–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
3. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç "–ø–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" - –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ X —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
   1. –î–ê–¢–ê: –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—É–º–º–∞ –í–ê–õ–Æ–¢–ê (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
   2. –î–ê–¢–ê: –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—É–º–º–∞ –í–ê–õ–Æ–¢–ê (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
   ..."
4. –í—Å–µ —Å—É–º–º—ã —É–∂–µ –≤ –≤–∞–ª—é—Ç–µ ${financialData.primaryCurrency}
5. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Ö–æ–¥–∞—Ö, —Ä–∞—Å—Ö–æ–¥–∞—Ö, –ø—Ä–∏–±—ã–ª–∏, –±–∞–ª–∞–Ω—Å–µ
7. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π –¥–æ—Ö–æ–¥—ã —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
8. –î–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö

–î–∞–π —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –ø—Ä–∏–±—ã–ª—å –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã.'
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 700
      });

      return completion.choices[0].message.content.trim();

    } catch (error) {
      logger.error('Financial data analysis failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async generateResponse(prompt) {
    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 50
      });

      return completion.choices[0].message.content.trim();
    } catch (error) {
      logger.error('Response generation failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI');
    }
  }

}

module.exports = new OpenAIService();
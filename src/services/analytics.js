const { expenseService, userService, supabase } = require('./supabase');
const openaiService = require('./openai');
const currencyService = require('./currency');
const { formatCurrency, formatMultiCurrencyAmount } = require('../utils/currency');
const { getDateRange, formatDate } = require('../utils/date');
const logger = require('../utils/logger');

class AnalyticsService {
  async getExpenseAnalytics(userId, period = 'this_month') {
    try {
      const { startDate, endDate } = getDateRange(period);
      
      // Get expenses for the period
      const { data: expenses } = await supabase
        .rpc('get_user_expenses_for_period', {
          p_user_id: userId,
          start_date: startDate.toISOString().split('T')[0],
          end_date: endDate.toISOString().split('T')[0]
        });

      if (!expenses || expenses.length === 0) {
        return {
          totalAmount: '0',
          totalExpenses: 0,
          categories: [],
          currencies: [],
          averagePerDay: '0',
          periodName: this.getPeriodName(period)
        };
      }

      // Group by category
      const categoryTotals = expenses.reduce((acc, expense) => {
        const key = `${expense.category}_${expense.currency}`;
        if (!acc[key]) {
          acc[key] = {
            category: expense.category,
            currency: expense.currency,
            amount: 0,
            count: 0
          };
        }
        acc[key].amount += parseFloat(expense.amount);
        acc[key].count += 1;
        return acc;
      }, {});

      // Group by currency
      const currencyTotals = expenses.reduce((acc, expense) => {
        if (!acc[expense.currency]) {
          acc[expense.currency] = {
            currency: expense.currency,
            amount: 0,
            count: 0
          };
        }
        acc[expense.currency].amount += parseFloat(expense.amount);
        acc[expense.currency].count += 1;
        return acc;
      }, {});

      // Calculate days in period
      const daysInPeriod = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
      
      // Format results
      const categories = Object.values(categoryTotals)
        .sort((a, b) => b.amount - a.amount)
        .map(cat => ({
          ...cat,
          formattedAmount: formatCurrency(cat.amount, cat.currency),
          percentage: Math.round((cat.count / expenses.length) * 100)
        }));

      const currencies = Object.values(currencyTotals)
        .sort((a, b) => b.amount - a.amount)
        .map(curr => ({
          ...curr,
          formattedAmount: formatCurrency(curr.amount, curr.currency),
          averagePerDay: formatCurrency(curr.amount / daysInPeriod, curr.currency)
        }));

      return {
        totalAmount: formatMultiCurrencyAmount(expenses),
        totalExpenses: expenses.length,
        categories,
        currencies,
        averagePerDay: currencies.map(c => c.averagePerDay).join(', '),
        periodName: this.getPeriodName(period),
        period: {
          startDate: formatDate(startDate),
          endDate: formatDate(endDate),
          daysCount: daysInPeriod
        }
      };
    } catch (error) {
      logger.error('Analytics calculation error:', error);
      throw error;
    }
  }

  async askAIAnalytics(userId, question) {
    try {
      // Check AI limits
      const canUseAI = await userService.checkDailyLimits(userId, 'ai_question');
      if (!canUseAI) {
        const user = await userService.findById(userId);
        const limit = user.is_premium ? 20 : 5;
        throw new Error(`‚õî –õ–∏–º–∏—Ç AI –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω (${limit}/–¥–µ–Ω—å)`);
      }

      // Get user info for primary currency
      const user = await userService.findById(userId);
      const primaryCurrency = user.primary_currency || 'RUB';

      // Get expenses for last 3 months for AI analysis
      const { startDate, endDate } = getDateRange('last_3_months');
      
      const { data: expenses } = await supabase
        .rpc('get_user_expenses_for_period', {
          p_user_id: userId,
          start_date: startDate.toISOString().split('T')[0],
          end_date: endDate.toISOString().split('T')[0]
        });

      if (!expenses || expenses.length === 0) {
        return '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ç—ã, –∏ —è —Å–º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π! üìä';
      }

      // Convert all expenses to user's primary currency
      const convertedExpenses = await currencyService.convertExpenses(expenses, primaryCurrency);
      
      // Calculate analytics with proper math
      const analytics = this.calculateExpenseAnalytics(convertedExpenses, primaryCurrency);
      
      // Prepare structured data for AI
      const analyticsData = {
        totalAmount: analytics.totalAmount,
        totalExpenses: analytics.totalExpenses,
        primaryCurrency: primaryCurrency,
        categoryBreakdown: analytics.categoryBreakdown,
        monthlyBreakdown: analytics.monthlyBreakdown,
        topCategory: analytics.topCategory,
        averagePerDay: analytics.averagePerDay,
        question: question
      };

      // Use AI to analyze expenses with pre-calculated data
      const analysis = await openaiService.analyzeExpensesWithData(question, analyticsData, userId);

      // Increment usage counter
      await userService.incrementDailyUsage(userId, 'ai_question');

      return analysis;
    } catch (error) {
      logger.error('AI analytics error:', error);
      throw error;
    }
  }

  calculateExpenseAnalytics(expenses, currency) {
    const totalAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount), 0);
    const totalExpenses = expenses.length;
    
    // Group by category with correct math
    const categoryTotals = {};
    expenses.forEach(exp => {
      const category = exp.category || '–ü—Ä–æ—á–µ–µ';
      if (!categoryTotals[category]) {
        categoryTotals[category] = { amount: 0, count: 0 };
      }
      categoryTotals[category].amount += parseFloat(exp.amount);
      categoryTotals[category].count += 1;
    });
    
    // Sort categories by amount (descending)
    const categoryBreakdown = Object.entries(categoryTotals)
      .map(([category, data]) => ({
        category,
        amount: data.amount,
        count: data.count,
        percentage: Math.round((data.amount / totalAmount) * 100),
        formatted: currencyService.formatAmount(data.amount, currency)
      }))
      .sort((a, b) => b.amount - a.amount);
    
    // Group by month
    const monthlyTotals = {};
    expenses.forEach(exp => {
      const month = new Date(exp.expense_date).toISOString().slice(0, 7); // YYYY-MM
      if (!monthlyTotals[month]) {
        monthlyTotals[month] = { amount: 0, count: 0 };
      }
      monthlyTotals[month].amount += parseFloat(exp.amount);
      monthlyTotals[month].count += 1;
    });
    
    const monthlyBreakdown = Object.entries(monthlyTotals)
      .map(([month, data]) => ({
        month,
        amount: data.amount,
        count: data.count,
        formatted: currencyService.formatAmount(data.amount, currency)
      }))
      .sort((a, b) => b.month.localeCompare(a.month));
    
    // Calculate average per day (last 30 days)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    const recentExpenses = expenses.filter(exp => new Date(exp.expense_date) >= thirtyDaysAgo);
    const recentTotal = recentExpenses.reduce((sum, exp) => sum + parseFloat(exp.amount), 0);
    const averagePerDay = recentTotal / 30;
    
    return {
      totalAmount: currencyService.formatAmount(totalAmount, currency),
      totalExpenses,
      categoryBreakdown,
      monthlyBreakdown,
      topCategory: categoryBreakdown[0]?.category || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      averagePerDay: currencyService.formatAmount(averagePerDay, currency)
    };
  }

  async getTopCategories(userId, period = 'this_month', limit = 5) {
    try {
      const analytics = await this.getExpenseAnalytics(userId, period);
      return analytics.categories.slice(0, limit);
    } catch (error) {
      logger.error('Top categories error:', error);
      return [];
    }
  }

  async getExpenseTrends(userId, months = 3) {
    try {
      const trends = [];
      const currentDate = new Date();

      for (let i = 0; i < months; i++) {
        const date = new Date(currentDate);
        date.setMonth(date.getMonth() - i);
        
        const month = date.getMonth() + 1;
        const year = date.getFullYear();
        
        const { data: monthlyStats } = await expenseService.supabase
          .rpc('get_monthly_stats', {
            project_id: null, // We'll need to modify this for user-specific stats
            target_month: month,
            target_year: year
          });

        trends.unshift({
          month,
          year,
          monthName: date.toLocaleString('ru-RU', { month: 'long' }),
          stats: monthlyStats || []
        });
      }

      return trends;
    } catch (error) {
      logger.error('Expense trends error:', error);
      return [];
    }
  }

  async generateSummaryReport(userId, period = 'this_month') {
    try {
      const analytics = await this.getExpenseAnalytics(userId, period);
      
      if (analytics.totalExpenses === 0) {
        return `üìä –û—Ç—á—ë—Ç –∑–∞ ${analytics.periodName.toLowerCase()}\n\n‚ùå –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      }

      let report = `üìä –û—Ç—á—ë—Ç –∑–∞ ${analytics.periodName.toLowerCase()}\n\n`;
      report += `üí∞ –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã: ${analytics.totalAmount}\n`;
      report += `üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${analytics.totalExpenses}\n`;
      report += `üìÖ –ü–µ—Ä–∏–æ–¥: ${analytics.period.startDate} - ${analytics.period.endDate}\n`;
      report += `üìä –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: ${analytics.averagePerDay}\n\n`;

      // Top categories
      if (analytics.categories.length > 0) {
        report += `üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n`;
        analytics.categories.slice(0, 5).forEach((cat, index) => {
          const emoji = this.getCategoryEmoji(cat.category);
          report += `${index + 1}. ${emoji} ${cat.category}: ${cat.formattedAmount} (${cat.percentage}%)\n`;
        });
        report += '\n';
      }

      // Multiple currencies info
      if (analytics.currencies.length > 1) {
        report += `üí± –ü–æ –≤–∞–ª—é—Ç–∞–º:\n`;
        analytics.currencies.forEach(curr => {
          report += `${curr.currency}: ${curr.formattedAmount}\n`;
        });
        report += '\n';
      }

      report += `üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤:\n`;
      report += `"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü"`;

      return report;
    } catch (error) {
      logger.error('Summary report error:', error);
      return '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞';
    }
  }

  getPeriodName(period) {
    const periodNames = {
      'today': '–°–µ–≥–æ–¥–Ω—è',
      'yesterday': '–í—á–µ—Ä–∞',
      'this_week': '–≠—Ç–∞ –Ω–µ–¥–µ–ª—è',
      'last_week': '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è',
      'this_month': '–≠—Ç–æ—Ç –º–µ—Å—è—Ü',
      'last_month': '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
      'last_3_months': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞',
      'this_year': '–≠—Ç–æ—Ç –≥–æ–¥',
      'last_year': '–ü—Ä–æ—à–ª—ã–π –≥–æ–¥'
    };
    
    return periodNames[period] || '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
  }

  getCategoryEmoji(category) {
    const emojiMap = {
      '–ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': 'üçï',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
      '–î–æ–º –∏ –±—ã—Ç': 'üè†',
      '–û–¥–µ–∂–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞': 'üëï',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üé¨',
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö',
      '–§–∏–Ω–∞–Ω—Å—ã': 'üí≥',
      '–ü—Ä–æ—á–µ–µ': '‚ùì'
    };
    
    return emojiMap[category] || 'üìä';
  }
}

module.exports = new AnalyticsService();
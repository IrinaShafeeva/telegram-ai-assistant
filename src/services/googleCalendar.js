// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar
const { getCalendarAPI } = require('../config/google');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
async function createCalendarEvent(calendarId, summary, description, startTime, endTime, attendees = [], timezone = 'Europe/Moscow') {
    try {
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Calendar API...`);
        const calendar = await getCalendarAPI();
        if (!calendar) {
            console.error('‚ùå Google Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            throw new Error('Google Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        console.log(`‚úÖ Google Calendar API –ø–æ–¥–∫–ª—é—á–µ–Ω`);
        
        console.log(`üìÖ –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ${calendarId}:`);
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${summary}`);
        console.log(`   –í—Ä–µ–º—è: ${startTime}`);
        console.log(`   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
        console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${attendees.join(', ')}`);
        

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const start = new Date(startTime);
        const end = endTime ? new Date(endTime) : new Date(start.getTime() + 60 * 60 * 1000); // +1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        const event = {
            summary: summary,
            description: description,
            start: {
                dateTime: start.toISOString(),
                timeZone: timezone,
            },
            end: {
                dateTime: end.toISOString(),
                timeZone: timezone,
            },
            attendees: attendees.map(email => ({ email })),
            reminders: {
                useDefault: false,
                overrides: [
                    { method: 'email', minutes: 24 * 60 }, // –ó–∞ –¥–µ–Ω—å
                    { method: 'popup', minutes: 30 },     // –ó–∞ 30 –º–∏–Ω—É—Ç
                ],
            },
        };

        const response = await calendar.events.insert({
            calendarId: calendarId,
            resource: event,
            sendUpdates: 'all', // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        });

        console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ${calendarId}:`, response.data.htmlLink);
        return {
            success: true,
            eventId: response.data.id,
            eventLink: response.data.htmlLink,
            message: `üìÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ${summary}`
        };

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ${calendarId}:`, error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∫–æ–º–∞–Ω–¥—ã
async function createTeamReminder(contactName, what, when, tenantId) {
    try {
        console.log(`üìÖ –°–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ${contactName}: ${what} –≤ ${when}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –≤–∫–ª—é—á–∞—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        const contactInfo = await getContactInfo(tenantId, contactName);
        
        if (!contactInfo || !contactInfo.calendarId) {
            console.log(`‚ö†Ô∏è Google Calendar ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${contactName}`);
            return {
                success: false,
                message: `‚ö†Ô∏è Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${contactName}`
            };
        }

        const { calendarId, timezone } = contactInfo;

        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const reminderTime = parseReminderTime(when);
        if (!reminderTime) {
            return {
                success: false,
                message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: ${when}`
            };
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        console.log(`üìÖ –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ${calendarId}`);
        console.log(`‚è∞ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: ${reminderTime}`);
        console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
        
        const result = await createCalendarEvent(
            calendarId,
            `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${what}`,
            `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ${contactName}\n\n${what}\n\n–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º`,
            reminderTime,
            null, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            [], // –£—á–∞—Å—Ç–Ω–∏–∫–∏
            timezone
        );

        console.log(`üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:`, result);
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Google Calendar email –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getContactCalendarId(tenantId, contactName) {
    try {
        const { supabase } = require('../config/database');
        
        console.log(`üîç –ò—â–µ–º Google Calendar email –¥–ª—è ${contactName} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const nameVariations = generateNameVariations(contactName);
        console.log(`üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:`, nameVariations);

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–º–µ–Ω–∏
        for (const variation of nameVariations) {
            console.log(`üîç –ò—â–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: "${variation}"`);
            
            const { data, error } = await supabase
                .from('team_members')
                .select('id, display_name, aliases, meta')
                .eq('tenant_id', tenantId)
                .eq('is_active', true)
                .ilike('display_name', variation);

            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É "${variation}":`, error);
                continue;
            }

            if (data && data.length > 0) {
                const member = data[0];
                const gcalEmail = member.meta?.gcal_email;
                
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ "${variation}" ‚Üí ${member.display_name}`);
                console.log(`üìß Meta –¥–∞–Ω–Ω—ã–µ:`, member.meta);
                
                if (gcalEmail) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Google Calendar email –¥–ª—è ${contactName}: ${gcalEmail}`);
                    return gcalEmail;
                } else {
                    console.log(`‚ö†Ô∏è Google Calendar email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${member.display_name}`);
                    return null;
                }
            }
        }

        console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ${contactName} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É`);
        return null;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Calendar email:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å + —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)
async function getContactInfo(tenantId, contactName) {
    try {
        const { supabase } = require('../config/database');
        
        console.log(`üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ ${contactName} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const nameVariations = generateNameVariations(contactName);
        console.log(`üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:`, nameVariations);

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–º–µ–Ω–∏
        for (const variation of nameVariations) {
            console.log(`üîç –ò—â–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: "${variation}"`);
            
            const { data, error } = await supabase
                .from('team_members')
                .select('id, display_name, aliases, meta')
                .eq('tenant_id', tenantId)
                .eq('is_active', true)
                .ilike('display_name', variation);

            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É "${variation}":`, error);
                continue;
            }

            if (data && data.length > 0) {
                const member = data[0];
                const gcalEmail = member.meta?.gcal_email;
                const timezone = member.meta?.timezone || 'Europe/Moscow';
                
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ "${variation}" ‚Üí ${member.display_name}`);
                console.log(`üìß Meta –¥–∞–Ω–Ω—ã–µ:`, member.meta);
                
                if (gcalEmail) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Google Calendar email –¥–ª—è ${contactName}: ${gcalEmail}`);
                    console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
                    return {
                        calendarId: gcalEmail,
                        timezone: timezone,
                        memberInfo: member
                    };
                } else {
                    console.log(`‚ö†Ô∏è Google Calendar email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${member.display_name}`);
                    return null;
                }
            }
        }

        console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ${contactName} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É`);
        return null;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
function generateNameVariations(name) {
    const variations = [name];
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
    if (name.endsWith('–∏')) {
        // "–ú–∞—Ä–∏–∏" ‚Üí "–ú–∞—Ä–∏—è"
        variations.push(name.slice(0, -1) + '—è');
        // "–ú–∞—Ä–∏–∏" ‚Üí "–ú–∞—Ä–∏"
        variations.push(name.slice(0, -1));
    }
    
    if (name.endsWith('–µ')) {
        // "–°–∞—à–µ" ‚Üí "–°–∞—à–∞"
        variations.push(name.slice(0, -1) + '–∞');
    }
    
    if (name.endsWith('—É')) {
        // "–°–∞—à—É" ‚Üí "–°–∞—à–∞"  
        variations.push(name.slice(0, -1) + '–∞');
    }
    
    if (name.endsWith('—é')) {
        // "–ú–∞—à—é" ‚Üí "–ú–∞—à–∞"
        variations.push(name.slice(0, -1) + '–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (!name.endsWith('–∞') && !name.endsWith('—è')) {
        variations.push(name + '–∞');
        variations.push(name + '—è');
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(variations)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function parseReminderTime(timeString) {
    try {
        const lower = timeString.toLowerCase();
        const now = new Date();

        if (lower.includes('–∑–∞–≤—Ç—Ä–∞')) {
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            const timeMatch = timeString.match(/(\d{1,2}):(\d{2})/);
            if (timeMatch) {
                tomorrow.setHours(parseInt(timeMatch[1]), parseInt(timeMatch[2]), 0, 0);
            } else {
                tomorrow.setHours(9, 0, 0, 0); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 9:00
            }
            return tomorrow;
        }

        if (lower.includes('—Å–µ–≥–æ–¥–Ω—è')) {
            const today = new Date(now);
            const timeMatch = timeString.match(/(\d{1,2}):(\d{2})/);
            if (timeMatch) {
                today.setHours(parseInt(timeMatch[1]), parseInt(timeMatch[2]), 0, 0);
                // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                if (today <= now) {
                    today.setDate(today.getDate() + 1);
                }
            } else {
                today.setHours(now.getHours() + 1, 0, 0, 0); // –ß–µ—Ä–µ–∑ —á–∞—Å
            }
            return today;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –º–µ—Å—è—Ü–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15 –∞–≤–≥—É—Å—Ç–∞")
        const monthNames = {
            '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3, '–º–∞—è': 4, '–∏—é–Ω—è': 5,
            '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7, '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
        };
        
        const textDateMatch = timeString.match(/(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)/i);
        if (textDateMatch) {
            const day = parseInt(textDateMatch[1]);
            const monthName = textDateMatch[2].toLowerCase();
            const month = monthNames[monthName];
            const year = now.getFullYear();
            
            console.log(`üìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: ${day} ${monthName} (–º–µ—Å—è—Ü ${month})`);
            
            const date = new Date(year, month, day);
            const timeMatch = timeString.match(/(\d{1,2}):(\d{2})/);
            if (timeMatch) {
                date.setHours(parseInt(timeMatch[1]), parseInt(timeMatch[2]), 0, 0);
                console.log(`‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è: ${timeMatch[1]}:${timeMatch[2]}`);
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, –Ω–æ –µ—Å—Ç—å —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —á–∞—Å
                const hourMatch = timeString.match(/–≤\s+(\d{1,2})/);
                if (hourMatch) {
                    date.setHours(parseInt(hourMatch[1]), 0, 0, 0);
                    console.log(`‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞: ${hourMatch[1]}:00`);
                } else {
                    date.setHours(12, 0, 0, 0); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12:00
                    console.log(`‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12:00`);
                }
            }
            
            console.log(`üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: ${date.toISOString()}`);
            return date;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
        const dateMatch = timeString.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})?/);
        if (dateMatch) {
            const day = parseInt(dateMatch[1]);
            const month = parseInt(dateMatch[2]) - 1;
            const year = dateMatch[3] ? parseInt(dateMatch[3]) : now.getFullYear();
            
            const date = new Date(year, month, day);
            const timeMatch = timeString.match(/(\d{1,2}):(\d{2})/);
            if (timeMatch) {
                date.setHours(parseInt(timeMatch[1]), parseInt(timeMatch[2]), 0, 0);
            } else {
                date.setHours(12, 0, 0, 0);
            }
            return date;
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —á–∞—Å
        const defaultTime = new Date(now);
        defaultTime.setHours(now.getHours() + 1, 0, 0, 0);
        return defaultTime;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
async function createPersonalCalendarEvent(calendarId, what, when, timezone = 'Europe/Moscow') {
    try {
        console.log(`üìÖ –°–æ–∑–¥–∞—é –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ${calendarId}: ${what} –≤ ${when} (${timezone})`);
        
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        const reminderTime = parseReminderTime(when);
        console.log(`‚è∞ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:`, reminderTime);
        
        if (!reminderTime) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è'
            };
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const result = await createCalendarEvent(
            calendarId,
            `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${what}`,
            `–õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n${what}\n\n–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º`,
            reminderTime,
            null, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
            [], // –£—á–∞—Å—Ç–Ω–∏–∫–∏
            timezone
        );

        console.log(`üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:`, result);
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

module.exports = {
    createCalendarEvent,
    createTeamReminder,
    getContactCalendarId,
    getContactInfo,
    parseReminderTime,
    createPersonalCalendarEvent
};

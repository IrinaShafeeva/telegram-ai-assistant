// –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const { writeTask, writeBookmark } = require('./googleSheets');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
async function processTask(text, context, chatId) {
    try {
        console.log('üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞—á—É:', text);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const taskInfo = extractTaskInfo(text);
        console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:', taskInfo);

        if (taskInfo.contact) {
            // –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            return await processAssignedTask(taskInfo, context, chatId);
        } else {
            // –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
            return await processPersonalTask(taskInfo, context, chatId);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
function extractTaskInfo(text) {
    const lowerText = text.toLowerCase();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contactPatterns = [
        /(?:–∑–∞–¥–∞—á–∞|–∑–∞–¥–∞—á—É|—Å–¥–µ–ª–∞–π|–ø–æ–ø—Ä–æ—Å–∏|–Ω–∞–ø–æ–º–Ω–∏)\s+(?:–¥–ª—è\s+)?([–∞-—è—ë]+)/i,
        /([–∞-—è—ë]+)\s+(?:—Å–¥–µ–ª–∞–π|—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏|–ø–æ–∑–≤–æ–Ω–∏—Ç—å)/i,
        /(?:–ø–æ—Ä—É—á–µ–Ω–∏–µ|–∑–∞–¥–∞–Ω–∏–µ)\s+(?:–¥–ª—è\s+)?([–∞-—è—ë]+)/i
    ];

    let contact = null;
    for (const pattern of contactPatterns) {
        const match = text.match(pattern);
        if (match) {
            contact = match[1];
            break;
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    let taskType = '–æ–±—â–∞—è';
    if (lowerText.includes('—Å–¥–µ–ª–∞–π') || lowerText.includes('—Å–¥–µ–ª–∞—Ç—å')) taskType = '—Å–æ–∑–¥–∞–Ω–∏–µ';
    else if (lowerText.includes('–∫—É–ø–∏') || lowerText.includes('–∫—É–ø–∏—Ç—å')) taskType = '–ø–æ–∫—É–ø–∫–∞';
    else if (lowerText.includes('–ø–æ–∑–≤–æ–Ω–∏') || lowerText.includes('–ø–æ–∑–≤–æ–Ω–∏—Ç—å')) taskType = '–∑–≤–æ–Ω–æ–∫';
    else if (lowerText.includes('–Ω–∞–ø–∏—à–∏') || lowerText.includes('–Ω–∞–ø–∏—Å–∞—Ç—å')) taskType = '—Å–æ–æ–±—â–µ–Ω–∏–µ';
    else if (lowerText.includes('–≤—Å—Ç—Ä–µ—á–∞') || lowerText.includes('–≤—Å—Ç—Ä–µ—á—É')) taskType = '–≤—Å—Ç—Ä–µ—á–∞';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    let description = text;
    if (contact) {
        description = text.replace(new RegExp(`(?:–∑–∞–¥–∞—á–∞|–∑–∞–¥–∞—á—É|—Å–¥–µ–ª–∞–π|–ø–æ–ø—Ä–æ—Å–∏|–Ω–∞–ø–æ–º–Ω–∏)\\s+(?:–¥–ª—è\\s+)?${contact}`, 'gi'), '').trim();
        description = description.replace(new RegExp(`${contact}\\s+(?:—Å–¥–µ–ª–∞–π|—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏|–ø–æ–∑–≤–æ–Ω–∏—Ç—å)`, 'gi'), '').trim();
    }

    return {
        contact,
        taskType,
        description: description || text,
        originalText: text
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
async function processAssignedTask(taskInfo, context, chatId) {
    try {
        const { contact, taskType, description } = taskInfo;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        const title = `–ó–∞–¥–∞—á–∞ –¥–ª—è ${contact}: ${description}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const fullDescription = `
–ö–æ–Ω—Ç–∞–∫—Ç: ${contact}
–¢–∏–ø: ${taskType}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
–ù–∞–∑–Ω–∞—á–∏–ª: ${chatId}
–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
        `.trim();

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        const success = await writeTask(
            await getSpreadsheetId(context.tenant_id),
            title,
            fullDescription,
            chatId.toString()
        );

        if (success) {
            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è ${contact} –∑–∞–ø–∏—Å–∞–Ω–∞`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—É
            await notifyContact(contact, description, chatId, context.tenant_id);
            
            return {
                success: true,
                message: `‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ ${contact}:\n\nüìã ${description}\n\n‚è∞ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets`
            };
        }

        return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏' };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:', error);
        return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏' };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–π –∑–∞–¥–∞—á–∏
async function processPersonalTask(taskInfo, context, chatId) {
    try {
        const { description } = taskInfo;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        const success = await writeTask(
            await getSpreadsheetId(context.tenant_id),
            description,
            description,
            chatId.toString()
        );

        if (success) {
            console.log('‚úÖ –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞');
            return {
                success: true,
                message: `‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\n\nüìã ${description}\n\n‚è∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets`
            };
        }

        return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏' };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–π –∑–∞–¥–∞—á–∏:', error);
        return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏' };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheets ID (–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å)
async function getSpreadsheetId(tenantId) {
    // TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    return '1UJ4nq5XeEC7TZw5toufpVE_ryAgOlZQ-4ssKOaoy9Zo';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
async function notifyContact(contactName, description, authorChatId, tenantId) {
    try {
        const { supabase } = require('../config/database');
        
        // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞–¥–µ–∂–∏)
        const { data: members } = await supabase
            .from('team_members')
            .select('*')
            .eq('tenant_id', tenantId)
            .eq('is_active', true);
            
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–ª–∏ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
        const member = members.find(m => {
            const displayName = m.display_name.toLowerCase();
            const searchName = contactName.toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (displayName === searchName) return true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–º–µ–Ω–∏ (–ú–∞—Ä–∏—è -> –ú–∞—à–∏, –°–∞—à–∞ -> –°–∞—à–∏)
            const nameVariations = {
                '–º–∞—Ä–∏—è': ['–º–∞—à–∏', '–º–∞—Ä–∏–∏', '–º–∞—Ä–∏—é', '–º–∞—Ä–∏—è–º'],
                '—Å–∞—à–∞': ['—Å–∞—à–∏', '—Å–∞—à–µ', '—Å–∞—à—É', '—Å–∞—à–∞–º'],
                '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä': ['—Å–∞—à–∞', '—Å–∞—à–∏', '—Å–∞—à–µ', '—Å–∞—à—É'],
                '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞': ['—Å–∞—à–∞', '—Å–∞—à–∏', '—Å–∞—à–µ', '—Å–∞—à—É']
            };
            
            // –ò—â–µ–º –≤ –≤–∞—Ä–∏–∞—Ü–∏—è—Ö
            for (const [baseName, variations] of Object.entries(nameVariations)) {
                if (displayName.includes(baseName) && variations.includes(searchName)) {
                    return true;
                }
                if (searchName.includes(baseName) && variations.includes(displayName)) {
                    return true;
                }
            }
            
            return false;
        });
            
        if (!member) {
            console.log(`‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ "${contactName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ`);
            return;
        }
        
        if (!member.tg_chat_id) {
            console.log(`‚ö†Ô∏è –£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ "${contactName}" –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram`);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        const TelegramBot = require('node-telegram-bot-api');
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
        
        const message = `üìã **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∞—Å!**
        
**–û–ø–∏—Å–∞–Ω–∏–µ:** ${description}

üë§ **–û—Ç:** –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleDateString('ru-RU')}

–ó–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á.`;

        await bot.sendMessage(member.tg_chat_id, message, {
            parse_mode: 'Markdown'
        });
        
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${contactName} (${member.tg_chat_id})`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

module.exports = {
    processTask,
    extractTaskInfo,
    processAssignedTask,
    processPersonalTask
};

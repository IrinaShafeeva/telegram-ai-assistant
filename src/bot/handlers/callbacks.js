const { userService, projectService, expenseService } = require('../../services/supabase');
const googleSheetsService = require('../../services/googleSheets');
const patternsService = require('../../services/patterns');
const { tempExpenses } = require('./messages');
const { 
  getCategorySelectionKeyboard, 
  getAmountSelectionKeyboard,
  getExpenseConfirmationKeyboard,
  getUpgradeKeyboard
} = require('../keyboards/inline');
const { getBot } = require('../../utils/bot');
const logger = require('../../utils/logger');

async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.from;
  const bot = getBot();

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    // Route callback to appropriate handler
    if (data.startsWith('save_expense:')) {
      await handleSaveExpense(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:')) {
      await handleEditCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_amount:')) {
      await handleEditAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:')) {
      await handleEditDescription(chatId, messageId, data, user);
    } else if (data.startsWith('set_category:')) {
      await handleSetCategory(chatId, messageId, data, user);
    } else if (data.startsWith('set_amount:')) {
      await handleSetAmount(chatId, messageId, data, user);
    } else if (data.startsWith('cancel_expense:')) {
      await handleCancelExpense(chatId, messageId, data);
    } else if (data.startsWith('back_to_confirmation:')) {
      await handleBackToConfirmation(chatId, messageId, data);
    } else if (data.startsWith('create_project')) {
      await handleCreateProject(chatId, user);
    } else if (data.startsWith('upgrade:')) {
      await handleUpgradeAction(chatId, messageId, data);
    } else {
      logger.warn('Unknown callback data:', data);
    }
  } catch (error) {
    logger.error('Callback handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleSaveExpense(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Save expense to database
    const savedExpense = await expenseService.create(expenseData);

    // Add to Google Sheets
    await googleSheetsService.addExpenseToSheet(savedExpense, expenseData.project_id);

    // Update user patterns for smart defaults
    await patternsService.updateUserPatterns(
      user.id, 
      expenseData.description, 
      expenseData.category,
      expenseData.amount,
      expenseData.currency
    );

    // Get project name for confirmation
    const project = await projectService.findById(expenseData.project_id);

    const successText = `‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

üí∞ ${expenseData.description}: -${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}
üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets

üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats`;

    await bot.editMessageText(successText, {
      chat_id: chatId,
      message_id: messageId
    });

    // Remove temp data
    tempExpenses.delete(tempId);

  } catch (error) {
    logger.error('Save expense error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategory(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // TODO: Get user's custom categories if PRO
  const customCategories = [];

  await bot.editMessageText('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getCategorySelectionKeyboard(tempId, customCategories)
  });
}

async function handleEditAmount(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getAmountSelectionKeyboard(tempId)
  });
}

async function handleEditDescription(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  
  await bot.editMessageText('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId
  });

  // TODO: Set up state to wait for description input
  // This would require implementing a state machine or using session storage
}

async function handleSetCategory(chatId, messageId, data, user) {
  const [, tempId, category] = data.split(':');
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update category
  expenseData.category = category;
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleSetAmount(chatId, messageId, data, user) {
  const [, tempId, amount] = data.split(':');
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update amount
  expenseData.amount = parseFloat(amount);
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleBackToConfirmation(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Get project name
  const project = await projectService.findById(expenseData.project_id);

  const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

  await bot.editMessageText(confirmationText, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getExpenseConfirmationKeyboard(tempId)
  });
}

async function handleCancelExpense(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  tempExpenses.delete(tempId);

  await bot.editMessageText('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleCreateProject(chatId, user) {
  // Get user data
  const userData = await userService.findById(user.id);
  const userProjects = await projectService.findByUserId(user.id);

  // Check project limits for FREE users
  if (!userData.is_premium && userProjects.length >= 1) {
    await bot.sendMessage(chatId, 
      '‚õî –õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\nüÜì FREE –ø–ª–∞–Ω: 1 –ø—Ä–æ–µ–∫—Ç\nüíé PRO –ø–ª–∞–Ω: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
      { reply_markup: getUpgradeKeyboard() }
    );
    return;
  }

  await bot.sendMessage(chatId, 'üöß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
}

async function handleUpgradeAction(chatId, messageId, data) {
  const action = data.split(':')[1];

  switch (action) {
    case 'pro':
      await bot.editMessageText(
        'üíé –û–ø–ª–∞—Ç–∞ PRO –ø–ª–∞–Ω–∞\n\nüöß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n\n–ü–æ–∫–∞ —á—Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot',
        { chat_id: chatId, message_id: messageId }
      );
      break;
      
    case 'compare':
      const compareText = `üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤:

üÜì FREE:
‚úÖ 1 –ø—Ä–æ–µ–∫—Ç
‚úÖ 50 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü
‚úÖ 5 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–¥–µ–Ω—å
‚úÖ 9 –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚ùå –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üíé PRO ($7/–º–µ—Å—è—Ü):
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚úÖ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚úÖ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;

      await bot.editMessageText(compareText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
      
    case 'faq':
      const faqText = `‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã PRO:

Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
A: –ù–∞–ø–∏—à–∏—Ç–µ @support_bot

Q: –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
A: –î–∞, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ

Q: –°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ?
A: –î–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ FREE –ø–ª–∞–Ω–∞

Q: –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§?
A: –î–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @support_bot`;

      await bot.editMessageText(faqText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
  }
}

module.exports = {
  handleCallback
};
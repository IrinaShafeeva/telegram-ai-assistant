const { userService, projectService, projectMemberService, expenseService, customCategoryService, incomeService, transactionService, supabase } = require('../../services/supabase');
const googleSheetsService = require('../../services/googleSheets');
// Import temp storage from messages handler
const messagesHandler = require('./messages');
// Access temp storage
const { tempExpenses, tempIncomes } = messagesHandler;
const {
  getCategorySelectionKeyboard,
  getIncomeCategorySelectionKeyboard,
  getIncomeProjectSelectionKeyboard,
  getIncomeConfirmationKeyboard,
  getAmountSelectionKeyboard,
  getExpenseConfirmationKeyboard,
  getProjectSelectionKeyboardForExpense,
  getProjectSelectionForTransactionKeyboard,
  getUpgradeKeyboard,
  getExportFormatKeyboard,
  getExportPeriodKeyboard,
  getSettingsKeyboard,
  getCurrencySelectionKeyboard,
  getTransactionEditKeyboard,
  getRecentTransactionsKeyboard
} = require('../keyboards/inline');
const { getBot } = require('../../utils/bot');
const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
const logger = require('../../utils/logger');

async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.user; // Should be set by withUserCallback middleware
  const bot = getBot();

  // Debug logging
  logger.info(`üîò Callback received: ${data} from user ${user?.id}`);
  logger.info(`üîò DEBUG: Starting callback processing for: ${data}`);

  // Debug user data
  if (!user || !user.id) {
    logger.error('User data missing in callback:', { 
      hasUser: !!callbackQuery.user, 
      hasFrom: !!callbackQuery.from,
      fromId: callbackQuery.from?.id 
    });
    await bot.answerCallbackQuery(callbackQuery.id, { 
      text: '‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
      show_alert: true 
    });
    return;
  }

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    // Route callback to appropriate handler
    if (data.startsWith('set_currency_')) {
      await handleSetCurrency(chatId, messageId, data, callbackQuery.user);
    } else if (data.startsWith('change_currency_')) {
      await handleChangeCurrency(chatId, messageId, data, callbackQuery.user);
    } else if (data === 'back_to_settings') {
      await handleBackToSettings(chatId, messageId, callbackQuery.user);
    } else if (data.startsWith('save_expense:')) {
      await handleSaveExpense(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:')) {
      await handleEditCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_amount:')) {
      await handleEditAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:')) {
      await handleEditDescription(chatId, messageId, data, user);
    } else if (data.startsWith('edit_currency:')) {
      await handleEditCurrency(chatId, messageId, data, user);
    } else if (data.startsWith('edit_income_currency:')) {
      await handleEditIncomeCurrency(chatId, messageId, data, user);
    } else if (data.startsWith('set_currency:')) {
      await handleSetTransactionCurrency(chatId, messageId, data, user);
    } else if (data.startsWith('edit_transaction:')) {
      await handleEditTransaction(chatId, messageId, data, user);
    } else if (data === 'cancel_edit') {
      await handleCancelEdit(chatId, messageId, user);
    } else if (data.startsWith('edit_amount:') && data.split(':').length === 3) {
      await handleEditTransactionAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:') && data.split(':').length === 3) {
      await handleEditTransactionDescription(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:') && data.split(':').length === 3) {
      await handleEditTransactionCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project:') && data.split(':').length === 3) {
      await handleEditTransactionProject(chatId, messageId, data, user);
    } else if (data.startsWith('delete_transaction:')) {
      await handleDeleteTransaction(chatId, messageId, data, user);
    } else if (data.startsWith('confirm_delete:')) {
      await handleConfirmDelete(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project:')) {
      logger.info(`üîß FIRST handleEditProject called for transaction editing: ${data}`);
      await handleEditProject(chatId, messageId, data, user);
    } else if (data.startsWith('set_project:')) {
      await handleSetProject(chatId, messageId, data, user);
    } else if (data.startsWith('set_category:')) {
      await handleSetCategory(chatId, messageId, data, user);
    } else if (data.startsWith('set_income_category:')) {
      await handleSetIncomeCategory(chatId, messageId, data, user);
    } else if (data.startsWith('set_income_project:')) {
      await handleSetIncomeProject(chatId, messageId, data, user);
    } else if (data.startsWith('back_to_income_confirmation:')) {
      await handleBackToIncomeConfirmation(chatId, messageId, data, user);
    } else if (data.startsWith('save_income:')) {
      await handleSaveIncome(chatId, messageId, data, user);
    } else if (data.startsWith('edit_income_category:')) {
      await handleEditIncomeCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_income_amount:')) {
      await handleEditIncomeAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_income_description:')) {
      await handleEditIncomeDescription(chatId, messageId, data, user);
    } else if (data.startsWith('edit_income_project:')) {
      await handleEditIncomeProject(chatId, messageId, data, user);
    } else if (data.startsWith('cancel_income:')) {
      await handleCancelIncome(chatId, messageId, data);
    } else if (data.startsWith('cancel_expense:')) {
      await handleCancelExpense(chatId, messageId, data);
    } else if (data.startsWith('back_to_confirmation:')) {
      await handleBackToConfirmation(chatId, messageId, data, user);
    } else if (data === 'create_project_existing_sheet') {
      logger.info(`üîò DEBUG: About to enter create_project_existing_sheet block`);
      logger.info(`üîò MATCH: create_project_existing_sheet - about to execute`);
      logger.info(`üîò User ${user.id} clicked: create_project_existing_sheet`);
      logger.info(`üîò About to call handleCreateProjectWithExistingSheet with chatId=${chatId}, messageId=${messageId}`);
      try {
        await handleCreateProjectWithExistingSheet(chatId, messageId, user);
        logger.info(`üîò handleCreateProjectWithExistingSheet completed successfully`);
      } catch (error) {
        logger.error(`üîò Error in handleCreateProjectWithExistingSheet:`, error);
        logger.error(`üîò Error stack:`, error.stack);
      }
    } else if (data === 'create_project_new_sheet') {
      logger.info(`üîò MATCH: create_project_new_sheet - about to execute`);
      logger.info(`üîò User ${user.id} clicked: create_project_new_sheet`);
      logger.info(`üîò About to call handleCreateProjectWithNewSheet`);
      try {
        await handleCreateProjectWithNewSheet(chatId, messageId, user);
        logger.info(`üîò handleCreateProjectWithNewSheet completed`);
      } catch (error) {
        logger.error(`üîò Error in handleCreateProjectWithNewSheet:`, error);
      }
    } else if (data === 'cancel_project_creation') {
      logger.info(`üîò User ${user.id} clicked: cancel_project_creation`);
      await handleCancelProjectCreation(chatId, messageId, user);
    } else if (data.startsWith('custom_category:')) {
      await handleCustomCategory(chatId, messageId, data, user);
    } else if (data.startsWith('custom_amount:')) {
      await handleCustomAmount(chatId, messageId, data, user);
    } else if (data === 'add_custom_category') {
      await handleAddCustomCategory(chatId, messageId, user);
    } else if (data === 'manage_categories') {
      await handleManageCategories(chatId, messageId, user);
    } else if (data.startsWith('edit_custom_category:')) {
      await handleEditCustomCategory(chatId, messageId, data, user);
    } else if (data.startsWith('delete_category:')) {
      await handleDeleteCategory(chatId, messageId, data, user);
    } else if (data.startsWith('confirm_delete_category:')) {
      await handleConfirmDeleteCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_cat_name:')) {
      await handleEditCategoryName(chatId, messageId, data, user);
    } else if (data.startsWith('edit_cat_emoji:')) {
      await handleEditCategoryEmoji(chatId, messageId, data, user);
    } else if (data.startsWith('edit_cat_keywords:')) {
      await handleEditCategoryKeywords(chatId, messageId, data, user);
    } else if (data.startsWith('remove_emoji:')) {
      await handleRemoveEmoji(chatId, messageId, data, user);
    } else if (data === 'skip_emoji') {
      await handleSkipEmoji(chatId, messageId, user);
    } else if (data === 'categories') {
      await handleCategoriesCallback(chatId, messageId, user);
    } else if (data.startsWith('proj_sel:')) {
      await handleProjectSelectionForTransaction(callbackQuery, data);
    } else if (data.startsWith('cancel_trans:')) {
      await handleCancelTransaction(chatId, messageId, data);
    } else if (data.startsWith('export_format:')) {
      await handleExportFormat(chatId, messageId, data, user);
    } else if (data.startsWith('export_period:')) {
      await handleExportPeriod(chatId, messageId, data, user);
    } else if (data === 'confirm_clear_data') {
      await handleConfirmClearData(chatId, messageId, user);
    } else if (data === 'cancel_clear_data') {
      await handleCancelClearData(chatId, messageId, user);
    } else if (data.startsWith('sync_project:')) {
      await handleSyncProject(chatId, messageId, data, user);
    } else if (data === 'cancel_sync') {
      await handleCancelSync(chatId, messageId);
    } else if (data.startsWith('connect_sheet_to_project:')) {
      await handleConnectSheetToProject(chatId, messageId, data, user);
    } else if (data === 'cancel_connect_sheet') {
      await handleCancelConnectSheet(chatId, messageId);
    } else if (data.startsWith('select_project_for_connect:')) {
      await handleSelectProjectForConnect(chatId, messageId, data, user);
    } else if (data === 'cancel_connect') {
      await handleCancelConnect(chatId, messageId);
    } else if (data === 'noop') {
      // Pagination placeholder - answer callback query to remove loading state
      await bot.answerCallbackQuery(callbackQuery.id, { text: '' });
      return;
    } else if (data.startsWith('create_project')) {
      await handleCreateProject(chatId, user);
    } else if (data.startsWith('upgrade:')) {
      await handleUpgradeAction(chatId, messageId, data);
    } else if (data.startsWith('settings:')) {
      await handleSettingsAction(chatId, messageId, data, user);
    } else if (data.startsWith('switch_project:')) {
      await handleSwitchProject(chatId, messageId, data, user);
    } else if (data.startsWith('delete_project:')) {
      await handleDeleteProject(chatId, messageId, data, user);
    } else if (data.startsWith('manage_project:')) {
      logger.info(`üîß SECOND handleManageProject called for project management: ${data}`);
      await handleManageProject(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project_name:')) {
      await handleEditProjectName(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project_keywords:')) {
      await handleEditProjectKeywords(chatId, messageId, data, user);
    } else if (data.startsWith('confirm_delete_project:')) {
      await handleConfirmDeleteProject(chatId, messageId, data, user);
    } else if (data === 'back_to_projects') {
      await handleBackToProjects(chatId, messageId, user);
    } else if (data.startsWith('manage_team:')) {
      await handleManageTeam(chatId, messageId, data, user);
    } else if (data === 'make_collaborative') {
      await handleMakeCollaborative(chatId, messageId, user);
    } else if (data === 'invite_member') {
      await handleInviteMember(chatId, messageId, user);
    } else if (data === 'manage_members') {
      await handleManageMembers(chatId, messageId, user);
    } else if (data.startsWith('make_collab:')) {
      await handleMakeProjectCollaborative(chatId, messageId, data, user);
    } else if (data.startsWith('invite_to:')) {
      await handleInviteToProject(chatId, messageId, data, user);
    } else if (data.startsWith('show_members:')) {
      await handleShowMembers(chatId, messageId, data, user);
    } else if (data.startsWith('kick_member:')) {
      await handleKickMember(chatId, messageId, data, user);
    } else if (data === 'back_to_team') {
      await handleBackToTeam(chatId, messageId, user);
    } else if (data.startsWith('edit_transaction:')) {
      await handleEditTransaction(chatId, messageId, data, user);
    } else if (data.startsWith('edit_amount:')) {
      await handleEditTransactionAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:')) {
      await handleEditTransactionDescription(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:')) {
      await handleEditTransactionCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project:')) {
      await handleEditTransactionProject(chatId, messageId, data, user);
    } else if (data.startsWith('delete_transaction:')) {
      await handleDeleteTransaction(chatId, messageId, data, user);
    } else if (data.startsWith('confirm_delete:')) {
      await handleConfirmDelete(chatId, messageId, data, user);
    } else if (data === 'cancel_edit') {
      await handleCancelEdit(chatId, messageId, user);
    } else if (data.startsWith('edit_from_analytics:')) {
      await handleEditFromAnalytics(chatId, messageId, data, user);
    } else {
      logger.warn('Unknown callback data:', data);
    }
    
    logger.info(`üîò Callback handling completed for: ${data}`);
  } catch (error) {
    logger.error('Callback handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleSaveExpense(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  logger.info(`üíæ handleSaveExpense called with data: ${data}, extracted tempId: ${tempId}`);
  logger.info(`üíæ Available tempExpenses keys: ${Array.from(tempExpenses.keys()).join(', ')}`);

  const expenseData = tempExpenses.get(tempId);
  logger.info(`üíæ Found expenseData: ${expenseData ? 'YES' : 'NO'}`);

  if (!expenseData) {
    logger.error(`üíæ No expenseData found for tempId: ${tempId}`);
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Check monthly records limit for FREE users
    const canCreate = await userService.checkMonthlyRecordsLimit(user.id);
    if (!canCreate) {
      await bot.editMessageText(
        `‚õî –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω (100 –∑–∞–ø–∏—Å–µ–π –≤ –º–µ—Å—è—Ü).\n\nüíé –í PRO –ø–ª–∞–Ω–µ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.`,
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: { inline_keyboard: [[
            { text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å –¥–æ PRO', callback_data: 'upgrade:info' }
          ]] }
        }
      );
      return;
    }

    // Create a copy without project_name (which is only for display, not database storage)
    const { project_name, ...dbExpenseData } = expenseData;

    // Save expense to database
    logger.info(`üíæ Saving expense to database: ${dbExpenseData.description} - ${dbExpenseData.amount} ${dbExpenseData.currency}`);
    const savedExpense = await expenseService.create(dbExpenseData);
    logger.info(`‚úÖ Expense saved with ID: ${savedExpense.id}`);

    // Get project name for confirmation
    const project = await projectService.findById(expenseData.project_id);

    // Try to add to Google Sheets only if project has google_sheet_id
    let sheetsSuccess = false;
    if (project.google_sheet_id) {
      logger.info(`üîÑ Starting Google Sheets sync for project: ${expenseData.project_id}`);
      try {
        await googleSheetsService.addExpenseToSheet(savedExpense, expenseData.project_id);
        sheetsSuccess = true;
        logger.info(`‚úÖ Google Sheets sync successful`);
      } catch (sheetsError) {
        logger.warn('Google Sheets sync failed but expense saved:', sheetsError.message);
        logger.error('Google Sheets sync error details:', sheetsError);
      }
    }

    const successText = `‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

üí∞ ${expenseData.description}: -${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}
${project.google_sheet_id ? (sheetsSuccess ? 'üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets' : 'üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets: –æ—à–∏–±–∫–∞ (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)') : ''}`;

    try {
      await bot.editMessageText(successText, {
        chat_id: chatId,
        message_id: messageId
      });
    } catch (telegramError) {
      // Ignore "message not modified" errors - data is already saved
      if (telegramError.code === 'ETELEGRAM' &&
          telegramError.response?.body?.description?.includes('message is not modified')) {
        logger.info('Message not modified (Telegram API) - expense already saved successfully');
      } else {
        logger.error('Telegram API error while updating message:', telegramError);
        // Try to send new message as fallback
        try {
          await bot.sendMessage(chatId, successText);
        } catch (fallbackError) {
          logger.error('Failed to send fallback message:', fallbackError);
        }
      }
    }

    // Remove temp data
    tempExpenses.delete(tempId);

  } catch (error) {
    logger.error('Save expense error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}


async function handleEditAmount(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getAmountSelectionKeyboard(tempId)
  });
}

async function handleEditDescription(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const bot = getBot();
  
  // Set state to wait for description input
  stateManager.setState(chatId, STATE_TYPES.WAITING_EXPENSE_DESCRIPTION, { 
    tempId,
    messageId 
  });
  
  await bot.editMessageText('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleEditCategory(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);
  const bot = getBot();

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get user's custom categories if PRO
    let customCategories = [];
    if (user.is_premium) {
      try {
        customCategories = await customCategoryService.findByUserId(user.id);
      } catch (error) {
        logger.error('Error loading custom categories:', error);
      }
    }

    await bot.editMessageText('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getCategorySelectionKeyboard(tempId, customCategories)
    });
  } catch (error) {
    logger.error('Error loading categories for expense:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditProject(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  logger.info(`üîß handleEditProject called with tempId: ${tempId}`);
  logger.info(`üíæ tempExpenses has keys: ${Array.from(tempExpenses.keys()).join(', ')}`);

  const expenseData = tempExpenses.get(tempId);
  logger.info(`üíæ Found expenseData: ${expenseData ? 'YES' : 'NO'}`);
  logger.info(`üë§ User is premium: ${user.is_premium}`);

  const bot = getBot();

  if (!user.is_premium) {
    logger.info(`üö´ User ${user.id} is not premium, showing premium message`);
    await bot.editMessageText('üíé –ü—Ä–æ–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_confirmation:${tempId}` }]] }
    });
    return;
  }

  if (!expenseData) {
    logger.info(`‚ùå No expenseData found for tempId: ${tempId}`);
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get user's projects
    logger.info(`User object:`, JSON.stringify(user, null, 2));
    logger.info(`Getting projects for user: ${user.id}`);
    const projects = await projectService.findByUserId(user.id);
    logger.info(`Found ${projects?.length || 0} projects for user ${user.id}`);
    
    if (!projects || projects.length === 0) {
      await bot.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    await bot.editMessageText('üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getProjectSelectionKeyboardForExpense(tempId, projects)
    });
  } catch (error) {
    logger.error('Error loading projects for expense:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSetProject(chatId, messageId, data, user) {
  const parts = data.split(':');
  const tempId = parts[1];
  const projectIndex = parseInt(parts[2]);
  const expenseData = tempExpenses.get(tempId);
  const bot = getBot();

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get all user's projects to find by index
    const projects = await projectService.findByUserId(user.id);
    const project = projects[projectIndex];
    
    if (!project) {
      throw new Error('Project not found');
    }

    // Update expense data
    expenseData.project_id = project.id;
    tempExpenses.set(tempId, expenseData);

    // Show updated confirmation
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}  
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!`;

    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getExpenseConfirmationKeyboard(tempId, user.is_premium)
    });
  } catch (error) {
    logger.error('Error setting project for expense:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSetCategory(chatId, messageId, data, user) {
  const parts = data.split(':');
  const tempId = parts[1];
  const categoryIndex = parseInt(parts[2]);
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    logger.info(`Setting category for expense ${tempId}, categoryIndex: ${categoryIndex}, user.is_premium: ${user.is_premium}`);
    
    // Get available categories (same logic as in keyboard)
    let customCategories = [];
    if (user.is_premium) {
      try {
        customCategories = await customCategoryService.findByUserId(user.id);
        logger.info(`Found ${customCategories.length} custom categories`);
      } catch (customError) {
        logger.error('Error getting custom categories:', customError);
        customCategories = [];
      }
    }
    
    const { DEFAULT_CATEGORIES } = require('../../config/constants');
    const categories = [...DEFAULT_CATEGORIES, ...customCategories.map(c => `${c.emoji} ${c.name}`)];
    logger.info(`Total categories: ${categories.length}, categoryIndex: ${categoryIndex}`);
    logger.info(`Available categories: ${JSON.stringify(categories)}`);
    
    const selectedCategory = categories[categoryIndex];
    
    if (!selectedCategory) {
      throw new Error('Invalid category index');
    }

    // Extract category name without emoji
    const categoryName = selectedCategory.split(' ').slice(1).join(' ');
    expenseData.category = categoryName;
    tempExpenses.set(tempId, expenseData);

    await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`, user);
  } catch (error) {
    logger.error('Error setting category:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}


async function handleBackToConfirmation(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Get project name
  const project = await projectService.findById(expenseData.project_id);

  const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

  await bot.editMessageText(confirmationText, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getExpenseConfirmationKeyboard(tempId, user.is_premium)
  });
}

async function handleCancelExpense(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  tempExpenses.delete(tempId);

  // Clear any active states
  stateManager.clearState(chatId);

  await bot.editMessageText('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleCreateProject(chatId, user) {
  const bot = getBot();
  
  try {
    // Get user data
    const userData = await userService.findById(user.id);
    const userProjects = await projectService.findByUserId(user.id);

    // For FREE users, only allow 1 owned project
    const ownedProjects = userProjects.filter(p => p.user_role === 'owner');
    if (!userData.is_premium && ownedProjects.length >= 1) {
      await bot.sendMessage(chatId,
        `‚õî –õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\nüÜì FREE –ø–ª–∞–Ω: 1 –ø—Ä–æ–µ–∫—Ç (—É –≤–∞—Å —É–∂–µ ${ownedProjects.length})\nüíé PRO –ø–ª–∞–Ω: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã`,
        { reply_markup: getUpgradeKeyboard() }
      );
      return;
    }

    // For first project, redirect to currency selection
    if (userProjects.length === 0) {
      const { getCurrencySelectionKeyboard } = require('../keyboards/inline');

      await bot.sendMessage(chatId,
        `üí± –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`,
        { reply_markup: getCurrencySelectionKeyboard('initial', 'onboarding') }
      );
      return;
    } else {
      // For additional projects (PRO only), check if user has existing Google Sheets
      if (userData.is_premium) {
        const projectsWithSheets = userProjects.filter(p => p.google_sheet_id);
        
        if (projectsWithSheets.length > 0) {
          // User has existing Google Sheets - offer choice
          await bot.sendMessage(chatId, 
            'üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n' +
            'üìä –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ Google —Ç–∞–±–ª–∏—Ü—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n\n' +
            'üí° –ù–æ–≤—ã–π –ª–∏—Å—Ç - —Å–æ–∑–¥–∞—Å—Ç –ª–∏—Å—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ\n' +
            'üìÑ –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ - —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üìÑ –ù–æ–≤—ã–π –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ', callback_data: 'create_project_existing_sheet' },
                    { text: 'üìä –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', callback_data: 'create_project_new_sheet' }
                  ],
                  [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_project_creation' }
                  ]
                ]
              }
            }
          );
        } else {
          // No existing sheets - just ask for name
          stateManager.clearState(chatId);
          stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_NAME_SIMPLE, {});
          
          await bot.sendMessage(chatId, 
            'üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\nüìù –ü—Ä–∏–º–µ—Ä: "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏" –∏–ª–∏ "–†–∞–±–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"'
          );
        }
      } else {
        await bot.sendMessage(chatId, 
          'üíé –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!',
          { reply_markup: getUpgradeKeyboard() }
        );
      }
    }
  } catch (error) {
    logger.error('Create project error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleUpgradeAction(chatId, messageId, data) {
  const action = data.split(':')[1];

  switch (action) {
    case 'boosty':
      await bot.editMessageText(
        `üíé **–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Boosty.to
üá∑üá∫ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏

**–¶–µ–Ω–∞:** 399 ‚ÇΩ –≤ –º–µ—Å—è—Ü

**–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://boosty.to/loomiq/purchase/3568312?ssource=DIRECT&share=subscription_link
2. –û—Ñ–æ—Ä–º–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
3. –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–∫–∞—Ä—Ç—ã –†–§)
4. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @loomiq_support
5. PRO —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!

‚ú® –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã –†–§ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã`, {
        chat_id: chatId,
        message_id: messageId
      });
      break;

    case 'patreon':
      await bot.editMessageText(
        `üíé **–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Patreon
üåç –î–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–¶–µ–Ω–∞:** $4 –≤ –º–µ—Å—è—Ü

**–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.patreon.com/14834277/join
2. –û—Ñ–æ—Ä–º–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
3. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ PayPal –∏–ª–∏ –∫–∞—Ä—Ç—É
4. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @loomiq_support
5. PRO —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!

‚ú® –ü—Ä–∏–Ω–∏–º–∞–µ–º PayPal, Visa, Mastercard`, {
        chat_id: chatId,
        message_id: messageId
      });
      break;
      
    case 'compare':
      const compareText = `üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤:

üÜì FREE:
‚úÖ 1 –ø—Ä–æ–µ–∫—Ç
‚úÖ 100 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü
‚úÖ 5 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–¥–µ–Ω—å
‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚ùå –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üíé PRO ($7/–º–µ—Å—è—Ü):
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚úÖ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚úÖ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;

      await bot.editMessageText(compareText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
      
    case 'faq':
      const faqText = `‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã PRO:

Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
A: –ù–∞–ø–∏—à–∏—Ç–µ @loomiq_support

Q: –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
A: –î–∞, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ

Q: –°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ?
A: –î–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ FREE –ø–ª–∞–Ω–∞

Q: –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§?
A: –î–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @loomiq_support`;

      await bot.editMessageText(faqText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;

    case 'info':
    case 'pro':
      // Redirect to main upgrade message with full info and buttons
      const { handleUpgrade } = require('./commands');
      const upgradeMessage = {
        chat: { id: chatId },
        user: { id: chatId } // Will be populated by middleware
      };

      // Delete current message and send new upgrade message
      try {
        await bot.deleteMessage(chatId, messageId);
      } catch (error) {
        // If delete fails, just edit the message
      }

      await handleUpgrade(upgradeMessage);
      break;

    default:
      // Unknown upgrade action, show main upgrade info
      await bot.editMessageText(
        'üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upgrade',
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
      break;
  }
}


// Settings handlers
async function handleSettingsAction(chatId, messageId, data, user) {
  const bot = getBot();
  const action = data.split(':')[1];
  
  try {
    switch (action) {
      case 'currency':
        const currencyKeyboard = {
          inline_keyboard: [
            [
              { text: 'üá∑üá∫ –†—É–±–ª—å (RUB)', callback_data: 'change_currency_RUB' },
              { text: 'üá∫üá∏ –î–æ–ª–ª–∞—Ä (USD)', callback_data: 'change_currency_USD' }
            ],
            [
              { text: 'üá™üá∫ –ï–≤—Ä–æ (EUR)', callback_data: 'change_currency_EUR' },
              { text: 'üá¨üáß –§—É–Ω—Ç (GBP)', callback_data: 'change_currency_GBP' }
            ],
            [
              { text: 'üá∞üáø –¢–µ–Ω–≥–µ (KZT)', callback_data: 'change_currency_KZT' },
              { text: 'üá∫üá¶ –ì—Ä–∏–≤–Ω–∞ (UAH)', callback_data: 'change_currency_UAH' }
            ],
            [
              { text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_settings' }
            ]
          ]
        };
        
        await bot.editMessageText(
          `üí± –°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: ${user.primary_currency || 'USD'}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:`, 
          { chat_id: chatId, message_id: messageId, reply_markup: currencyKeyboard }
        );
        break;
        
      case 'export':
        await bot.editMessageText('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: getExportFormatKeyboard()
        });
        break;
        
      case 'categories':
        if (!user.is_premium) {
          await bot.editMessageText('üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: getUpgradeKeyboard()
          });
        } else {
          // Show user's custom categories
          try {
            const categories = await customCategoryService.findByUserId(user.id);
            
            let message = 'üìÇ –í–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n';
            if (categories.length === 0) {
              message += '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚ûï –°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"';
            } else {
              categories.forEach((cat, index) => {
                message += `${index + 1}. ${cat.emoji} ${cat.name}\n`;
              });
              message += `\nüìä –í—Å–µ–≥–æ: ${categories.length}/50`;
            }
            
            const keyboard = [];

            // Always show create button first
            keyboard.push([
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'add_custom_category' }
            ]);

            // Add manage button if categories exist
            if (categories.length > 0) {
              keyboard.push([
                { text: 'üìù –£–ø—Ä–∞–≤–ª—è—Ç—å', callback_data: 'manage_categories' }
              ]);
            }

            // Add back button
            keyboard.push([
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings:main' }
            ]);

            await bot.editMessageText(message, {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: { inline_keyboard: keyboard }
            });
          } catch (error) {
            logger.error('Error loading categories:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [[
                  { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings:main' }
                ]]
              }
            });
          }
        }
        break;
        
      case 'main':
        await bot.editMessageText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: getSettingsKeyboard(user.is_premium)
        });
        break;
        
      case 'clear_data':
        await handleClearDataConfirmation(chatId, messageId, user);
        break;
    }
  } catch (error) {
    logger.error('Settings action error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Project switching
async function handleSwitchProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    // Deactivate all user's projects
    const projects = await projectService.findByUserId(user.id);
    for (const project of projects) {
      if (project.is_active) {
        await projectService.update(project.id, { is_active: false });
      }
    }
    
    // Activate selected project
    const selectedProject = await projectService.update(projectId, { is_active: true });
    
    await bot.editMessageText(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${selectedProject.name}"!\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    logger.error('Switch project error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Custom category (PRO feature)
async function handleCustomCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getUpgradeKeyboard()
    });
    return;
  }
  
  // Check limit for FREE vs PRO
  const categoryCount = await customCategoryService.getCountByUserId(user.id);
  const maxCategories = user.is_premium ? 50 : 10; // PRO can have 50, FREE would be 10 (but FREE can't create)
  
  if (categoryCount >= maxCategories) {
    await bot.editMessageText(`üìÇ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${maxCategories})\n\n–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ –ø–ª–∞–Ω–∞.`, {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }
  
  // Set state to wait for category name input
  stateManager.setState(chatId, STATE_TYPES.WAITING_CUSTOM_CATEGORY, { 
    tempId,
    messageId 
  });
  
  await bot.editMessageText('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏:\n\nüìù –ü—Ä–∏–º–µ—Ä: "üéÆ –ò–≥—Ä—ã" –∏–ª–∏ "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞"\n\nüí° –§–æ—Ä–º–∞—Ç: —ç–º–æ–¥–∑–∏ + –ø—Ä–æ–±–µ–ª + –Ω–∞–∑–≤–∞–Ω–∏–µ', {
    chat_id: chatId,
    message_id: messageId
  });
}

// Custom amount input
async function handleCustomAmount(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  
  // Set state to wait for custom amount input
  stateManager.setState(chatId, STATE_TYPES.WAITING_CUSTOM_AMOUNT, { 
    tempId,
    messageId 
  });
  
  await bot.editMessageText('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:\n\nüìù –ü—Ä–∏–º–µ—Ä—ã: 250, 1500.50, 50', {
    chat_id: chatId,
    message_id: messageId
  });
}


async function handleSetCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  
  try {
    const currency = data.replace('set_currency_', '');
    
    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });
    
    const currencyNames = {
      'RUB': '–†—É–±–ª—å',
      'USD': '–î–æ–ª–ª–∞—Ä',
      'EUR': '–ï–≤—Ä–æ', 
      'GBP': '–§—É–Ω—Ç',
      'KZT': '–¢–µ–Ω–≥–µ',
      'UAH': '–ì—Ä–∏–≤–Ω–∞'
    };
    
    // Check if user already has projects
    const userProjects = await projectService.findByUserId(user.id);

    if (userProjects.length === 0) {
      await bot.editMessageText(
        `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currencyNames[currency]} (${currency})\n\n‚ú® –°–æ–∑–¥–∞—é –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç...`,
        { chat_id: chatId, message_id: messageId }
      );

      // Create first project automatically
      const project = await projectService.create({
        owner_id: user.id,
        name: '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
        is_active: true
      });

      const { getMainMenuKeyboard } = require('../keyboards/reply');
      await bot.sendMessage(chatId,
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" —Å–æ–∑–¥–∞–Ω!

‚ú® –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 15 –µ–≤—Ä–æ –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 15‚Ç¨"

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /connect`,
        { reply_markup: getMainMenuKeyboard() }
      );
    } else {
      await bot.editMessageText(
        `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currencyNames[currency]} (${currency})`,
        { chat_id: chatId, message_id: messageId }
      );

      const { getMainMenuKeyboard } = require('../keyboards/reply');
      await bot.sendMessage(chatId,
        `üíé –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`,
        { reply_markup: getMainMenuKeyboard() }
      );
    }
    
  } catch (error) {
    logger.error('Set currency error:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { chat_id: chatId, message_id: messageId }
    );
  }
}

async function handleChangeCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  
  try {
    const currency = data.replace('change_currency_', '');
    
    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });
    
    const currencyNames = {
      'RUB': '–†—É–±–ª—å',
      'USD': '–î–æ–ª–ª–∞—Ä',
      'EUR': '–ï–≤—Ä–æ', 
      'GBP': '–§—É–Ω—Ç',
      'KZT': '–¢–µ–Ω–≥–µ',
      'UAH': '–ì—Ä–∏–≤–Ω–∞'
    };
    
    await bot.editMessageText(
      `‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${currencyNames[currency]} (${currency})\n\n–¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`,
      { chat_id: chatId, message_id: messageId, reply_markup: { 
        inline_keyboard: [[{ text: '‚Üê –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]]
      }}
    );
    
  } catch (error) {
    logger.error('Change currency error:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { chat_id: chatId, message_id: messageId }
    );
  }
}

async function handleBackToSettings(chatId, messageId, user) {
  const bot = getBot();
  const { getSettingsKeyboard } = require('../keyboards/inline');
  
  try {
    const settingsText = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.username ? `(@${user.username})` : ''}
üí± –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${user.primary_currency || 'USD'}
üåê –Ø–∑—ã–∫: ${user.language_code === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}
üíé –ü–ª–∞–Ω: ${user.is_premium ? 'PRO' : 'FREE'}

${user.is_premium ? '' : 'üíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!'}`;

    await bot.editMessageText(settingsText, {
      chat_id: chatId, 
      message_id: messageId,
      reply_markup: getSettingsKeyboard()
    });
  } catch (error) {
    logger.error('Back to settings error:', error);
  }
}

// Custom category management functions
async function handleAddCustomCategory(chatId, messageId, user) {
  const bot = getBot();
  const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_categories' }]] }
    });
    return;
  }

  try {
    const categoryCount = await customCategoryService.getCountByUserId(user.id);
    if (categoryCount >= 10) {
      await bot.editMessageText('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (10/10)', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_categories' }]] }
      });
      return;
    }

    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_NAME, { messageId });
    
    await bot.editMessageText(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ –°–æ–±–∞–∫–∞
‚Ä¢ –†–µ–º–æ–Ω—Ç –¥–æ–º–∞  
‚Ä¢ –§–∏—Ç–Ω–µ—Å

üé® –≠–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'manage_categories' }]] }
    });
  } catch (error) {
    logger.error('Error in handleAddCustomCategory:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleManageCategories(chatId, messageId, user) {
  const bot = getBot();
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }

  try {
    const customCategories = await customCategoryService.findByUserId(user.id);
    
    if (customCategories.length === 0) {
      await bot.editMessageText(`üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { 
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'add_custom_category' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]
          ]
        }
      });
      return;
    }

    let message = `üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (${customCategories.length}/10)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`;
    
    const keyboard = customCategories.map(cat => ([
      { text: `${cat.emoji || 'üìÅ'} ${cat.name}`, callback_data: `edit_custom_category:${cat.id}` }
    ]));
    
    keyboard.push([{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é', callback_data: 'add_custom_category' }]);
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]);

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    logger.error('Error in handleManageCategories:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCustomCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    const categories = await customCategoryService.findByUserId(user.id);
    const category = categories.find(cat => cat.id === categoryId);
    
    if (!category) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_categories' }]] }
      });
      return;
    }

    // Show keywords if they exist
    const keywordsText = category.keywords
      ? `üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: \`${category.keywords}\``
      : 'üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: _–Ω–µ –∑–∞–¥–∞–Ω—ã_';

    const message = `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

${category.emoji || 'üìÅ'} **${category.name}${keywordsText}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_cat_name:${categoryId}` }],
          [{ text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏', callback_data: `edit_cat_emoji:${categoryId}` }],
          [{ text: 'üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data: `edit_cat_keywords:${categoryId}` }],
          [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_category:${categoryId}` }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_categories' }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in handleEditCategory:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleDeleteCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    const categories = await customCategoryService.findByUserId(user.id);
    const category = categories.find(cat => cat.id === categoryId);
    
    if (!category) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    await bot.editMessageText(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.emoji || 'üìÅ'} ${category.name}"?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_category:${categoryId}` }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_custom_category:${categoryId}` }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in handleDeleteCategory:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleConfirmDeleteCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    await customCategoryService.delete(categoryId);
    
    await bot.editMessageText('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'manage_categories' }]]
      }
    });
  } catch (error) {
    logger.error('Error deleting category:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategoryName(chatId, messageId, data, user) {
  const bot = getBot();
  const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    const categories = await customCategoryService.findByUserId(user.id);
    const category = categories.find(cat => cat.id === categoryId);
    
    if (!category) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_NAME_EDIT, { 
      messageId,
      categoryId,
      currentName: category.name
    });
    
    await bot.editMessageText(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: **${category.name}
üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):`, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: { 
        inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_category:${categoryId}` }]]
      }
    });
  } catch (error) {
    logger.error('Error in handleEditCategoryName:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategoryEmoji(chatId, messageId, data, user) {
  const bot = getBot();
  const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    const categories = await customCategoryService.findByUserId(user.id);
    const category = categories.find(cat => cat.id === categoryId);
    
    if (!category) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_EMOJI_EDIT, { 
      messageId,
      categoryId,
      currentEmoji: category.emoji
    });
    
    await bot.editMessageText(`üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **${category.name}–¢–µ–∫—É—â–∏–π —ç–º–æ–¥–∑–∏: ${category.emoji || 'üìÅ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}

üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª):

üí° –ü—Ä–∏–º–µ—Ä—ã: üêï üè† üöó üçî üíä üé¨ ‚úàÔ∏è`, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: { 
        inline_keyboard: [
          [{ text: 'üóëÔ∏è –£–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏', callback_data: `remove_emoji:${categoryId}` }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_custom_category:${categoryId}` }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in handleEditCategoryEmoji:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleRemoveEmoji(chatId, messageId, data, user) {
  const bot = getBot();
  const categoryId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }
  
  try {
    await customCategoryService.update(categoryId, { emoji: null });
    
    await bot.editMessageText('‚úÖ –≠–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `edit_custom_category:${categoryId}` }]]
      }
    });
  } catch (error) {
    logger.error('Error removing emoji:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSkipEmoji(chatId, messageId, user) {
  const bot = getBot();
  const { stateManager } = require('../../utils/stateManager');
  
  try {
    const state = stateManager.getState(chatId);
    if (!state || !state.data || !state.data.categoryName) {
      await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    const { categoryName } = state.data;
    
    // Create category without emoji
    const category = await customCategoryService.create({
      user_id: user.id,
      name: categoryName,
      emoji: null
    });

    await bot.editMessageText(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!

üìÅ **${categoryName}
–¢–µ–ø–µ—Ä—å —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.`, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'manage_categories' }]]
      }
    });

    stateManager.clearState(chatId);
  } catch (error) {
    logger.error('Error creating category without emoji:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategoryKeywords(chatId, messageId, data, user) {
  const bot = getBot();
  const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
  const categoryId = data.split(':')[1];

  if (!user.is_premium) {
    await bot.editMessageText('üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'categories' }]] }
    });
    return;
  }

  try {
    const categories = await customCategoryService.findByUserId(user.id);
    const category = categories.find(cat => cat.id === categoryId);

    if (!category) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_KEYWORDS_EDIT, {
      categoryId,
      currentKeywords: category.keywords
    });

    const currentKeywords = category.keywords ? `\`${category.keywords}\`` : '_–Ω–µ –∑–∞–¥–∞–Ω—ã_';

    await bot.sendMessage(chatId, `üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

${category.emoji || 'üìÅ'} **${category.name}–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${currentKeywords}

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ —Å–æ–±–∞–∫–∞, –ø–µ—Å, –∫–æ—Ä–º, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä
‚Ä¢ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –µ–¥–∞, –ø–∏—Ü—Ü–∞
‚Ä¢ –±–µ–Ω–∑–∏–Ω, –∑–∞–ø—Ä–∞–≤–∫–∞, —Ç–æ–ø–ª–∏–≤–æ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ **-** —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_custom_category:${categoryId}` }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in handleEditCategoryKeywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
  }
}

async function handleCategoriesCallback(chatId, messageId, user) {
  const { handleCategories } = require('./commands');
  const bot = getBot();
  
  try {
    // Create a fake message object for handleCategories function
    const fakeMsg = {
      chat: { id: chatId },
      user: user
    };
    
    // Delete the callback message first
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (e) {
      // Ignore if message can't be deleted
    }
    
    // Call the categories command handler
    await handleCategories(fakeMsg);
  } catch (error) {
    logger.error('Error handling categories callback:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Export handlers
async function handleExportFormat(chatId, messageId, data, user) {
  const bot = getBot();
  const format = data.split(':')[1]; // xlsx or csv
  
  await bot.editMessageText('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getExportPeriodKeyboard(format)
  });
}

async function handleExportPeriod(chatId, messageId, data, user) {
  const bot = getBot();
  const parts = data.split(':');
  const format = parts[1]; // xlsx or csv
  const period = parts[2]; // today, week, month, custom
  
  if (period === 'custom') {
    // Set state for custom date range input
    stateManager.setState(chatId, 'WAITING_CUSTOM_EXPORT_DATES', { 
      format,
      messageId 
    });
    
    await bot.editMessageText('üìÖ –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\nüìù –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: 01.12.2024 - 31.12.2024', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }
  
  try {
    // Calculate date range
    const { startDate, endDate } = getDateRange(period);
    
    // Generate export
    await generateExport(chatId, messageId, user, format, startDate, endDate);
    
  } catch (error) {
    logger.error('Export error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

function getDateRange(period) {
  const today = new Date();
  let startDate, endDate;
  
  switch (period) {
    case 'today':
      startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);
      break;
    case 'week':
      startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
      endDate = today;
      break;
    case 'month':
      startDate = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
      endDate = today;
      break;
    default:
      throw new Error('Unknown period');
  }
  
  return { startDate, endDate };
}

async function generateExport(chatId, messageId, user, format, startDate, endDate) {
  const bot = getBot();
  
  // Show processing message
  await bot.editMessageText('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç...', {
    chat_id: chatId,
    message_id: messageId
  });
  
  try {
    // Get user's expenses and incomes for the period
    const [expenses, incomes] = await Promise.all([
      expenseService.getExpensesForExport(user.id, startDate, endDate),
      incomeService.getIncomesForExport(user.id, startDate, endDate)
    ]);

    if (expenses.length === 0 && incomes.length === 0) {
      await bot.editMessageText('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    let fileContent, fileName, mimeType;
    
    if (format === 'csv') {
      // Generate CSV
      const csvData = generateCSV(expenses, incomes);
      fileContent = Buffer.from(csvData, 'utf-8');
      fileName = `transactions_${formatDate(startDate)}_${formatDate(endDate)}.csv`;
      mimeType = 'text/csv';
    } else {
      // Generate Excel - for now, use CSV format as placeholder
      const csvData = generateCSV(expenses, incomes);
      fileContent = Buffer.from(csvData, 'utf-8');
      fileName = `transactions_${formatDate(startDate)}_${formatDate(endDate)}.xlsx`;
      mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }
    
    // Send file
    await bot.sendDocument(chatId, fileContent, {}, {
      filename: fileName,
      contentType: mimeType
    });
    
    // Update message
    const totalRecords = expenses.length + incomes.length;
    await bot.editMessageText(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤!\n\nüìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalRecords} –∑–∞–ø–∏—Å–µ–π (${expenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤, ${incomes.length} –¥–æ—Ö–æ–¥–æ–≤)\nüìÖ –ü–µ—Ä–∏–æ–¥: ${formatDate(startDate)} - ${formatDate(endDate)}`, {
      chat_id: chatId,
      message_id: messageId
    });
    
  } catch (error) {
    logger.error('Export generation error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

function generateCSV(expenses, incomes) {
  const headers = ['–î–∞—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—É–º–º–∞', '–í–∞–ª—é—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–æ–µ–∫—Ç', '–¢–∏–ø'];
  const rows = [headers];

  // Add expenses (negative amounts)
  expenses.forEach(expense => {
    rows.push([
      expense.expense_date,
      expense.description,
      -Math.abs(expense.amount), // Negative for expenses
      expense.currency,
      expense.category,
      expense.project_name || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
      '–†–∞—Å—Ö–æ–¥'
    ]);
  });

  // Add incomes (positive amounts)
  incomes.forEach(income => {
    rows.push([
      income.income_date,
      income.description,
      Math.abs(income.amount), // Positive for incomes
      income.currency,
      income.category,
      income.project_name || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
      '–î–æ—Ö–æ–¥'
    ]);
  });

  // Sort by date (newest first)
  const dataRows = rows.slice(1);
  dataRows.sort((a, b) => new Date(b[0]) - new Date(a[0]));

  return [headers, ...dataRows].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
}

function formatDate(date) {
  return date.toISOString().split('T')[0].replace(/-/g, '.');
}

// Clear data handlers
async function handleClearDataConfirmation(chatId, messageId, user) {
  const bot = getBot();
  
  const warningText = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  
üóëÔ∏è –ë—É–¥—É—Ç –£–î–ê–õ–ï–ù–´:
‚Ä¢ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã  
‚Ä¢ –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ùå –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –ù–ï–í–û–ó–ú–û–ñ–ù–û!

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

  await bot.editMessageText(warningText, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚ùå –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–Å', callback_data: 'confirm_clear_data' }
        ],
        [
          { text: '‚úÖ –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_clear_data' }
        ]
      ]
    }
  });
}

async function handleConfirmClearData(chatId, messageId, user) {
  const bot = getBot();
  
  try {
    // Show processing message
    await bot.editMessageText('üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...', {
      chat_id: chatId,
      message_id: messageId
    });
    
    // Delete all user data
    await clearAllUserData(user.id);
    
    await bot.editMessageText(`‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!
    
üìä –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—á–∏—â–µ–Ω:
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è

üí° –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.`, {
      chat_id: chatId,
      message_id: messageId
    });
    
  } catch (error) {
    logger.error('Error clearing user data:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelClearData(chatId, messageId, user) {
  const bot = getBot();
  
  await bot.editMessageText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getSettingsKeyboard(user.is_premium)
  });
}

async function clearAllUserData(userId) {
  // Delete in order due to foreign key constraints
  
  // 1. Delete expenses first
  await supabase
    .from('expenses')
    .delete()
    .eq('user_id', userId);
  
  // 2. Delete custom categories
  await supabase
    .from('custom_categories')
    .delete()
    .eq('user_id', userId);
  
  // 3. Delete projects
  await supabase
    .from('projects')
    .delete()
    .eq('owner_id', userId);
  
  // 4. Reset user settings (keep user record but reset data)
  await supabase
    .from('users')
    .update({
      primary_currency: 'RUB', // Reset to default
      google_sheets_url: null,
      settings: null
    })
    .eq('id', userId);
    
  logger.info(`All data cleared for user ${userId}`);
}

// Income handlers

async function handleSaveIncome(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Check monthly records limit for FREE users
    const canCreate = await userService.checkMonthlyRecordsLimit(user.id);
    if (!canCreate) {
      await bot.editMessageText(
        `‚õî –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω (100 –∑–∞–ø–∏—Å–µ–π –≤ –º–µ—Å—è—Ü).\n\nüíé –í PRO –ø–ª–∞–Ω–µ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.`,
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: { inline_keyboard: [[
            { text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å –¥–æ PRO', callback_data: 'upgrade:info' }
          ]] }
        }
      );
      return;
    }

    // Create a copy without project_name (which is only for display, not database storage)
    const { project_name, ...dbIncomeData } = incomeData;

    // Save income to database
    const savedIncome = await incomeService.create(dbIncomeData);

    // Get project name for confirmation
    const project = await projectService.findById(incomeData.project_id);

    // Try to add to Google Sheets only if project has google_sheet_id
    let sheetsSuccess = false;
    if (project.google_sheet_id) {
      try {
        await googleSheetsService.addIncomeToSheet(savedIncome, incomeData.project_id);
        sheetsSuccess = true;
      } catch (sheetsError) {
        logger.warn('Google Sheets sync failed but income saved:', sheetsError.message);
      }
    }

    const successText = `‚úÖ –î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

üí∞ ${incomeData.description}: +${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}
${project.google_sheet_id ? (sheetsSuccess ? 'üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets' : 'üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets: –æ—à–∏–±–∫–∞ (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)') : ''}`;

    try {
      await bot.editMessageText(successText, {
        chat_id: chatId,
        message_id: messageId
      });
    } catch (telegramError) {
      // Ignore "message not modified" errors - data is already saved
      if (telegramError.code === 'ETELEGRAM' &&
          telegramError.response?.body?.description?.includes('message is not modified')) {
        logger.info('Message not modified (Telegram API) - income already saved successfully');
      } else {
        logger.error('Telegram API error while updating message:', telegramError);
        // Try to send new message as fallback
        try {
          await bot.sendMessage(chatId, successText);
        } catch (fallbackError) {
          logger.error('Failed to send fallback message:', fallbackError);
        }
      }
    }

    // Clean up temp data
    tempIncomes.delete(tempId);

  } catch (error) {
    logger.error('Save income error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelIncome(chatId, messageId, data) {
  const bot = getBot();
  const tempId = data.split(':')[1];

  // Clean up temp data
  tempIncomes.delete(tempId);

  // Clear any active states
  stateManager.clearState(chatId);

  await bot.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleEditIncomeCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getIncomeCategorySelectionKeyboard(tempId)
  });
}

async function handleEditIncomeAmount(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_income_confirmation:${tempId}` }]]
    }
  });

  stateManager.setState(chatId, STATE_TYPES.EDITING_INCOME_AMOUNT, { tempId });
}

async function handleEditIncomeDescription(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_income_confirmation:${tempId}` }]]
    }
  });

  stateManager.setState(chatId, STATE_TYPES.EDITING_INCOME_DESCRIPTION, { tempId });
}

async function handleEditIncomeProject(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  if (!user.is_premium) {
    await bot.editMessageText('üíé –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_income_confirmation:${tempId}` }]]
      }
    });
    return;
  }

  try {
    const projects = await projectService.findByUserId(user.id);
    if (projects.length === 0) {
      await bot.editMessageText('üìã –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_income_confirmation:${tempId}` }]]
        }
      });
      return;
    }

    await bot.editMessageText('üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ—Ö–æ–¥–∞:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getIncomeProjectSelectionKeyboard(tempId, projects)
    });

  } catch (error) {
    logger.error('Error loading projects for income:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_income_confirmation:${tempId}` }]]
      }
    });
  }
}

async function handleSetIncomeCategory(chatId, messageId, data, user) {
  const bot = getBot();
  
  try {
    const [, tempId, categoryIndexStr] = data.split(':');
    const categoryIndex = parseInt(categoryIndexStr);
    const incomeData = tempIncomes.get(tempId);

    if (!incomeData) {
      await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Get category by index from INCOME_CATEGORIES
    const { INCOME_CATEGORIES } = require('../../config/constants');
    const selectedCategory = INCOME_CATEGORIES[categoryIndex];
    
    if (!selectedCategory) {
      throw new Error('Invalid category index');
    }

    // Extract category name without emoji
    const categoryName = selectedCategory.split(' ').slice(1).join(' ');
    incomeData.category = categoryName;
    tempIncomes.set(tempId, incomeData);

    // Show updated confirmation
    const project = await projectService.findById(incomeData.project_id);
    
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getIncomeConfirmationKeyboard(tempId, user.is_premium)
    });
  } catch (error) {
    logger.error('Error setting income category:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSetIncomeProject(chatId, messageId, data, user) {
  const bot = getBot();
  const [, tempId, projectIndexStr] = data.split(':');
  const projectIndex = parseInt(projectIndexStr);
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get all user's projects to find by index
    const projects = await projectService.findByUserId(user.id);
    const project = projects[projectIndex];
    
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    incomeData.project_id = project.id;
    tempIncomes.set(tempId, incomeData);

    // Show updated confirmation
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getIncomeConfirmationKeyboard(tempId, user.is_premium)
    });

  } catch (error) {
    logger.error('Error setting income project:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleBackToIncomeConfirmation(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  const incomeData = tempIncomes.get(tempId);

  if (!incomeData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    const project = await projectService.findById(incomeData.project_id);
    
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getIncomeConfirmationKeyboard(tempId, user.is_premium)
    });

  } catch (error) {
    logger.error('Error showing income confirmation:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Project management handlers
async function handleDeleteProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    // Get project info first
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check ownership
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check if it's the last project
    const userProjects = await projectService.findByUserId(user.id);
    if (userProjects.length <= 1) {
      await bot.editMessageText('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –°–æ–∑–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç —Å–Ω–∞—á–∞–ª–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Show confirmation
    await bot.editMessageText(
      `‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"\n\n` +
      `‚ùó –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã:\n` +
      `‚Ä¢ –í–°–ï —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–æ–µ–∫—Ç–∞\n` +
      `‚Ä¢ –í–°–ï –¥–æ—Ö–æ–¥—ã –ø—Ä–æ–µ–∫—Ç–∞\n` +
      `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n` +
      `‚Ä¢ –°–≤—è–∑—å —Å Google —Ç–∞–±–ª–∏—Ü–µ–π\n\n` +
      `‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –æ—Ç–º–µ–Ω–∏—Ç—å!`,
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_project:${projectId}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_projects' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    logger.error('Delete project error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleConfirmDeleteProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check ownership
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Delete the project and all related data (expenses, incomes, members)
    await projectService.delete(projectId);

    // If deleted project was active, activate another one
    if (project.is_active) {
      const remainingProjects = await projectService.findByUserId(user.id);
      if (remainingProjects.length > 0) {
        await projectService.update(remainingProjects[0].id, { is_active: true });
      }
    }

    await bot.editMessageText(
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${project.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n` +
      `üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã:\n` +
      `‚Ä¢ –ü—Ä–æ–µ–∫—Ç\n` +
      `‚Ä¢ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã\n` +
      `‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`,
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
          ]]
        }
      }
    );
  } catch (error) {
    logger.error('Confirm delete project error:', error);
    
    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.';
    
    if (error.message.includes('foreign key constraint')) {
      errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑-–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('Failed to delete project')) {
      errorMessage = `‚ùå ${error.message}`;
    }
    
    await bot.editMessageText(errorMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[
          { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
        ]]
      }
    });
  }
}

async function handleManageProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check ownership
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Show keywords if they exist
    const keywordsText = project.keywords
      ? `üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: \`${project.keywords}\``
      : 'üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: _–Ω–µ –∑–∞–¥–∞–Ω—ã_';

    const message = `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

üìÅ **${project.name}${keywordsText}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_project_name:${projectId}` }],
          [{ text: 'üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data: `edit_project_keywords:${projectId}` }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º', callback_data: 'back_to_projects' }]
        ]
      }
    });

  } catch (error) {
    logger.error('Error in handleEditProject:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditProjectKeywords(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check ownership
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_KEYWORDS_EDIT, {
      projectId,
      currentKeywords: project.keywords
    });

    const currentKeywords = project.keywords ? `\`${project.keywords}\`` : '_–Ω–µ –∑–∞–¥–∞–Ω—ã_';

    await bot.sendMessage(chatId, `üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

üìÅ **${project.name}–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${currentKeywords}

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ –æ—Ç–ø—É—Å–∫, –æ—Ç–¥—ã—Ö, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞
‚Ä¢ –º–∞–≥–∞–∑–∏–Ω, –ø—Ä–æ–¥—É–∫—Ç—ã, –µ–¥–∞, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç
‚Ä¢ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –æ–±–µ–¥, —É–∂–∏–Ω

–û—Ç–ø—Ä–∞–≤—å—Ç–µ **-** —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `manage_project:${projectId}` }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in handleEditProjectKeywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
  }
}

async function handleEditProjectName(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check ownership
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Clear any existing state and set state for name editing
    stateManager.clearState(chatId);
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_NAME_EDIT, { 
      projectId,
      messageId,
      currentName: project.name 
    });

    await bot.editMessageText(
      `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n` +
      `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${project.name}"\n\n` +
      `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:`,
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_projects' }
          ]]
        }
      }
    );
  } catch (error) {
    logger.error('Edit project name error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleBackToProjects(chatId, messageId, user) {
  const { handleProjects } = require('./commands');
  const bot = getBot();
  
  try {
    // Create a fake message object for handleProjects function
    const fakeMsg = {
      chat: { id: chatId },
      user: user
    };
    
    // Delete the callback message first
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (e) {
      // Ignore if message can't be deleted
    }
    
    // Call the projects command handler
    await handleProjects(fakeMsg);
  } catch (error) {
    logger.error('Error handling back to projects:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Project creation handlers for different Google Sheets options
async function handleCreateProjectWithExistingSheet(chatId, messageId, user) {
  logger.info(`üöÄ FUNCTION START: handleCreateProjectWithExistingSheet called!`);
  logger.info(`üöÄ Parameters: chatId=${chatId}, messageId=${messageId}, user=${user?.id}`);

  const bot = getBot();

  try {
    logger.info(`üìù Starting handleCreateProjectWithExistingSheet for user ${user.id}`);
    logger.info(`üìù ChatId: ${chatId}, MessageId: ${messageId}`);
    
    // Clear any existing state first
    stateManager.clearState(chatId);
    logger.info(`üîß Setting state for user ${user.id}: WAITING_PROJECT_NAME_EXISTING_SHEET`);
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_NAME_EXISTING_SHEET, { messageId });
    logger.info(`üîß State set successfully for user ${user.id}`);
    
    await bot.editMessageText(
      'üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–∏—Å—Ç–æ–º\n\n' +
      'üìä –ü—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Google —Ç–∞–±–ª–∏—Ü–µ.\n\n' +
      'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n' +
      'üí° –ü—Ä–∏–º–µ—Ä: "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏" –∏–ª–∏ "–†–∞–±–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_project_creation' }
          ]]
        }
      }
    );
    
    logger.info(`‚úÖ Successfully updated message for existing sheet option`);
  } catch (error) {
    logger.error('Error handling create project with existing sheet:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCreateProjectWithNewSheet(chatId, messageId, user) {
  const bot = getBot();
  
  try {
    logger.info(`üìù Starting handleCreateProjectWithNewSheet for user ${user.id}`);
    logger.info(`üìù ChatId: ${chatId}, MessageId: ${messageId}`);
    
    // Clear any existing state first
    stateManager.clearState(chatId);
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_NAME_NEW_SHEET, { messageId });
    
    await bot.editMessageText(
      'üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π\n\n' +
      'üìä –î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è Google —Ç–∞–±–ª–∏—Ü–∞.\n\n' +
      'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n' +
      'üí° –ü—Ä–∏–º–µ—Ä: "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏" –∏–ª–∏ "–†–∞–±–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_project_creation' }
          ]]
        }
      }
    );
  } catch (error) {
    logger.error('Error handling create project with new sheet:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelProjectCreation(chatId, messageId, user) {
  const bot = getBot();
  
  try {
    stateManager.clearState(chatId);
    
    await bot.editMessageText(
      '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
          ]]
        }
      }
    );
  } catch (error) {
    logger.error('Error cancelling project creation:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  const expenseId = data.split(':')[1];

  try {
    await bot.editMessageText(
      'üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getCurrencySelectionKeyboard(expenseId, 'expense')
      }
    );
  } catch (error) {
    logger.error('Error handling edit currency:', error);
  }
}

async function handleEditIncomeCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  const incomeId = data.split(':')[1];

  try {
    await bot.editMessageText(
      'üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getCurrencySelectionKeyboard(incomeId, 'income')
      }
    );
  } catch (error) {
    logger.error('Error handling edit income currency:', error);
  }
}

async function handleSetTransactionCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  const [, expenseId, currency, type] = data.split(':');

  try {
    if (type === 'income') {
      const incomeData = tempIncomes.get(expenseId);
      if (incomeData) {
        incomeData.currency = currency;
        tempIncomes.set(expenseId, incomeData);

        await bot.editMessageText(
          `üí∞ ${incomeData.description || '–î–æ—Ö–æ–¥'}\nüíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${incomeData.project_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: getIncomeConfirmationKeyboard(expenseId, user.is_premium)
          }
        );
      }
    } else {
      const expenseData = tempExpenses.get(expenseId);
      if (expenseData) {
        expenseData.currency = currency;
        tempExpenses.set(expenseId, expenseData);

        await bot.editMessageText(
          `üí∏ ${expenseData.description || '–†–∞—Å—Ö–æ–¥'}\nüíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${expenseData.project_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: getExpenseConfirmationKeyboard(expenseId, user.is_premium)
          }
        );
      }
    }
  } catch (error) {
    logger.error('Error handling set currency:', error);
  }
}

async function handleSyncProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    // Check sync limit for users without unlimited access
    const hasUnlimited = await userService.hasUnlimitedAccess(user.id);
    if (!hasUnlimited) {
      const syncLimit = 3;
      if (user.daily_syncs_used >= syncLimit) {
        await bot.editMessageText(
          `üìä –õ–∏–º–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω (${syncLimit}/–¥–µ–Ω—å)\n\nüíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [[
                { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'cancel_sync' }
              ]]
            }
          }
        );
        return;
      }
    }

    // Get project info
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    if (!project.google_sheet_id) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Sheets', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Show loading message
    await bot.editMessageText(
      `üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"...\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets.`,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );

    // Perform sync
    const googleSheetsService = require('../../services/googleSheets');
    const result = await googleSheetsService.syncFromGoogleSheets(user.id, projectId);

    // Update daily sync counter for non-premium users
    if (!user.is_premium) {
      await userService.update(user.id, {
        daily_syncs_used: (user.daily_syncs_used || 0) + 1
      });
    }

    // Show result
    let resultText = `‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n`;
    resultText += `üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}\n`;
    resultText += `üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.imported}\n`;

    if (result.errors && result.errors.length > 0) {
      resultText += `‚ö†Ô∏è –û—à–∏–±–æ–∫: ${result.errors.length}\n\n`;
      if (result.errors.length <= 3) {
        resultText += `**–û—à–∏–±–∫–∏:**\n${result.errors.join('\n')}`;
      } else {
        resultText += `**–ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:**\n${result.errors.slice(0, 3).join('\n')}\n...–∏ –µ—â—ë ${result.errors.length - 3}`;
      }
    }

    await bot.editMessageText(resultText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'cancel_sync' }
        ]]
      }
    });

  } catch (error) {
    logger.error('Error in handleSyncProject:', error);
    await bot.editMessageText(
      `‚ùå **–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏**\n\n${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'cancel_sync' }
          ]]
        }
      }
    );
  }
}

async function handleCancelSync(chatId, messageId) {
  const bot = getBot();

  try {
    await bot.deleteMessage(chatId, messageId);
  } catch (error) {
    // If can't delete, just edit the message
    await bot.editMessageText('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleConnectSheetToProject(chatId, messageId, data, user) {
  const bot = getBot();
  const parts = data.split(':');
  const projectId = parts[1];
  const sheetId = parts[2];

  try {
    // Get project info
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Update project with Google Sheets ID
    await projectService.update(projectId, {
      google_sheet_id: sheetId
    });

    // Delete the selection message
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (e) {
      // Ignore if can't delete
    }

    // Clear state and handle connection
    stateManager.clearState(chatId);

    // Import the handleGoogleSheetsConnected function
    const { handleGoogleSheetsConnected } = require('./messages');
    await handleGoogleSheetsConnected(chatId, user.id, project, sheetId);

  } catch (error) {
    logger.error('Error connecting sheet to project:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫ –ø—Ä–æ–µ–∫—Ç—É',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }
}

async function handleCancelConnectSheet(chatId, messageId) {
  const bot = getBot();

  try {
    stateManager.clearState(chatId);
    await bot.deleteMessage(chatId, messageId);
  } catch (error) {
    // If can't delete, just edit the message
    await bot.editMessageText('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSelectProjectForConnect(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    // Get project info
    const project = await projectService.findById(projectId);
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Show instructions for this specific project
    const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
    stateManager.setState(chatId, STATE_TYPES.WAITING_GOOGLE_SHEETS_LINK, { selectedProjectId: projectId });

    await bot.editMessageText(
      `üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}"**\n\n` +
      `**–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n\n` +
      `1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É\n` +
      `2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø"** ‚Üí **"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"**\n` +
      `3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ email: **exp-trck@ai-assistant-sheets.iam.gserviceaccount.com**\n` +
      `4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞: **"–†–µ–¥–∞–∫—Ç–æ—Ä"**\n` +
      `5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ\n\n` +
      `üìù **–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:**\n` +
      `https://docs.google.com/spreadsheets/d/1A2B3C.../edit\n\n` +
      `‚ú® –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_connect' }
          ]]
        }
      }
    );

  } catch (error) {
    logger.error('Error in handleSelectProjectForConnect:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelConnect(chatId, messageId) {
  const bot = getBot();

  try {
    stateManager.clearState(chatId);
    await bot.deleteMessage(chatId, messageId);
  } catch (error) {
    // If can't delete, just edit the message
    await bot.editMessageText('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Import shared transaction mapping
const { shortTransactionMap } = require('../../utils/transactionMap');

async function handleProjectSelectionForTransaction(callbackQuery, data) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const user = callbackQuery.user;
  const bot = getBot();
  const [, projectIndex, shortTransactionId, transactionType] = data.split(':');

  try {
    logger.info(`Project selection: projectIndex=${projectIndex}, shortTransactionId=${shortTransactionId}, transactionType=${transactionType}`);
    logger.info(`Available mappings: ${Array.from(shortTransactionMap.keys()).join(', ')}`);

    // Get stored transaction data using full ID from mapping
    const mappedData = shortTransactionMap.get(shortTransactionId);
    if (!mappedData) {
      logger.error(`No mapping found for shortTransactionId: ${shortTransactionId}`);
      await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    const { fullTransactionId, projects } = mappedData;

    let transactionData;
    if (transactionType === 'income') {
      transactionData = tempIncomes.get(fullTransactionId);
    } else {
      transactionData = tempExpenses.get(fullTransactionId);
    }

    if (!transactionData) {
      await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Get selected project by index
    const project = projects[parseInt(projectIndex)];
    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Update transaction data with project
    transactionData.project_id = project.id;
    transactionData.project_name = project.name;
    logger.info(`üìã Updated transaction data with project: ${project.name} (ID: ${project.id})`);
    logger.info(`üìã Will use fullTransactionId for confirmation keyboard: ${fullTransactionId}`);

    // Clean up mapping
    shortTransactionMap.delete(shortTransactionId);

    // Show confirmation with all data
    const { getExpenseConfirmationKeyboard, getIncomeConfirmationKeyboard } = require('../keyboards/inline');

    if (transactionType === 'income') {
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${transactionData.description}
üíµ –°—É–º–º–∞: ${transactionData.amount} ${transactionData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${transactionData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getIncomeConfirmationKeyboard(fullTransactionId, user.is_premium)
      });
    } else {
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${transactionData.description}
üíµ –°—É–º–º–∞: ${transactionData.amount} ${transactionData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${transactionData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getExpenseConfirmationKeyboard(fullTransactionId, user.is_premium)
      });
    }

  } catch (error) {
    logger.error('Error selecting project for transaction:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelTransaction(chatId, messageId, data) {
  const bot = getBot();
  const shortTransactionId = data.split(':')[1];

  // Get full ID from mapping and clean up
  const mappedData = shortTransactionMap.get(shortTransactionId);
  if (mappedData) {
    const { fullTransactionId } = mappedData;
    // Clean up temporary data
    tempExpenses.delete(fullTransactionId);
    tempIncomes.delete(fullTransactionId);
    shortTransactionMap.delete(shortTransactionId);
  }

  await bot.editMessageText('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
    chat_id: chatId,
    message_id: messageId
  });
}

// Team collaboration handlers
async function handleMakeCollaborative(chatId, messageId, user) {
  const bot = getBot();

  try {
    const projects = await projectService.findByUserId(user.id);
    const ownedProjects = projects.filter(p => p.user_role === 'owner' && !p.is_collaborative);

    if (ownedProjects.length === 0) {
      await bot.editMessageText(
        'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–µ.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]]
          }
        }
      );
      return;
    }

    const keyboard = ownedProjects.map(project => ([{
      text: `üìÅ ${project.name}`,
      callback_data: `make_collab:${project.id}`
    }]));

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]);

    await bot.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    logger.error('Error in handleMakeCollaborative:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleMakeProjectCollaborative(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.makeCollaborative(projectId, user.id);

    await bot.editMessageText(
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${project.name}" —Ç–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–Ω—ã–π!\n\n` +
      'üë§ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data: 'invite_member' }],
            [{ text: 'üîô –ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ', callback_data: 'back_to_team' }]
          ]
        }
      }
    );
  } catch (error) {
    logger.error('Error making project collaborative:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'make_collaborative' }]]
      }
    });
  }
}

async function handleInviteMember(chatId, messageId, user) {
  const bot = getBot();

  try {
    const projects = await projectService.findByUserId(user.id);
    const collaborativeProjects = projects.filter(p => p.is_collaborative && p.user_role === 'owner');

    if (collaborativeProjects.length === 0) {
      await bot.editMessageText(
        'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n' +
        '–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–º.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]]
          }
        }
      );
      return;
    }

    const keyboard = collaborativeProjects.map(project => ([{
      text: `üìÅ ${project.name}`,
      callback_data: `invite_to:${project.id}`
    }]));

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]);

    await bot.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    logger.error('Error in handleInviteMember:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleInviteToProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.findById(projectId);

    await bot.editMessageText(
      `üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç "${project.name}"\n\n` +
      'üî§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–±–µ–∑ @)\n' +
      'üì® –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n' +
      'üí° –ü—Ä–∏–º–µ—Ä—ã:\n' +
      '‚Ä¢ ivan_petrov\n' +
      '‚Ä¢ @username (—Å @)\n' +
      '‚Ä¢ –§–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'invite_member' }]]
        }
      }
    );

    // Set state for username input
    stateManager.setState(chatId, 'WAITING_INVITE_USERNAME', { projectId, messageId });

  } catch (error) {
    logger.error('Error in handleInviteToProject:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleManageMembers(chatId, messageId, user) {
  const bot = getBot();

  try {
    const projects = await projectService.findByUserId(user.id);
    const collaborativeProjects = projects.filter(p => p.is_collaborative && p.user_role === 'owner');

    if (collaborativeProjects.length === 0) {
      await bot.editMessageText(
        'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]]
          }
        }
      );
      return;
    }

    const keyboard = collaborativeProjects.map(project => ([{
      text: `üìÅ ${project.name}`,
      callback_data: `show_members:${project.id}`
    }]));

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_team' }]);

    await bot.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    logger.error('Error in handleManageMembers:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleShowMembers(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.findById(projectId);
    const members = await projectService.getMembers(projectId);

    let message = `üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"\n\n`;
    message += `üëë –í–ª–∞–¥–µ–ª–µ—Ü: @${user.username || user.first_name}\n\n`;

    if (members.length > 0) {
      message += '–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n';
      for (const member of members) {
        const username = member.user?.username ? `@${member.user.username}` : member.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        message += `‚Ä¢ ${username}\n`;
      }
    } else {
      message += '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.';
    }

    const keyboard = [];

    // Add kick buttons for each member
    for (const member of members) {
      const username = member.user?.username || member.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      keyboard.push([{
        text: `üö´ –ò—Å–∫–ª—é—á–∏—Ç—å ${username}`,
        callback_data: `kick_member:${projectId}:${member.user_id}`
      }]);
    }

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_members' }]);

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    logger.error('Error in handleShowMembers:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleKickMember(chatId, messageId, data, user) {
  const bot = getBot();
  const [, projectId, userId] = data.split(':');

  try {
    await projectMemberService.kick(projectId, parseInt(userId), user.id);

    // Refresh the members list
    await handleShowMembers(chatId, messageId, `show_members:${projectId}`, user);

  } catch (error) {
    logger.error('Error in handleKickMember:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `show_members:${projectId}` }]]
      }
    });
  }
}

async function handleBackToTeam(chatId, messageId, user) {
  const commands = require('./commands');

  // Clear any existing state
  stateManager.clearState(chatId);

  // Call handleTeam with a mock message object
  const mockMsg = {
    chat: { id: chatId },
    user: user
  };

  await commands.handleTeam(mockMsg);

  // Delete the callback message
  const bot = getBot();
  try {
    await bot.deleteMessage(chatId, messageId);
  } catch (error) {
    // Ignore if can't delete
  }
}

// Handle team management for specific project
async function handleManageTeam(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];

  try {
    const project = await projectService.findById(projectId);

    if (!project) {
      await bot.editMessageText('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Check if user is owner
    if (project.owner_id !== user.id) {
      await bot.editMessageText('‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    const keyboard = [];

    if (project.is_collaborative) {
      // Project is already collaborative - show team management options
      keyboard.push([
        { text: 'üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data: `invite_to:${projectId}` }
      ]);
      keyboard.push([
        { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏', callback_data: `show_members:${projectId}` }
      ]);
    } else {
      // Project is not collaborative - offer to make it collaborative
      keyboard.push([
        { text: 'üîÑ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–º', callback_data: `make_collab:${projectId}` }
      ]);
    }

    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º', callback_data: 'back_to_projects' }
    ]);

    const statusText = project.is_collaborative ? '–∫–æ–º–∞–Ω–¥–Ω—ã–π' : '–ª–∏—á–Ω—ã–π';
    await bot.editMessageText(
      `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π\n\n` +
      `üìÅ –ü—Ä–æ–µ–∫—Ç: ${project.name}\n` +
      `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard }
      }
    );

  } catch (error) {
    logger.error('Error in handleManageTeam:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Transaction editing handlers
async function handleEditTransaction(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    // Parse callback data: edit_transaction:type:id
    const [, transactionType, transactionId] = data.split(':');

    // Get transaction details
    let transaction;
    if (transactionType === 'expense') {
      transaction = await expenseService.findById(transactionId);
    } else if (transactionType === 'income') {
      transaction = await incomeService.findById(transactionId);
    } else {
      throw new Error('Invalid transaction type');
    }

    if (!transaction || transaction.user_id !== user.id) {
      await bot.editMessageText('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Get project name
    const project = await projectService.findById(transaction.project_id);

    const emoji = transactionType === 'expense' ? 'üì§' : 'üì•';
    const dateField = transactionType === 'expense' ? transaction.expense_date : transaction.income_date;
    const date = new Date(dateField).toLocaleDateString('ru-RU');

    const editText = `${emoji} **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏**

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${transaction.description}
üíµ –°—É–º–º–∞: ${transaction.amount} ${transaction.currency}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${transaction.category}
üìÇ –ü—Ä–æ–µ–∫—Ç: ${project?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ –î–∞—Ç–∞: ${date}

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`;

    await bot.editMessageText(editText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: getTransactionEditKeyboard(transactionId, transactionType)
    });

  } catch (error) {
    logger.error('Error in handleEditTransaction:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleCancelEdit(chatId, messageId, user) {
  const bot = getBot();

  try {
    await bot.editMessageText('‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    logger.error('Error in handleCancelEdit:', error);
  }
}

// Edit transaction amount
async function handleEditTransactionAmount(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    // Set state for editing amount
    logger.info(`üîß Setting state EDITING_TRANSACTION_AMOUNT for chatId: ${chatId}, transactionId: ${transactionId}, type: ${transactionType}`);
    stateManager.setState(chatId, STATE_TYPES.EDITING_TRANSACTION_AMOUNT, {
      transactionType,
      transactionId,
      messageId
    });
    logger.info(`‚úÖ State set successfully for chatId: ${chatId}`);

    await bot.editMessageText(
      'üíµ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      }
    );

  } catch (error) {
    logger.error('Error in handleEditTransactionAmount:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Edit transaction description
async function handleEditTransactionDescription(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    stateManager.setState(chatId, STATE_TYPES.EDITING_TRANSACTION_DESCRIPTION, {
      transactionType,
      transactionId,
      messageId
    });

    await bot.editMessageText(
      'üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      }
    );

  } catch (error) {
    logger.error('Error in handleEditTransactionDescription:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Edit transaction category
async function handleEditTransactionCategory(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    // Get current transaction to show category options
    let transaction;
    if (transactionType === 'expense') {
      transaction = await expenseService.findById(transactionId);
    } else {
      transaction = await incomeService.findById(transactionId);
    }

    if (!transaction || transaction.user_id !== user.id) {
      await bot.editMessageText('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Set state for category editing
    stateManager.setState(chatId, STATE_TYPES.EDITING_TRANSACTION_CATEGORY, {
      transactionType,
      transactionId,
      messageId
    });

    // Show category selection
    const keyboard = transactionType === 'expense'
      ? getCategorySelectionKeyboard(transactionId, user.is_premium)
      : getIncomeCategorySelectionKeyboard(transactionId);

    await bot.editMessageText(
      'üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );

  } catch (error) {
    logger.error('Error in handleEditTransactionCategory:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Edit transaction project
async function handleEditTransactionProject(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    // Get user's projects
    const projects = await projectService.findByUserId(user.id);

    if (projects.length === 0) {
      await bot.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Set state for project editing
    stateManager.setState(chatId, STATE_TYPES.EDITING_TRANSACTION_PROJECT, {
      transactionType,
      transactionId,
      messageId
    });

    // Show project selection
    const keyboard = getProjectSelectionForTransactionKeyboard(projects, transactionId, transactionType);

    await bot.editMessageText(
      'üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:**',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );

  } catch (error) {
    logger.error('Error in handleEditTransactionProject:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Delete transaction
async function handleDeleteTransaction(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    // Get transaction details for confirmation
    let transaction;
    if (transactionType === 'expense') {
      transaction = await expenseService.findById(transactionId);
    } else {
      transaction = await incomeService.findById(transactionId);
    }

    if (!transaction || transaction.user_id !== user.id) {
      await bot.editMessageText('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Show confirmation
    const emoji = transactionType === 'expense' ? 'üì§' : 'üì•';
    const confirmText = `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏**

${emoji} ${transaction.description}
üíµ ${transaction.amount} ${transaction.currency}
üè∑Ô∏è ${transaction.category}

‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete:${transactionType}:${transactionId}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }
        ]
      ]
    };

    await bot.editMessageText(confirmText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    logger.error('Error in handleDeleteTransaction:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Confirm delete transaction
async function handleConfirmDelete(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    const [, transactionType, transactionId] = data.split(':');

    // Get transaction details
    let transaction;
    if (transactionType === 'expense') {
      transaction = await expenseService.findById(transactionId);
    } else {
      transaction = await incomeService.findById(transactionId);
    }

    if (!transaction || transaction.user_id !== user.id) {
      await bot.editMessageText('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    // Delete from database
    if (transactionType === 'expense') {
      await expenseService.delete(transactionId, user.id);
    } else {
      await incomeService.delete(transactionId, user.id);
    }

    // Update Google Sheets if connected
    try {
      if (transaction.project_id) {
        await googleSheetsService.deleteTransactionFromSheet(transaction, transaction.project_id, transactionType);
      }
    } catch (sheetsError) {
      logger.warn('Failed to delete from Google Sheets:', sheetsError);
    }

    const emoji = transactionType === 'expense' ? 'üì§' : 'üì•';
    await bot.editMessageText(
      `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞\n\n${emoji} ${transaction.description}\nüíµ ${transaction.amount} ${transaction.currency}`,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );

  } catch (error) {
    logger.error('Error in handleConfirmDelete:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Handle edit from analytics button
async function handleEditFromAnalytics(chatId, messageId, data, user) {
  const bot = getBot();

  try {
    // Extract limit from callback data: edit_from_analytics:15
    const [, limit] = data.split(':');
    const numLimit = parseInt(limit) || 3;

    // Clear any active states
    stateManager.clearState(chatId);

    // Get recent transactions
    const recentTransactions = await transactionService.getRecentTransactions(user.id, numLimit);

    if (recentTransactions.length === 0) {
      await bot.editMessageText(
        'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å.',
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
      return;
    }

    const keyboard = getRecentTransactionsKeyboard(recentTransactions);

    await bot.editMessageText(
      `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π**\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${recentTransactions.length}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );

  } catch (error) {
    logger.error('Error in handleEditFromAnalytics:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

module.exports = {
  handleCallback
};
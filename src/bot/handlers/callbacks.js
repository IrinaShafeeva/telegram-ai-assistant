const { userService, projectService, expenseService } = require('../../services/supabase');
const googleSheetsService = require('../../services/googleSheets');
const patternsService = require('../../services/patterns');
const { tempExpenses } = require('./messages');
const { 
  getCategorySelectionKeyboard, 
  getAmountSelectionKeyboard,
  getExpenseConfirmationKeyboard,
  getUpgradeKeyboard
} = require('../keyboards/inline');
const { getBot } = require('../../utils/bot');
const logger = require('../../utils/logger');

async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.from;
  const bot = getBot();

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    // Route callback to appropriate handler
    if (data.startsWith('save_expense:')) {
      await handleSaveExpense(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:')) {
      await handleEditCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_amount:')) {
      await handleEditAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:')) {
      await handleEditDescription(chatId, messageId, data, user);
    } else if (data.startsWith('set_category:')) {
      await handleSetCategory(chatId, messageId, data, user);
    } else if (data.startsWith('set_amount:')) {
      await handleSetAmount(chatId, messageId, data, user);
    } else if (data.startsWith('cancel_expense:')) {
      await handleCancelExpense(chatId, messageId, data);
    } else if (data.startsWith('back_to_confirmation:')) {
      await handleBackToConfirmation(chatId, messageId, data);
    } else if (data.startsWith('create_project')) {
      await handleCreateProject(chatId, user);
    } else if (data.startsWith('upgrade:')) {
      await handleUpgradeAction(chatId, messageId, data);
    } else if (data.startsWith('stats:')) {
      await handleStatsAction(chatId, messageId, data, user);
    } else if (data.startsWith('settings:')) {
      await handleSettingsAction(chatId, messageId, data, user);
    } else if (data.startsWith('switch_project:')) {
      await handleSwitchProject(chatId, messageId, data, user);
    } else if (data.startsWith('custom_category:')) {
      await handleCustomCategory(chatId, messageId, data, user);
    } else if (data.startsWith('custom_amount:')) {
      await handleCustomAmount(chatId, messageId, data, user);
    } else if (data === 'noop') {
      // Do nothing - pagination placeholder
    } else {
      logger.warn('Unknown callback data:', data);
    }
  } catch (error) {
    logger.error('Callback handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleSaveExpense(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Save expense to database
    const savedExpense = await expenseService.create(expenseData);

    // Add to Google Sheets
    await googleSheetsService.addExpenseToSheet(savedExpense, expenseData.project_id);

    // Update user patterns for smart defaults
    await patternsService.updateUserPatterns(
      user.id, 
      expenseData.description, 
      expenseData.category,
      expenseData.amount,
      expenseData.currency
    );

    // Get project name for confirmation
    const project = await projectService.findById(expenseData.project_id);

    const successText = `‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

üí∞ ${expenseData.description}: -${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}
üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets

üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats`;

    await bot.editMessageText(successText, {
      chat_id: chatId,
      message_id: messageId
    });

    // Remove temp data
    tempExpenses.delete(tempId);

  } catch (error) {
    logger.error('Save expense error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategory(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // TODO: Get user's custom categories if PRO
  const customCategories = [];

  await bot.editMessageText('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getCategorySelectionKeyboard(tempId, customCategories)
  });
}

async function handleEditAmount(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getAmountSelectionKeyboard(tempId)
  });
}

async function handleEditDescription(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  
  await bot.editMessageText('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId
  });

  // TODO: Set up state to wait for description input
  // This would require implementing a state machine or using session storage
}

async function handleSetCategory(chatId, messageId, data, user) {
  const [, tempId, category] = data.split(':');
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update category
  expenseData.category = category;
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleSetAmount(chatId, messageId, data, user) {
  const [, tempId, amount] = data.split(':');
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update amount
  expenseData.amount = parseFloat(amount);
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleBackToConfirmation(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Get project name
  const project = await projectService.findById(expenseData.project_id);

  const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

  await bot.editMessageText(confirmationText, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getExpenseConfirmationKeyboard(tempId)
  });
}

async function handleCancelExpense(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  tempExpenses.delete(tempId);

  await bot.editMessageText('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleCreateProject(chatId, user) {
  const bot = getBot();
  
  try {
    // Get user data
    const userData = await userService.findById(user.id);
    const userProjects = await projectService.findByUserId(user.id);

    // For FREE users, only allow 1 project
    if (!userData.is_premium && userProjects.length >= 1) {
      await bot.sendMessage(chatId, 
        '‚õî –õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\nüÜì FREE –ø–ª–∞–Ω: 1 –ø—Ä–æ–µ–∫—Ç\nüíé PRO –ø–ª–∞–Ω: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        { reply_markup: getUpgradeKeyboard() }
      );
      return;
    }

    // For PRO users, create additional projects
    const projectName = userProjects.length === 0 ? '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã' : `–ü—Ä–æ–µ–∫—Ç ${userProjects.length + 1}`;
    
    const newProject = await projectService.create({
      owner_id: user.id,
      name: projectName,
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
      is_active: false // New projects are inactive by default
    });

    await bot.sendMessage(chatId, 
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω!\n\nüìã –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ —á–µ—Ä–µ–∑ /projects –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n‚ú® –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç.`
    );
  } catch (error) {
    logger.error('Create project error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleUpgradeAction(chatId, messageId, data) {
  const action = data.split(':')[1];

  switch (action) {
    case 'pro':
      // Send Telegram Stars invoice
      try {
        const invoice = {
          title: 'üíé Expense Tracker PRO',
          description: 'üöÄ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!',
          payload: 'expense_tracker_pro_monthly',
          provider_token: '', // Empty for Telegram Stars
          currency: 'XTR', // Telegram Stars currency
          prices: [{ label: 'PRO –ø–ª–∞–Ω (1 –º–µ—Å—è—Ü)', amount: 100 }], // 100 Stars = ~$1-2
          photo_url: undefined,
          photo_size: undefined,
          photo_width: undefined,
          photo_height: undefined,
          need_name: false,
          need_phone_number: false,
          need_email: false,
          need_shipping_address: false,
          send_phone_number_to_provider: false,
          send_email_to_provider: false,
          is_flexible: false
        };

        await bot.sendInvoice(chatId, invoice);
        
        await bot.editMessageText(
          `üíé –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 Telegram Stars\nüí∞ –ü—Ä–∏–º–µ—Ä–Ω–æ: $1-2\n\n‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã PRO –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
          { chat_id: chatId, message_id: messageId }
        );
      } catch (error) {
        logger.error('Invoice creation error:', error);
        await bot.editMessageText(
          `üíé –û–ø–ª–∞—Ç–∞ PRO –ø–ª–∞–Ω–∞\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 Telegram Stars (~$1-2)\n\nüöß –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /devpro –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PRO —Ñ—É–Ω–∫—Ü–∏–π.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_bot`,
          { chat_id: chatId, message_id: messageId }
        );
      }
      break;
      
    case 'compare':
      const compareText = `üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤:

üÜì FREE:
‚úÖ 1 –ø—Ä–æ–µ–∫—Ç
‚úÖ 50 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü
‚úÖ 5 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–¥–µ–Ω—å
‚úÖ 9 –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚ùå –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üíé PRO ($7/–º–µ—Å—è—Ü):
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚úÖ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚úÖ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;

      await bot.editMessageText(compareText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
      
    case 'faq':
      const faqText = `‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã PRO:

Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
A: –ù–∞–ø–∏—à–∏—Ç–µ @support_bot

Q: –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
A: –î–∞, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ

Q: –°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ?
A: –î–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ FREE –ø–ª–∞–Ω–∞

Q: –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§?
A: –î–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @support_bot`;

      await bot.editMessageText(faqText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
  }
}

// Stats handlers
async function handleStatsAction(chatId, messageId, data, user) {
  const bot = getBot();
  const parts = data.split(':');
  const action = parts[1];
  
  try {
    const projects = await projectService.findByUserId(user.id);
    const activeProject = projects.find(p => p.is_active) || projects[0];
    
    if (!activeProject) {
      await bot.editMessageText('üìä –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    if (action === 'detailed') {
      // Detailed analytics
      await bot.editMessageText(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${activeProject.name}":\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!`, {
        chat_id: chatId,
        message_id: messageId
      });
    } else if (action === 'last3months') {
      // Last 3 months stats
      await bot.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!`, {
        chat_id: chatId,
        message_id: messageId
      });
    } else if (action === 'year') {
      // Yearly stats
      const year = parts[2];
      await bot.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${year} –≥–æ–¥:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!`, {
        chat_id: chatId,
        message_id: messageId
      });
    } else {
      // Monthly stats
      const month = parts[1];
      const year = parts[2];
      await bot.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${month}/${year}:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!`, {
        chat_id: chatId,
        message_id: messageId
      });
    }
  } catch (error) {
    logger.error('Stats action error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Settings handlers
async function handleSettingsAction(chatId, messageId, data, user) {
  const bot = getBot();
  const action = data.split(':')[1];
  
  try {
    switch (action) {
      case 'currency':
        await bot.editMessageText('üí± –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞–ª—é—Ç–∞ –∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
        
      case 'language':
        await bot.editMessageText('üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
        
      case 'export':
        await bot.editMessageText('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Sheets –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
        
      case 'notifications':
        await bot.editMessageText('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
        
      case 'delete_account':
        await bot.editMessageText('üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
    }
  } catch (error) {
    logger.error('Settings action error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Project switching
async function handleSwitchProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    // Deactivate all user's projects
    const projects = await projectService.findByUserId(user.id);
    for (const project of projects) {
      if (project.is_active) {
        await projectService.update(project.id, { is_active: false });
      }
    }
    
    // Activate selected project
    const selectedProject = await projectService.update(projectId, { is_active: true });
    
    await bot.editMessageText(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${selectedProject.name}"!\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    logger.error('Switch project error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Custom category (PRO feature)
async function handleCustomCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const userData = await userService.findById(user.id);
  
  if (!userData.is_premium) {
    await bot.editMessageText('üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getUpgradeKeyboard()
    });
    return;
  }
  
  await bot.editMessageText('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
    chat_id: chatId,
    message_id: messageId
  });
}

// Custom amount input
async function handleCustomAmount(chatId, messageId, data, user) {
  const bot = getBot();
  
  await bot.editMessageText('‚úèÔ∏è –í–≤–µ–¥–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å—É–º–º—ã:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.', {
    chat_id: chatId,
    message_id: messageId
  });
}

module.exports = {
  handleCallback
};
const { userService, projectService, expenseService, customCategoryService } = require('../../services/supabase');
const googleSheetsService = require('../../services/googleSheets');
const { tempExpenses } = require('./messages');
const { 
  getCategorySelectionKeyboard, 
  getAmountSelectionKeyboard,
  getExpenseConfirmationKeyboard,
  getProjectSelectionKeyboardForExpense,
  getUpgradeKeyboard
} = require('../keyboards/inline');
const { getBot } = require('../../utils/bot');
const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
const logger = require('../../utils/logger');

async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.user; // Should be set by withUserCallback middleware
  const bot = getBot();

  // Debug user data
  if (!user || !user.id) {
    logger.error('User data missing in callback:', { 
      hasUser: !!callbackQuery.user, 
      hasFrom: !!callbackQuery.from,
      fromId: callbackQuery.from?.id 
    });
    await bot.answerCallbackQuery(callbackQuery.id, { 
      text: '‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
      show_alert: true 
    });
    return;
  }

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    // Route callback to appropriate handler
    if (data.startsWith('set_currency_')) {
      await handleSetCurrency(chatId, messageId, data, callbackQuery.user);
    } else if (data.startsWith('change_currency_')) {
      await handleChangeCurrency(chatId, messageId, data, callbackQuery.user);
    } else if (data === 'back_to_settings') {
      await handleBackToSettings(chatId, messageId, callbackQuery.user);
    } else if (data.startsWith('save_expense:')) {
      await handleSaveExpense(chatId, messageId, data, user);
    } else if (data.startsWith('edit_category:')) {
      await handleEditCategory(chatId, messageId, data, user);
    } else if (data.startsWith('edit_amount:')) {
      await handleEditAmount(chatId, messageId, data, user);
    } else if (data.startsWith('edit_description:')) {
      await handleEditDescription(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project:')) {
      await handleEditProject(chatId, messageId, data, user);
    } else if (data.startsWith('set_project:')) {
      await handleSetProject(chatId, messageId, data, user);
    } else if (data.startsWith('set_category:')) {
      await handleSetCategory(chatId, messageId, data, user);
    } else if (data.startsWith('set_amount:')) {
      await handleSetAmount(chatId, messageId, data, user);
    } else if (data.startsWith('cancel_expense:')) {
      await handleCancelExpense(chatId, messageId, data);
    } else if (data.startsWith('back_to_confirmation:')) {
      await handleBackToConfirmation(chatId, messageId, data);
    } else if (data.startsWith('create_project')) {
      await handleCreateProject(chatId, user);
    } else if (data.startsWith('upgrade:')) {
      await handleUpgradeAction(chatId, messageId, data);
    } else if (data.startsWith('settings:')) {
      await handleSettingsAction(chatId, messageId, data, user);
    } else if (data.startsWith('switch_project:') || data.startsWith('activate_project:')) {
      await handleSwitchProject(chatId, messageId, data, user);
    } else if (data.startsWith('delete_project:')) {
      await handleDeleteProject(chatId, messageId, data, user);
    } else if (data.startsWith('edit_project_name:')) {
      await handleEditProjectName(chatId, messageId, data, user);
    } else if (data.startsWith('custom_category:')) {
      await handleCustomCategory(chatId, messageId, data, user);
    } else if (data.startsWith('custom_amount:')) {
      await handleCustomAmount(chatId, messageId, data, user);
    } else if (data === 'noop') {
      // Pagination placeholder - answer callback query to remove loading state
      await bot.answerCallbackQuery(callbackQuery.id, { text: '' });
      return;
    } else {
      logger.warn('Unknown callback data:', data);
    }
  } catch (error) {
    logger.error('Callback handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleSaveExpense(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Save expense to database
    const savedExpense = await expenseService.create(expenseData);

    // Try to add to Google Sheets (don't fail if this fails)
    let sheetsSuccess = false;
    try {
      await googleSheetsService.addExpenseToSheet(savedExpense, expenseData.project_id);
      sheetsSuccess = true;
    } catch (sheetsError) {
      logger.warn('Google Sheets sync failed but expense saved:', sheetsError.message);
    }

    // Get project name for confirmation
    const project = await projectService.findById(expenseData.project_id);

    const successText = `‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

üí∞ ${expenseData.description}: -${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}
${sheetsSuccess ? 'üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets' : 'üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets: –æ—à–∏–±–∫–∞ (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)'}

üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats`;

    await bot.editMessageText(successText, {
      chat_id: chatId,
      message_id: messageId
    });

    // Remove temp data
    tempExpenses.delete(tempId);

  } catch (error) {
    logger.error('Save expense error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleEditCategory(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Get user's custom categories if PRO
  let customCategories = [];
  if (user.is_premium) {
    try {
      customCategories = await customCategoryService.findByUserId(user.id);
    } catch (error) {
      logger.error('Error loading custom categories:', error);
    }
  }

  await bot.editMessageText('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getCategorySelectionKeyboard(tempId, customCategories)
  });
}

async function handleEditAmount(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  await bot.editMessageText('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getAmountSelectionKeyboard(tempId)
  });
}

async function handleEditDescription(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const bot = getBot();
  
  // Set state to wait for description input
  stateManager.setState(chatId, STATE_TYPES.WAITING_EXPENSE_DESCRIPTION, { 
    tempId,
    messageId 
  });
  
  await bot.editMessageText('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleEditProject(chatId, messageId, data, user) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);
  const bot = getBot();

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get user's projects
    logger.info(`User object:`, JSON.stringify(user, null, 2));
    logger.info(`Getting projects for user: ${user.id}`);
    const projects = await projectService.findByUserId(user.id);
    logger.info(`Found ${projects?.length || 0} projects for user ${user.id}`);
    
    if (!projects || projects.length === 0) {
      await bot.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    await bot.editMessageText('üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getProjectSelectionKeyboardForExpense(tempId, projects)
    });
  } catch (error) {
    logger.error('Error loading projects for expense:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSetProject(chatId, messageId, data, user) {
  const parts = data.split(':');
  const tempId = parts[1];
  const projectId = parts[2];
  const expenseData = tempExpenses.get(tempId);
  const bot = getBot();

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  try {
    // Get project info
    const project = await projectService.findById(projectId);
    if (!project) {
      throw new Error('Project not found');
    }

    // Update expense data
    expenseData.project_id = projectId;
    tempExpenses.set(tempId, expenseData);

    // Show updated confirmation
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}  
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!`;

    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getExpenseConfirmationKeyboard(tempId)
    });
  } catch (error) {
    logger.error('Error setting project for expense:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function handleSetCategory(chatId, messageId, data, user) {
  const parts = data.split(':');
  const tempId = parts[1];
  const category = parts.slice(2).join(':'); // Join back all parts after tempId
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update category
  expenseData.category = category;
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleSetAmount(chatId, messageId, data, user) {
  const parts = data.split(':');
  const tempId = parts[1];
  const amount = parts[2];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Update amount
  expenseData.amount = parseFloat(amount);
  tempExpenses.set(tempId, expenseData);

  await handleBackToConfirmation(chatId, messageId, `back_to_confirmation:${tempId}`);
}

async function handleBackToConfirmation(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  const expenseData = tempExpenses.get(tempId);

  if (!expenseData) {
    await bot.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // Get project name
  const project = await projectService.findById(expenseData.project_id);

  const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

  await bot.editMessageText(confirmationText, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: getExpenseConfirmationKeyboard(tempId)
  });
}

async function handleCancelExpense(chatId, messageId, data) {
  const tempId = data.split(':')[1];
  tempExpenses.delete(tempId);

  await bot.editMessageText('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.', {
    chat_id: chatId,
    message_id: messageId
  });
}

async function handleCreateProject(chatId, user) {
  const bot = getBot();
  
  try {
    // Get user data
    const userData = await userService.findById(user.id);
    const userProjects = await projectService.findByUserId(user.id);

    // For FREE users, only allow 1 project
    if (!userData.is_premium && userProjects.length >= 1) {
      await bot.sendMessage(chatId, 
        '‚õî –õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\nüÜì FREE –ø–ª–∞–Ω: 1 –ø—Ä–æ–µ–∫—Ç\nüíé PRO –ø–ª–∞–Ω: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        { reply_markup: getUpgradeKeyboard() }
      );
      return;
    }

    // For first project, create automatically
    if (userProjects.length === 0) {
      const newProject = await projectService.create({
        owner_id: user.id,
        name: '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
        is_active: true
      });

      await bot.sendMessage(chatId, 
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" —Å–æ–∑–¥–∞–Ω!\n\n‚ú® –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.`
      );
    } else {
      // For additional projects (PRO only), ask for name
      if (userData.is_premium) {
        stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_NAME, {});
        
        await bot.sendMessage(chatId, 
          'üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\nüìù –ü—Ä–∏–º–µ—Ä: "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏" –∏–ª–∏ "–†–∞–±–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"'
        );
      } else {
        await bot.sendMessage(chatId, 
          'üíé –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!',
          { reply_markup: getUpgradeKeyboard() }
        );
      }
    }
  } catch (error) {
    logger.error('Create project error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleUpgradeAction(chatId, messageId, data) {
  const action = data.split(':')[1];

  switch (action) {
    case 'pro_month':
      await createInvoice(chatId, messageId, {
        title: 'üíé Expense Tracker PRO (1 –º–µ—Å—è—Ü)',
        description: 'üöÄ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ 1 –º–µ—Å—è—Ü!',
        payload: 'expense_tracker_pro_1month',
        amount: 250,
        period: '1 –º–µ—Å—è—Ü',
        price: '$5'
      });
      break;
      
    case 'pro_6months':
      await createInvoice(chatId, messageId, {
        title: 'üíé Expense Tracker PRO (6 –º–µ—Å—è—Ü–µ–≤)',
        description: 'üöÄ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤! –≠–∫–æ–Ω–æ–º–∏—è $6!',
        payload: 'expense_tracker_pro_6months',
        amount: 1200,
        period: '6 –º–µ—Å—è—Ü–µ–≤',
        price: '$24 (—ç–∫–æ–Ω–æ–º–∏—è $6)'
      });
      break;
      
    case 'pro_year':
      await createInvoice(chatId, messageId, {
        title: 'üíé Expense Tracker PRO (1 –≥–æ–¥)',
        description: 'üöÄ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ü–µ–ª—ã–π –≥–æ–¥! –≠–∫–æ–Ω–æ–º–∏—è $20!',
        payload: 'expense_tracker_pro_1year',
        amount: 2000,
        period: '1 –≥–æ–¥',
        price: '$40 (—ç–∫–æ–Ω–æ–º–∏—è $20)'
      });
      break;
      
    case 'compare':
      const compareText = `üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤:

üÜì FREE:
‚úÖ 1 –ø—Ä–æ–µ–∫—Ç
‚úÖ 50 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü
‚úÖ 5 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–¥–µ–Ω—å
‚úÖ 9 –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚ùå –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üíé PRO ($7/–º–µ—Å—è—Ü):
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚úÖ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚úÖ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚úÖ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;

      await bot.editMessageText(compareText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
      
    case 'faq':
      const faqText = `‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã PRO:

Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
A: –ù–∞–ø–∏—à–∏—Ç–µ @support_bot

Q: –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
A: –î–∞, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ

Q: –°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ?
A: –î–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ FREE –ø–ª–∞–Ω–∞

Q: –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§?
A: –î–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @support_bot`;

      await bot.editMessageText(faqText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíé –ö—É–ø–∏—Ç—å PRO', callback_data: 'upgrade:pro' }
          ]]
        }
      });
      break;
  }
}


// Settings handlers
async function handleSettingsAction(chatId, messageId, data, user) {
  const bot = getBot();
  const action = data.split(':')[1];
  
  try {
    switch (action) {
      case 'currency':
        const currencyKeyboard = {
          inline_keyboard: [
            [
              { text: 'üá∑üá∫ –†—É–±–ª—å (RUB)', callback_data: 'change_currency_RUB' },
              { text: 'üá∫üá∏ –î–æ–ª–ª–∞—Ä (USD)', callback_data: 'change_currency_USD' }
            ],
            [
              { text: 'üá™üá∫ –ï–≤—Ä–æ (EUR)', callback_data: 'change_currency_EUR' },
              { text: 'üá¨üáß –§—É–Ω—Ç (GBP)', callback_data: 'change_currency_GBP' }
            ],
            [
              { text: 'üá∞üáø –¢–µ–Ω–≥–µ (KZT)', callback_data: 'change_currency_KZT' },
              { text: 'üá∫üá¶ –ì—Ä–∏–≤–Ω–∞ (UAH)', callback_data: 'change_currency_UAH' }
            ],
            [
              { text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_settings' }
            ]
          ]
        };
        
        await bot.editMessageText(
          `üí± –°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: ${user.primary_currency || 'USD'}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:`, 
          { chat_id: chatId, message_id: messageId, reply_markup: currencyKeyboard }
        );
        break;
        
      case 'export':
        await bot.editMessageText('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Sheets –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
          chat_id: chatId,
          message_id: messageId
        });
        break;
        
      case 'categories':
        if (!user.is_premium) {
          await bot.editMessageText('üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: getUpgradeKeyboard()
          });
        } else {
          // Show user's custom categories
          try {
            const categories = await customCategoryService.findByUserId(user.id);
            
            let message = 'üìÇ –í–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n';
            if (categories.length === 0) {
              message += '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚ûï –°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"';
            } else {
              categories.forEach((cat, index) => {
                message += `${index + 1}. ${cat.emoji} ${cat.name}\n`;
              });
              message += `\nüìä –í—Å–µ–≥–æ: ${categories.length}/50`;
            }
            
            await bot.editMessageText(message, {
              chat_id: chatId,
              message_id: messageId
            });
          } catch (error) {
            logger.error('Error loading categories:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', {
              chat_id: chatId,
              message_id: messageId
            });
          }
        }
        break;
    }
  } catch (error) {
    logger.error('Settings action error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Project switching
async function handleSwitchProject(chatId, messageId, data, user) {
  const bot = getBot();
  const projectId = data.split(':')[1];
  
  try {
    // Deactivate all user's projects
    const projects = await projectService.findByUserId(user.id);
    for (const project of projects) {
      if (project.is_active) {
        await projectService.update(project.id, { is_active: false });
      }
    }
    
    // Activate selected project
    const selectedProject = await projectService.update(projectId, { is_active: true });
    
    await bot.editMessageText(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${selectedProject.name}"!\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    logger.error('Switch project error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// Custom category (PRO feature)
async function handleCustomCategory(chatId, messageId, data, user) {
  const bot = getBot();
  const tempId = data.split(':')[1];
  
  if (!user.is_premium) {
    await bot.editMessageText('üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getUpgradeKeyboard()
    });
    return;
  }
  
  // Check limit for FREE vs PRO
  const categoryCount = await customCategoryService.getCountByUserId(user.id);
  const maxCategories = user.is_premium ? 50 : 10; // PRO can have 50, FREE would be 10 (but FREE can't create)
  
  if (categoryCount >= maxCategories) {
    await bot.editMessageText(`üìÇ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${maxCategories})\n\n–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ –ø–ª–∞–Ω–∞.`, {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }
  
  // Set state to wait for category name input
  stateManager.setState(chatId, STATE_TYPES.WAITING_CUSTOM_CATEGORY, { 
    tempId,
    messageId 
  });
  
  await bot.editMessageText('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏:\n\nüìù –ü—Ä–∏–º–µ—Ä: "üéÆ –ò–≥—Ä—ã" –∏–ª–∏ "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞"\n\nüí° –§–æ—Ä–º–∞—Ç: —ç–º–æ–¥–∑–∏ + –ø—Ä–æ–±–µ–ª + –Ω–∞–∑–≤–∞–Ω–∏–µ', {
    chat_id: chatId,
    message_id: messageId
  });
}

// Custom amount input
async function handleCustomAmount(chatId, messageId, data, user) {
  const bot = getBot();
  
  await bot.editMessageText('‚úèÔ∏è –í–≤–µ–¥–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å—É–º–º—ã:\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.', {
    chat_id: chatId,
    message_id: messageId
  });
}

// Helper function to create Telegram Stars invoice
async function createInvoice(chatId, messageId, options) {
  const bot = getBot();
  
  try {
    const invoice = {
      title: options.title,
      description: options.description,
      payload: options.payload,
      provider_token: '', // Empty for Telegram Stars
      currency: 'XTR', // Telegram Stars currency
      prices: [{ label: `PRO –ø–ª–∞–Ω (${options.period})`, amount: options.amount }],
      photo_url: undefined,
      photo_size: undefined,
      photo_width: undefined,
      photo_height: undefined,
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    };

    await bot.sendInvoice(chatId, invoice);
    
    await bot.editMessageText(
      `üíé –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: ${options.amount} Telegram Stars\nüí∞ ${options.price}\nüìÖ –ü–µ—Ä–∏–æ–¥: ${options.period}\n\n‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã PRO –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
      { chat_id: chatId, message_id: messageId }
    );
  } catch (error) {
    logger.error('Invoice creation error:', error);
    await bot.editMessageText(
      `üíé –û–ø–ª–∞—Ç–∞ PRO –ø–ª–∞–Ω–∞\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: ${options.amount} Telegram Stars (${options.price})\nüìÖ –ü–µ—Ä–∏–æ–¥: ${options.period}\n\nüöß –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /devpro –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PRO —Ñ—É–Ω–∫—Ü–∏–π.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_bot`,
      { chat_id: chatId, message_id: messageId }
    );
  }
}

async function handleSetCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  
  try {
    const currency = data.replace('set_currency_', '');
    
    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });
    
    const currencyNames = {
      'RUB': '–†—É–±–ª—å',
      'USD': '–î–æ–ª–ª–∞—Ä',
      'EUR': '–ï–≤—Ä–æ', 
      'GBP': '–§—É–Ω—Ç',
      'KZT': '–¢–µ–Ω–≥–µ',
      'UAH': '–ì—Ä–∏–≤–Ω–∞'
    };
    
    await bot.editMessageText(
      `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currencyNames[currency]} (${currency})\n\n‚ú® –°–æ–∑–¥–∞—é –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç...`,
      { chat_id: chatId, message_id: messageId }
    );
    
    // Create first project automatically
    const project = await projectService.create({
      owner_id: user.id,
      name: '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
      is_active: true
    });

    const { getMainMenuKeyboard } = require('../keyboards/reply');
    await bot.sendMessage(chatId, 
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" —Å–æ–∑–¥–∞–Ω!

‚ú® –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect [ID_—Ç–∞–±–ª–∏—Ü—ã]`,
      { reply_markup: getMainMenuKeyboard() }
    );
    
  } catch (error) {
    logger.error('Set currency error:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { chat_id: chatId, message_id: messageId }
    );
  }
}

async function handleChangeCurrency(chatId, messageId, data, user) {
  const bot = getBot();
  
  try {
    const currency = data.replace('change_currency_', '');
    
    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });
    
    const currencyNames = {
      'RUB': '–†—É–±–ª—å',
      'USD': '–î–æ–ª–ª–∞—Ä',
      'EUR': '–ï–≤—Ä–æ', 
      'GBP': '–§—É–Ω—Ç',
      'KZT': '–¢–µ–Ω–≥–µ',
      'UAH': '–ì—Ä–∏–≤–Ω–∞'
    };
    
    await bot.editMessageText(
      `‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${currencyNames[currency]} (${currency})\n\n–¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`,
      { chat_id: chatId, message_id: messageId, reply_markup: { 
        inline_keyboard: [[{ text: '‚Üê –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]]
      }}
    );
    
  } catch (error) {
    logger.error('Change currency error:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { chat_id: chatId, message_id: messageId }
    );
  }
}

async function handleBackToSettings(chatId, messageId, user) {
  const bot = getBot();
  const { getSettingsKeyboard } = require('../keyboards/inline');
  
  try {
    const settingsText = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.username ? `(@${user.username})` : ''}
üí± –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${user.primary_currency || 'USD'}
üåê –Ø–∑—ã–∫: ${user.language_code === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}
üíé –ü–ª–∞–Ω: ${user.is_premium ? 'PRO' : 'FREE'}

${user.is_premium ? '' : 'üíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!'}`;

    await bot.editMessageText(settingsText, {
      chat_id: chatId, 
      message_id: messageId,
      reply_markup: getSettingsKeyboard()
    });
  } catch (error) {
    logger.error('Back to settings error:', error);
  }
}

module.exports = {
  handleCallback
};
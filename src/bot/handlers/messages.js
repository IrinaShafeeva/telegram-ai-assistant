const { userService, projectService, expenseService, customCategoryService } = require('../../services/supabase');
const openaiService = require('../../services/openai');
const googleSheetsService = require('../../services/googleSheets');
const analyticsService = require('../../services/analytics');
const { getExpenseConfirmationKeyboard } = require('../keyboards/inline');
const { getMainMenuKeyboard, getCurrencyKeyboard } = require('../keyboards/reply');
const { SUPPORTED_CURRENCIES } = require('../../config/constants');
const { getBot } = require('../../utils/bot');
const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
const logger = require('../../utils/logger');
const { v4: uuidv4 } = require('uuid');

// Store temporary expense data
const tempExpenses = new Map();

async function handleText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  // Skip if it's a command
  if (text.startsWith('/')) return;

  try {
    // Check if user has active state
    const userState = stateManager.getState(chatId);
    if (userState) {
      await handleStateInput(msg, userState);
      return;
    }

    // Handle currency selection during onboarding
    if (text.includes('üá∑üá∫') || text.includes('üá∫üá∏') || text.includes('üá™üá∫') || 
        SUPPORTED_CURRENCIES.some(curr => text.includes(curr))) {
      await handleCurrencySelection(msg);
      return;
    }

    // Handle main menu buttons
    if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      return require('./commands').handleStats(msg);
    }
    if (text === 'üìã –ü—Ä–æ–µ–∫—Ç—ã') {
      return require('./commands').handleProjects(msg);
    }
    if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
      return require('./commands').handleSettings(msg);
    }
    if (text === 'üíé PRO –ø–ª–∞–Ω') {
      return require('./commands').handleUpgrade(msg);
    }
    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      return require('./commands').handleHelp(msg);
    }

    // Check if it's an analytics question
    if (await isAnalyticsQuestion(text)) {
      await handleAnalyticsQuestion(msg);
      return;
    }

    // Try to parse as expense
    await handleExpenseText(msg);
  } catch (error) {
    logger.error('Text handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleCurrencySelection(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Extract currency code  
    let currency = user.primary_currency || 'RUB';
    for (const curr of SUPPORTED_CURRENCIES) {
      if (text.includes(curr)) {
        currency = curr;
        break;
      }
    }

    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });

    await bot.sendMessage(chatId, 
      `‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currency}\n\n–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.`,
      { reply_markup: { remove_keyboard: true } }
    );

    // Auto-create first project
    await createFirstProject(chatId, user, currency);
  } catch (error) {
    logger.error('Currency selection error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã.');
  }
}

async function createFirstProject(chatId, user, currency) {
  const bot = getBot();
  try {
    // Create first project
    const project = await projectService.create({
      owner_id: user.id,
      name: '–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã',
      description: '–ú–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
      is_active: true
    });

    await bot.sendMessage(chatId, 
      `üéâ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" —Å–æ–∑–¥–∞–Ω!

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /connect [ID_—Ç–∞–±–ª–∏—Ü—ã]

‚ú® –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.`,
      { reply_markup: getMainMenuKeyboard() }
    );

  } catch (error) {
    logger.error('First project creation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
  }
}

async function handleExpenseText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Try to find project by keywords first, then fallback to active project
    const detectedProject = await projectService.findProjectByKeywords(user.id, text);
    const activeProject = detectedProject;

    if (!activeProject) {
      await bot.sendMessage(chatId, 
        'üìã –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' }
            ]]
          }
        }
      );
      return;
    }

    await bot.sendMessage(chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ä–∞—Å—Ö–æ–¥...');

    // Parse expense with AI
    const parsedExpense = await openaiService.parseExpense(text);

    // Use user's primary currency if not specified
    if (!parsedExpense.currency) {
      parsedExpense.currency = user.primary_currency;
    }

    // Generate temporary expense ID for confirmation
    const tempId = uuidv4();
    const expenseData = {
      user_id: user.id,
      project_id: activeProject.id,
      amount: parsedExpense.amount,
      currency: parsedExpense.currency,
      category: parsedExpense.category || '–ü—Ä–æ—á–µ–µ',
      description: parsedExpense.description,
      expense_date: new Date().toISOString().split('T')[0]
    };

    // Store temporarily
    tempExpenses.set(tempId, expenseData);

    // Show confirmation
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${activeProject.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.sendMessage(chatId, confirmationText, {
      reply_markup: getExpenseConfirmationKeyboard(tempId)
    });

    // Auto-expire temp expense after 5 minutes
    setTimeout(() => {
      tempExpenses.delete(tempId);
    }, 5 * 60 * 1000);

  } catch (error) {
    logger.error('Expense text processing error:', error);
    await bot.sendMessage(chatId, 
      `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —è—Å–Ω–µ–µ.'}\n\nüí° –ü—Ä–∏–º–µ—Ä: "–∫–æ—Ñ–µ 200 —Ä—É–±–ª–µ–π"`
    );
  }
}

async function isAnalyticsQuestion(text) {
  const lowerText = text.toLowerCase();
  
  // Strong analytics indicators (questions, not expenses)
  const strongIndicators = [
    '—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç', '—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç', '—Å–∫–æ–ª—å–∫–æ –Ω–∞', '—Å–∫–æ–ª—å–∫–æ –∑–∞',
    '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
    '–≥–¥–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—á—É',
    '–æ—Ç—á–µ—Ç', '–∏—Ç–æ–≥–æ', '–æ–±—â–∞—è —Å—É–º–º–∞', '—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫'
  ];
  
  // Check for strong indicators first
  if (strongIndicators.some(indicator => lowerText.includes(indicator))) {
    return true;
  }
  
  // Question patterns with money keywords
  const hasQuestionWord = ['—Å–∫–æ–ª—å–∫–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫–∞–∫ –º–Ω–æ–≥–æ', '—á—Ç–æ'].some(q => lowerText.includes(q));
  const hasMoneyContext = ['–ø–æ—Ç—Ä–∞—Ç', '—Ç—Ä–∞—Ç', '—Ä–∞—Å—Ö–æ–¥', '–¥–µ–Ω—å–≥', '—Ä—É–±–ª', '–µ–≤—Ä–æ', '–¥–æ–ª–ª–∞—Ä'].some(m => lowerText.includes(m));
  
  return hasQuestionWord && hasMoneyContext;
}

async function handleAnalyticsQuestion(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const question = msg.text;
  const bot = getBot();

  try {
    await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã...');
    
    const analysis = await analyticsService.askAIAnalytics(user.id, question);
    await bot.sendMessage(chatId, analysis);
    
  } catch (error) {
    logger.error('Analytics question error:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.'}`);
  }
}

// Handle input when user is in a state
async function handleStateInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  
  try {
    switch (userState.type) {
      case STATE_TYPES.WAITING_EXPENSE_DESCRIPTION:
        await handleDescriptionInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CUSTOM_CATEGORY:
        await handleCustomCategoryInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME:
        await handleProjectNameInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_KEYWORDS:
        await handleProjectKeywordsInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_GOOGLE_SHEETS_LINK:
        await handleGoogleSheetsLinkInput(msg, userState);
        break;
        
      default:
        logger.warn(`Unknown state type: ${userState.type}`);
        stateManager.clearState(chatId);
    }
  } catch (error) {
    logger.error('Error handling state input:', error);
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// Handle description input for expense
async function handleDescriptionInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { tempId, messageId } = userState.data;
  
  if (text.length < 1) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    return;
  }
  
  if (text.length > 100) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).');
    return;
  }
  
  // Update expense data
  const expenseData = tempExpenses.get(tempId);
  if (expenseData) {
    expenseData.description = text;
    tempExpenses.set(tempId, expenseData);
    
    // Update the confirmation message
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}

‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`;
    
    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getExpenseConfirmationKeyboard(tempId)
    });
  } else {
    await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Placeholder functions for other state types
async function handleCustomCategoryInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { tempId, messageId } = userState.data;
  
  // Validate format: emoji + space + name
  const emojiRegex = /^(\p{Emoji_Presentation}|\p{Emoji}\uFE0F|\p{Extended_Pictographic})\s+(.+)$/u;
  const match = text.match(emojiRegex);
  
  if (!match) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\nüìù –ù—É–∂–Ω–æ: —ç–º–æ–¥–∑–∏ + –ø—Ä–æ–±–µ–ª + –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: "üéÆ –ò–≥—Ä—ã"');
    return;
  }
  
  const emoji = match[1];
  const name = match[2].trim();
  
  if (name.length < 2 || name.length > 20) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if category already exists
    const existing = await customCategoryService.findByUserIdAndName(user.id, name);
    if (existing) {
      await bot.sendMessage(chatId, `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // Create new category
    const category = await customCategoryService.create({
      user_id: user.id,
      name: name,
      emoji: emoji
    });
    
    // Update expense with new category
    const expenseData = tempExpenses.get(tempId);
    if (expenseData) {
      expenseData.category = name;
      tempExpenses.set(tempId, expenseData);
      
      // Update the confirmation message
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${emoji} ${expenseData.category}

‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —Å–æ–∑–¥–∞–Ω–∞!`;
      
      const { getCategorySelectionKeyboard, getExpenseConfirmationKeyboard } = require('../keyboards/inline');
      
      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getExpenseConfirmationKeyboard(tempId)
      });
    } else {
      await bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${emoji} ${name}" —Å–æ–∑–¥–∞–Ω–∞!\n\n‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.`);
    }
    
  } catch (error) {
    logger.error('Error creating custom category:', error);
    if (error.code === '23505') { // Unique constraint violation
      await bot.sendMessage(chatId, `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
    } else {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

async function handleProjectNameInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if project name already exists for this user
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // Ask for keywords
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_KEYWORDS, { projectName: text });
    
    await bot.sendMessage(chatId, 
      `üìù –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–µ–∫—Ç "${text}" –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤.\n\nüîç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–ª —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–∞, –º–∞—à–µ–Ω—å–∫–∞, –¥–æ—á–∫–∞, —Ä–µ–±–µ–Ω–æ–∫" –∏–ª–∏ "—Ä–∞–±–æ—Ç–∞, –æ—Ñ–∏—Å, –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"\n\n‚úÖ –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"`
    );
    
  } catch (error) {
    logger.error('Error in project creation step:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    stateManager.clearState(chatId);
  }
}

// Handle project keywords input
async function handleProjectKeywordsInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { projectName } = userState.data;
  
  try {
    let keywords = null;
    
    if (text !== '-' && text.length > 0) {
      // Validate keywords (allow letters, spaces, commas, and common punctuation)
      if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s,.-]+$/.test(text)) {
        await bot.sendMessage(chatId, '‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ!');
        return;
      }
      
      keywords = text;
    }
    
    // Create project with keywords
    const projectData = {
      owner_id: user.id,
      name: projectName,
      description: `–ü—Ä–æ–µ–∫—Ç "${projectName}" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤`,
      is_active: false // New projects are inactive by default
    };
    
    // Add keywords only if provided and DB supports it
    if (keywords) {
      projectData.keywords = keywords;
    }
    
    const newProject = await projectService.create(projectData);
    
    const keywordsText = keywords ? 
      `\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords}\n\n‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —ç—Ç–∏—Ö —Å–ª–æ–≤ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç!` : 
      `\nüìù –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–æ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏.`;
    
    // Check if user has any Google Sheets connected and create worksheet automatically
    let sheetText = '';
    try {
      const userProjects = await projectService.findByUserId(user.id);
      const connectedProject = userProjects.find(p => p.google_sheet_id);
      
      if (connectedProject && connectedProject.google_sheet_id) {
        const googleSheetsService = require('../../services/googleSheets');
        await googleSheetsService.createWorksheet(connectedProject.google_sheet_id, projectName);
        
        // Update new project with same Google Sheets ID to share the spreadsheet
        await projectService.update(newProject.id, {
          google_sheet_id: connectedProject.google_sheet_id
        });
        
        sheetText = `\n\nüìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ª–∏—Å—Ç "${projectName}" –≤ –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü–µ!`;
      }
    } catch (error) {
      logger.error('Error creating worksheet for project:', error);
      // Don't fail project creation if worksheet creation fails
    }
    
    await bot.sendMessage(chatId, 
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω!${keywordsText}${sheetText}\n\nüìã –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ —á–µ—Ä–µ–∑ /projects –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.`
    );
    
  } catch (error) {
    logger.error('Error creating project with keywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Handle Google Sheets link input
async function handleGoogleSheetsLinkInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  
  try {
    // Extract Google Sheets ID from URL
    const urlRegex = /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/;
    const match = text.match(urlRegex);
    
    if (!match) {
      await bot.sendMessage(chatId, 
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\nhttps://docs.google.com/spreadsheets/d/1A2B3C.../edit\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É.'
      );
      return;
    }
    
    const sheetId = match[1];
    
    // Get user's active project
    const projects = await projectService.findByUserId(user.id);
    const activeProject = projects.find(p => p.is_active) || projects[0];
    
    if (!activeProject) {
      await bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.');
      stateManager.clearState(chatId);
      return;
    }
    
    // Update project with Google Sheets ID
    await projectService.update(activeProject.id, {
      google_sheet_id: sheetId
    });
    
    await bot.sendMessage(chatId, 
      `‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É "${activeProject.name}"!\n\nüìä –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ç–∞–±–ª–∏—Ü–µ–π.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.`
    );
    
  } catch (error) {
    logger.error('Error connecting Google Sheets:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Export temp expenses store for callback handlers
module.exports = {
  handleText,
  tempExpenses,
  handleCurrencySelection,
  createFirstProject,
  handleExpenseText
};
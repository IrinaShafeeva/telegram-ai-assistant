const { userService, projectService, expenseService } = require('../../services/supabase');
const openaiService = require('../../services/openai');
const googleSheetsService = require('../../services/googleSheets');
const patternsService = require('../../services/patterns');
const analyticsService = require('../../services/analytics');
const { getExpenseConfirmationKeyboard } = require('../keyboards/inline');
const { getMainMenuKeyboard, getCurrencyKeyboard } = require('../keyboards/reply');
const { SUPPORTED_CURRENCIES } = require('../../config/constants');
const { getBot } = require('../../utils/bot');
const logger = require('../../utils/logger');
const { v4: uuidv4 } = require('uuid');

// Store temporary expense data
const tempExpenses = new Map();

async function handleText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  // Skip if it's a command
  if (text.startsWith('/')) return;

  try {
    // Handle currency selection during onboarding
    if (text.includes('üá∑üá∫') || text.includes('üá∫üá∏') || text.includes('üá™üá∫') || 
        SUPPORTED_CURRENCIES.some(curr => text.includes(curr))) {
      await handleCurrencySelection(msg);
      return;
    }

    // Handle main menu buttons
    if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      return require('./commands').handleStats(msg);
    }
    if (text === 'üìã –ü—Ä–æ–µ–∫—Ç—ã') {
      return require('./commands').handleProjects(msg);
    }
    if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
      return require('./commands').handleSettings(msg);
    }
    if (text === 'üíé PRO –ø–ª–∞–Ω') {
      return require('./commands').handleUpgrade(msg);
    }
    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      return require('./commands').handleHelp(msg);
    }

    // Check if it's an analytics question
    if (await isAnalyticsQuestion(text)) {
      await handleAnalyticsQuestion(msg);
      return;
    }

    // Try to parse as expense
    await handleExpenseText(msg);
  } catch (error) {
    logger.error('Text handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleCurrencySelection(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Extract currency code  
    let currency = user.primary_currency || 'RUB';
    for (const curr of SUPPORTED_CURRENCIES) {
      if (text.includes(curr)) {
        currency = curr;
        break;
      }
    }

    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });

    await bot.sendMessage(chatId, 
      `‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currency}\n\n–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.`,
      { reply_markup: { remove_keyboard: true } }
    );

    // Auto-create first project
    await createFirstProject(chatId, user, currency);
  } catch (error) {
    logger.error('Currency selection error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã.');
  }
}

async function createFirstProject(chatId, user, currency) {
  const bot = getBot();
  try {
    // Create first project
    const project = await projectService.create({
      owner_id: user.id,
      name: '–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã',
      description: '–ú–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
      is_active: true
    });

    await bot.sendMessage(chatId, 
      `üéâ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" —Å–æ–∑–¥–∞–Ω!

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /connect [ID_—Ç–∞–±–ª–∏—Ü—ã]

‚ú® –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.`,
      { reply_markup: getMainMenuKeyboard() }
    );

  } catch (error) {
    logger.error('First project creation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
  }
}

async function handleExpenseText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Get user's active project
    const projects = await projectService.findByUserId(user.id);
    const activeProject = projects.find(p => p.is_active) || projects[0];

    if (!activeProject) {
      await bot.sendMessage(chatId, 
        'üìã –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' }
            ]]
          }
        }
      );
      return;
    }

    // Get user patterns for smart suggestions
    const userPatterns = await patternsService.getUserPatterns(user.id);

    await bot.sendMessage(chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ä–∞—Å—Ö–æ–¥...');

    // Parse expense with AI
    const parsedExpense = await openaiService.parseExpense(text, userPatterns);

    // Apply smart defaults if category not detected
    if (!parsedExpense.category) {
      const suggestion = await openaiService.generateSmartSuggestions(parsedExpense.description, userPatterns);
      if (suggestion) {
        parsedExpense.category = suggestion.category;
        if (!parsedExpense.currency) {
          parsedExpense.currency = suggestion.currency;
        }
        if (!parsedExpense.amount || parsedExpense.amount === 0) {
          parsedExpense.amount = suggestion.amount;
        }
      }
    }

    // Use user's primary currency if not specified
    if (!parsedExpense.currency) {
      parsedExpense.currency = user.primary_currency;
    }

    // Generate temporary expense ID for confirmation
    const tempId = uuidv4();
    const expenseData = {
      user_id: user.id,
      project_id: activeProject.id,
      amount: parsedExpense.amount,
      currency: parsedExpense.currency,
      category: parsedExpense.category || '–ü—Ä–æ—á–µ–µ',
      description: parsedExpense.description,
      expense_date: new Date().toISOString().split('T')[0]
    };

    // Store temporarily
    tempExpenses.set(tempId, expenseData);

    // Show confirmation
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${activeProject.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.sendMessage(chatId, confirmationText, {
      reply_markup: getExpenseConfirmationKeyboard(tempId)
    });

    // Auto-expire temp expense after 5 minutes
    setTimeout(() => {
      tempExpenses.delete(tempId);
    }, 5 * 60 * 1000);

  } catch (error) {
    logger.error('Expense text processing error:', error);
    await bot.sendMessage(chatId, 
      `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —è—Å–Ω–µ–µ.'}\n\nüí° –ü—Ä–∏–º–µ—Ä: "–∫–æ—Ñ–µ 200 —Ä—É–±–ª–µ–π"`
    );
  }
}

async function isAnalyticsQuestion(text) {
  const lowerText = text.toLowerCase();
  
  // Strong analytics indicators (questions, not expenses)
  const strongIndicators = [
    '—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç', '—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç', '—Å–∫–æ–ª—å–∫–æ –Ω–∞', '—Å–∫–æ–ª—å–∫–æ –∑–∞',
    '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
    '–≥–¥–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—á—É',
    '–æ—Ç—á–µ—Ç', '–∏—Ç–æ–≥–æ', '–æ–±—â–∞—è —Å—É–º–º–∞', '—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫'
  ];
  
  // Check for strong indicators first
  if (strongIndicators.some(indicator => lowerText.includes(indicator))) {
    return true;
  }
  
  // Question patterns with money keywords
  const hasQuestionWord = ['—Å–∫–æ–ª—å–∫–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫–∞–∫ –º–Ω–æ–≥–æ', '—á—Ç–æ'].some(q => lowerText.includes(q));
  const hasMoneyContext = ['–ø–æ—Ç—Ä–∞—Ç', '—Ç—Ä–∞—Ç', '—Ä–∞—Å—Ö–æ–¥', '–¥–µ–Ω—å–≥', '—Ä—É–±–ª', '–µ–≤—Ä–æ', '–¥–æ–ª–ª–∞—Ä'].some(m => lowerText.includes(m));
  
  return hasQuestionWord && hasMoneyContext;
}

async function handleAnalyticsQuestion(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const question = msg.text;
  const bot = getBot();

  try {
    await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã...');
    
    const analysis = await analyticsService.askAIAnalytics(user.id, question);
    await bot.sendMessage(chatId, analysis);
    
  } catch (error) {
    logger.error('Analytics question error:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.'}`);
  }
}

// Export temp expenses store for callback handlers
module.exports = {
  handleText,
  tempExpenses,
  handleCurrencySelection,
  createFirstProject,
  handleExpenseText
};
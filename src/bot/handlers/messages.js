const { userService, projectService, expenseService, customCategoryService, incomeService } = require('../../services/supabase');
const openaiService = require('../../services/openai');
const googleSheetsService = require('../../services/googleSheets');
const analyticsService = require('../../services/analytics');
const userContextService = require('../../services/userContext');
const { getExpenseConfirmationKeyboard, getIncomeConfirmationKeyboard } = require('../keyboards/inline');
const { getMainMenuKeyboard, getCurrencyKeyboard } = require('../keyboards/reply');
const { SUPPORTED_CURRENCIES } = require('../../config/constants');
const { getBot } = require('../../utils/bot');
const { stateManager, STATE_TYPES } = require('../../utils/stateManager');
const { shortTransactionMap } = require('./callbacks');
const logger = require('../../utils/logger');
const { v4: uuidv4 } = require('uuid');

// Function to detect currency based on language and text content
function detectCurrencyByLanguage(text, languageCode) {
  const textLower = text.toLowerCase();

  // Check for specific currency mentions in text
  if (textLower.includes('—Ä—É–±') || textLower.includes('—Ä—É–±–ª')) return 'RUB';
  if (textLower.includes('–¥–æ–ª–ª') || textLower.includes('usd') || textLower.includes('$')) return 'USD';
  if (textLower.includes('–µ–≤—Ä–æ') || textLower.includes('eur') || textLower.includes('‚Ç¨')) return 'EUR';

  // Fallback to language-based detection
  if (languageCode === 'ru' || !languageCode) return 'RUB';
  if (languageCode === 'en') return 'USD';
  if (languageCode === 'de' || languageCode === 'fr' || languageCode === 'es' || languageCode === 'it') return 'EUR';

  // Default fallback
  return 'USD';
}

// Store temporary expense data
const tempExpenses = new Map();
// Store temporary income data
const tempIncomes = new Map();

async function handleText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  // Skip if it's a command
  if (text.startsWith('/')) return;

  try {
    // Check if user has active state
    const userState = stateManager.getState(chatId);
    logger.info(`üîç Checking user state for ${chatId}: ${userState ? userState.type : 'NO_STATE'}`);
    if (userState) {
      // Special case: if user is editing project name but input looks like a transaction, clear state and process as transaction
      if (userState.type === 'WAITING_PROJECT_NAME_EDIT' && /\d/.test(text)) {
        logger.info(`üîÑ User in project edit state but input "${text}" looks like transaction, clearing state`);
        stateManager.clearState(chatId);
        // Continue to transaction processing below
      } else {
        logger.info(`üéØ Found state: ${userState.type}, calling handleStateInput`);
        await handleStateInput(msg, userState);
        return;
      }
    }

    // Handle currency selection during onboarding
    if (text.includes('üá∑üá∫') || text.includes('üá∫üá∏') || text.includes('üá™üá∫') || 
        SUPPORTED_CURRENCIES.some(curr => text.includes(curr))) {
      await handleCurrencySelection(msg);
      return;
    }

    // Handle main menu buttons - clear any existing state first
    if (text === 'üìã –ü—Ä–æ–µ–∫—Ç—ã') {
      stateManager.clearState(chatId);
      return require('./commands').handleProjects(msg);
    }
    if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
      stateManager.clearState(chatId);
      return require('./commands').handleSettings(msg);
    }
    if (text === 'üíé PRO –ø–ª–∞–Ω') {
      stateManager.clearState(chatId);
      return require('./commands').handleUpgrade(msg);
    }
    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      stateManager.clearState(chatId);
      return require('./commands').handleHelp(msg);
    }

    // Handle sync command
    if (text.toLowerCase() === '—Å–∏–Ω–∫' || text.toLowerCase() === 'sync') {
      await handleSyncCommand(msg);
      return;
    }

    // Check if it's an analytics question
    if (await isAnalyticsQuestion(text)) {
      await handleAnalyticsQuestion(msg);
      return;
    }

    // Try to parse as expense
    await handleExpenseText(msg);
  } catch (error) {
    logger.error('Text handling error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleCurrencySelection(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Extract currency code  
    let currency = user.primary_currency || detectCurrencyByLanguage(text, user.language_code);
    for (const curr of SUPPORTED_CURRENCIES) {
      if (text.includes(curr)) {
        currency = curr;
        break;
      }
    }

    // Update user's primary currency
    await userService.update(user.id, { primary_currency: currency });

    await bot.sendMessage(chatId, 
      `‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${currency}\n\n–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.`,
      { reply_markup: { remove_keyboard: true } }
    );

    // Auto-create first project
    await createFirstProject(chatId, user, currency);
  } catch (error) {
    logger.error('Currency selection error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã.');
  }
}

async function createFirstProject(chatId, user, currency) {
  const bot = getBot();
  try {
    // Create first project
    const project = await projectService.create({
      owner_id: user.id,
      name: '–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã',
      description: '–ú–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
      is_active: true
    });

    await bot.sendMessage(chatId, 
      `üéâ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã" —Å–æ–∑–¥–∞–Ω!

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /connect

‚ú® –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.`,
      { reply_markup: getMainMenuKeyboard() }
    );

  } catch (error) {
    logger.error('First project creation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
  }
}

async function handleExpenseText(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const text = msg.text;
  const bot = getBot();

  try {
    // Get user context for AI (custom categories and projects with keywords)
    const userContext = await userContextService.getUserContext(user.id);

    // Parse transaction first to determine if it's income or expense
    const processingMessage = await bot.sendMessage(chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const parsedTransaction = await openaiService.parseTransaction(text, userContext);

    // Apply user's default currency if no currency was detected or if OpenAI defaulted to RUB but user has different preference
    const originalCurrency = parsedTransaction.currency;
    if (!parsedTransaction.currency || (parsedTransaction.currency === 'RUB' && user.primary_currency && user.primary_currency !== 'RUB')) {
      if (user.primary_currency) {
        parsedTransaction.currency = user.primary_currency;
        logger.info(`üí± Using user default currency: ${parsedTransaction.currency} (was: ${originalCurrency || 'null'})`);
      } else {
        // Determine currency by language/text content
        parsedTransaction.currency = detectCurrencyByLanguage(text, user.language_code);
        logger.info(`üí± No currency detected, detected by language: ${parsedTransaction.currency}`);
      }
    }

    // Determine target project: use AI suggested project or fallback logic
    let activeProject = null;

    // First try to use AI-suggested project
    if (parsedTransaction.project) {
      logger.info(`ü§ñ AI suggested project: "${parsedTransaction.project}"`);
      const projects = await projectService.findByUserId(user.id);
      activeProject = projects.find(p => p.name === parsedTransaction.project);

      if (activeProject) {
        logger.info(`‚úÖ Found AI-suggested project: ${activeProject.name} (ID: ${activeProject.id})`);
      } else {
        logger.warn(`‚ö†Ô∏è AI-suggested project "${parsedTransaction.project}" not found`);
      }
    }

    // If AI couldn't determine project, ask user to choose
    if (!activeProject) {
      const projects = await projectService.findByUserId(user.id);

      if (projects.length === 0) {
        await bot.editMessageText('üìã –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.', {
          chat_id: chatId,
          message_id: processingMessage.message_id,
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' }
            ]]
          }
        });
        return;
      }

      // Store transaction temporarily and ask user to select project
      const tempId = uuidv4();
      const transactionData = {
        user_id: user.id,
        amount: parsedTransaction.amount,
        currency: parsedTransaction.currency,
        category: parsedTransaction.category || (
          parsedTransaction.type === 'income' ? '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã' : '–ü—Ä–æ—á–µ–µ'
        ),
        description: parsedTransaction.description,
        expense_date: new Date().toISOString().split('T')[0],
        income_date: new Date().toISOString().split('T')[0],
        type: parsedTransaction.type
      };

      if (parsedTransaction.type === 'income') {
        tempIncomes.set(tempId, transactionData);
      } else {
        tempExpenses.set(tempId, transactionData);
      }

      // Auto-expire after 5 minutes
      setTimeout(() => {
        if (parsedTransaction.type === 'income') {
          tempIncomes.delete(tempId);
        } else {
          tempExpenses.delete(tempId);
        }
      }, 5 * 60 * 1000);

      const { getProjectSelectionForTransactionKeyboard } = require('../keyboards/inline');

      // Store mapping for short transaction ID
      const shortId = tempId.substring(0, 8);
      shortTransactionMap.set(shortId, {
        fullTransactionId: tempId,
        projects: projects
      });

      await bot.editMessageText(`ü§ñ –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${parsedTransaction.description}
üíµ **–°—É–º–º–∞:** ${parsedTransaction.amount} ${parsedTransaction.currency}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${transactionData.category}

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:`, {
        chat_id: chatId,
        message_id: processingMessage.message_id,
        reply_markup: getProjectSelectionForTransactionKeyboard(projects, shortId, parsedTransaction.type)
      });
      return;
    }


    if (parsedTransaction.type === 'income') {
      // Handle income transaction
      const tempId = uuidv4();
      const incomeData = {
        user_id: user.id,
        project_id: activeProject.id,
        project_name: activeProject.name,
        amount: parsedTransaction.amount,
        currency: parsedTransaction.currency,
        category: parsedTransaction.category || '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã',
        description: parsedTransaction.description,
        income_date: new Date().toISOString().split('T')[0]
      };

      // Store temporarily for income
      tempIncomes.set(tempId, incomeData);

      // Show income confirmation
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${activeProject.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: processingMessage.message_id,
        reply_markup: getIncomeConfirmationKeyboard(tempId, user.is_premium)
      });

      // Auto-expire temp income after 5 minutes
      setTimeout(() => {
        tempIncomes.delete(tempId);
      }, 5 * 60 * 1000);

    } else {
      // Handle expense transaction
      const tempId = uuidv4();
      const expenseData = {
        user_id: user.id,
        project_id: activeProject.id,
        project_name: activeProject.name,
        amount: parsedTransaction.amount,
        currency: parsedTransaction.currency,
        category: parsedTransaction.category || '–ü—Ä–æ—á–µ–µ',
        description: parsedTransaction.description,
        expense_date: new Date().toISOString().split('T')[0]
      };

      // Store temporarily
      tempExpenses.set(tempId, expenseData);

      // Show confirmation
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${activeProject.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: processingMessage.message_id,
        reply_markup: getExpenseConfirmationKeyboard(tempId, user.is_premium)
      });

      // Auto-expire temp expense after 5 minutes
      setTimeout(() => {
        tempExpenses.delete(tempId);
      }, 5 * 60 * 1000);
    }

  } catch (error) {
    logger.error('Expense text processing error:', error);
    await bot.sendMessage(chatId, 
      `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —è—Å–Ω–µ–µ.'}\n\nüí° –ü—Ä–∏–º–µ—Ä: "–∫–æ—Ñ–µ 200 —Ä—É–±–ª–µ–π"`
    );
  }
}

async function isAnalyticsQuestion(text) {
  try {
    // Quick check for obvious transactions with amounts
    const hasAmount = /\d+\s*(—Ä—É–±–ª|—Ä—É–±|–¥–æ–ª–ª|–µ–≤—Ä–æ|–¥–æ–ª–ª–∞—Ä|\$|‚Ç¨|‚ÇΩ)/i.test(text);
    if (hasAmount) {
      return false; // Definitely a transaction
    }

    // Use AI to determine if this is an analytics question
    const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–ó–ê–ü–†–û–°: "${text}"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "ANALYTICS" –µ—Å–ª–∏ —ç—Ç–æ:
- –í–æ–ø—Ä–æ—Å –æ —Ç—Ä–∞—Ç–∞—Ö/–¥–æ—Ö–æ–¥–∞—Ö (—Å–∫–æ–ª—å–∫–æ, –Ω–∞ —á—Ç–æ, –≥–¥–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª)
- –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
- –ü—Ä–æ—Å—å–±–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã/–¥–æ—Ö–æ–¥—ã

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "TRANSACTION" –µ—Å–ª–∏ —ç—Ç–æ:
- –ó–∞–ø–∏—Å—å —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥–∞ —Å —Å—É–º–º–æ–π
- –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏/–æ–ø–ª–∞—Ç—ã
- –õ—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–Ω—å–≥–∞–º–∏

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: ANALYTICS –∏–ª–∏ TRANSACTION`;

    const response = await openaiService.generateResponse(prompt);
    const result = response.trim().toUpperCase();

    return result === 'ANALYTICS';

  } catch (error) {
    logger.error('Error in AI analytics detection:', error);

    // Fallback to simple rules if AI fails
    const lowerText = text.toLowerCase().trim();
    const questionWords = ['—Å–∫–æ–ª—å–∫–æ', '–Ω–∞ —á—Ç–æ', '–≥–¥–µ', '–ø–æ–∫–∞–∂–∏', '–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ'];
    return questionWords.some(word => lowerText.includes(word));
  }
}

async function handleAnalyticsQuestion(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const question = msg.text;
  const bot = getBot();

  try {
    await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã...');
    
    const analysis = await analyticsService.askAIAnalytics(user.id, question);
    await bot.sendMessage(chatId, analysis);
    
  } catch (error) {
    logger.error('Analytics question error:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.'}`);
  }
}

// Handle input when user is in a state
async function handleStateInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  
  try {
    switch (userState.type) {
      case STATE_TYPES.WAITING_EXPENSE_DESCRIPTION:
        await handleDescriptionInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CUSTOM_AMOUNT:
        await handleCustomAmountInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CUSTOM_CATEGORY:
        await handleCustomCategoryInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME:
        await handleProjectNameInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME_SIMPLE:
        await handleProjectNameInputSimple(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME_EDIT:
        await handleProjectNameEditInput(msg, userState);
        break;

      case STATE_TYPES.WAITING_PROJECT_KEYWORDS_EDIT:
        await handleProjectKeywordsEditInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME_EXISTING_SHEET:
        await handleProjectNameInputForExistingSheet(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_NAME_NEW_SHEET:
        await handleProjectNameInputForNewSheet(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_PROJECT_KEYWORDS:
        await handleProjectKeywordsInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_GOOGLE_SHEETS_LINK:
        await handleGoogleSheetsLinkInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CATEGORY_NAME:
        await handleCategoryNameInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CATEGORY_EMOJI:
        await handleCategoryEmojiInput(msg, userState);
        break;

      case STATE_TYPES.WAITING_CATEGORY_KEYWORDS:
        await handleCategoryKeywordsInput(msg, userState);
        break;

      case STATE_TYPES.WAITING_CATEGORY_NAME_EDIT:
        await handleCategoryNameEditInput(msg, userState);
        break;
        
      case STATE_TYPES.WAITING_CATEGORY_EMOJI_EDIT:
        await handleCategoryEmojiEditInput(msg, userState);
        break;

      case STATE_TYPES.WAITING_CATEGORY_KEYWORDS_EDIT:
        await handleCategoryKeywordsEditInput(msg, userState);
        break;

      case STATE_TYPES.WAITING_CUSTOM_EXPORT_DATES:
        await handleCustomExportDatesInput(msg, userState);
        break;
        
      case STATE_TYPES.EDITING_INCOME_AMOUNT:
        await handleIncomeAmountEdit(msg, userState);
        break;
        
      case STATE_TYPES.EDITING_INCOME_DESCRIPTION:
        await handleIncomeDescriptionEdit(msg, userState);
        break;
        
      default:
        logger.warn(`Unknown state type: ${userState.type}`);
        stateManager.clearState(chatId);
    }
  } catch (error) {
    logger.error('Error handling state input:', error);
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// Handle description input for expense
async function handleDescriptionInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { tempId, messageId } = userState.data;
  
  if (text.length < 1) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    return;
  }
  
  if (text.length > 100) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).');
    return;
  }
  
  // Update expense data
  const expenseData = tempExpenses.get(tempId);
  if (expenseData) {
    expenseData.description = text;
    tempExpenses.set(tempId, expenseData);
    
    // Update the confirmation message
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}

‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`;
    
    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getExpenseConfirmationKeyboard(tempId, msg.user.is_premium)
    });
  } else {
    await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

async function handleCustomAmountInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { tempId, messageId } = userState.data;
  
  // Parse amount
  const amount = parseFloat(text.replace(',', '.').replace(/[^\d.]/g, ''));
  
  if (isNaN(amount) || amount <= 0 || amount > 1000000) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!\n\nüìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1 000 000\n\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã: 250, 1500.50, 50');
    return;
  }
  
  // Update expense data
  const expenseData = tempExpenses.get(tempId);
  if (expenseData) {
    expenseData.amount = amount;
    tempExpenses.set(tempId, expenseData);
    
    // Get project name
    const project = await projectService.findById(expenseData.project_id);
    
    // Update the confirmation message
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expenseData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

‚úÖ –°—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`;
    
    await bot.editMessageText(confirmationText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getExpenseConfirmationKeyboard(tempId, msg.user.is_premium)
    });
  } else {
    await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Placeholder functions for other state types
async function handleCustomCategoryInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { tempId, messageId } = userState.data;
  
  // Validate format: emoji + space + name
  const emojiRegex = /^(\p{Emoji_Presentation}|\p{Emoji}\uFE0F|\p{Extended_Pictographic})\s+(.+)$/u;
  const match = text.match(emojiRegex);
  
  if (!match) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\nüìù –ù—É–∂–Ω–æ: —ç–º–æ–¥–∑–∏ + –ø—Ä–æ–±–µ–ª + –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: "üéÆ –ò–≥—Ä—ã"');
    return;
  }
  
  const emoji = match[1];
  const name = match[2].trim();
  
  if (name.length < 2 || name.length > 20) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if category already exists
    const existing = await customCategoryService.findByUserIdAndName(user.id, name);
    if (existing) {
      await bot.sendMessage(chatId, `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // Create new category
    const category = await customCategoryService.create({
      user_id: user.id,
      name: name,
      emoji: emoji
    });
    
    // Update expense with new category
    const expenseData = tempExpenses.get(tempId);
    if (expenseData) {
      expenseData.category = name;
      tempExpenses.set(tempId, expenseData);
      
      // Update the confirmation message
      const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expenseData.description}
üíµ –°—É–º–º–∞: ${expenseData.amount} ${expenseData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${emoji} ${expenseData.category}

‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —Å–æ–∑–¥–∞–Ω–∞!`;
      
      const { getCategorySelectionKeyboard, getExpenseConfirmationKeyboard } = require('../keyboards/inline');
      
      await bot.editMessageText(confirmationText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getExpenseConfirmationKeyboard(tempId, user.is_premium)
      });
    } else {
      await bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${emoji} ${name}" —Å–æ–∑–¥–∞–Ω–∞!\n\n‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.`);
    }
    
  } catch (error) {
    logger.error('Error creating custom category:', error);
    if (error.code === '23505') { // Unique constraint violation
      await bot.sendMessage(chatId, `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
    } else {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

async function handleProjectNameInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if project name already exists for this user
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // Ask for keywords
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_KEYWORDS, { projectName: text });
    
    await bot.sendMessage(chatId, 
      `üìù –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–µ–∫—Ç "${text}" –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤.\n\nüîç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–ª —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–∞, –º–∞—à–µ–Ω—å–∫–∞, –¥–æ—á–∫–∞, —Ä–µ–±–µ–Ω–æ–∫" –∏–ª–∏ "—Ä–∞–±–æ—Ç–∞, –æ—Ñ–∏—Å, –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"\n\n‚úÖ –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"`
    );
    
  } catch (error) {
    logger.error('Error in project creation step:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    stateManager.clearState(chatId);
  }
}

// Handle simple project name input (without keywords)
async function handleProjectNameInputSimple(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if project name already exists for this user
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // Ask for keywords instead of creating directly
    stateManager.setState(chatId, STATE_TYPES.WAITING_PROJECT_KEYWORDS, {
      projectName: text
    });

    await bot.sendMessage(chatId,
      `üìù –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${text}"\n\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–º–æ–≥—É—Ç AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\nüí° –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –æ—Ç–ø—É—Å–∫, –æ—Ç–¥—ã—Ö, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞\n‚Ä¢ –º–∞–≥–∞–∑–∏–Ω, –ø—Ä–æ–¥—É–∫—Ç—ã, –µ–¥–∞, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç\n‚Ä¢ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –æ–±–µ–¥, —É–∂–∏–Ω\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ **-** –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞`
    );
    
  } catch (error) {
    logger.error('Error creating simple project:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    stateManager.clearState(chatId);
  }
}

// Handle project keywords input
async function handleProjectKeywordsInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { projectName } = userState.data;
  
  try {
    let keywords = null;
    
    if (text !== '-' && text.length > 0) {
      // Validate keywords (allow letters, spaces, commas, and common punctuation)
      if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s,.-]+$/.test(text)) {
        await bot.sendMessage(chatId, '‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ!');
        return;
      }
      
      keywords = text;
    }
    
    // Create project with keywords
    const projectData = {
      owner_id: user.id,
      name: projectName,
      description: `–ü—Ä–æ–µ–∫—Ç "${projectName}" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤`,
      is_active: false // New projects are inactive by default
    };
    
    // Add keywords only if provided and DB supports it
    if (keywords) {
      projectData.keywords = keywords;
    }
    
    const newProject = await projectService.create(projectData);
    
    const keywordsText = keywords ? 
      `\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords}\n\n‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —ç—Ç–∏—Ö —Å–ª–æ–≤ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç!` : 
      `\nüìù –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–æ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏.`;
    
    await bot.sendMessage(chatId, 
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω!${keywordsText}\n\nüìã –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ —á–µ—Ä–µ–∑ /projects –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.`
    );
    
  } catch (error) {
    logger.error('Error creating project with keywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Handle Google Sheets link input
async function handleGoogleSheetsLinkInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  
  try {
    // Extract Google Sheets ID from URL
    const urlRegex = /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/;
    const match = text.match(urlRegex);
    
    if (!match) {
      await bot.sendMessage(chatId, 
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\nhttps://docs.google.com/spreadsheets/d/1A2B3C.../edit\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É.'
      );
      return;
    }
    
    const sheetId = match[1];

    // Get the selected project from state
    const selectedProjectId = userState.data?.selectedProjectId;

    if (!selectedProjectId) {
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –µ—â–µ —Ä–∞–∑.');
      stateManager.clearState(chatId);
      return;
    }

    // Get project info
    const project = await projectService.findById(selectedProjectId);
    if (!project) {
      await bot.sendMessage(chatId, '‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      stateManager.clearState(chatId);
      return;
    }

    // Update project with Google Sheets ID
    await projectService.update(selectedProjectId, {
      google_sheet_id: sheetId
    });

    // Connect to the selected project
    await handleGoogleSheetsConnected(chatId, user.id, project, sheetId);
    stateManager.clearState(chatId);
    
  } catch (error) {
    logger.error('Error connecting Google Sheets:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ.');
  }
  
  // Clear state
  stateManager.clearState(chatId);
}

// Handle category name input
async function handleCategoryNameInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId } = userState.data;

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 'üíé –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!');
    stateManager.clearState(chatId);
    return;
  }

  if (text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).');
    return;
  }

  if (text.length < 2) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).');
    return;
  }

  try {
    // Check if category name already exists
    const existing = await customCategoryService.findByUserIdAndName(user.id, text);
    if (existing) {
      await bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      return;
    }

    // Move to emoji selection
    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_EMOJI, { 
      messageId,
      categoryName: text 
    });

    await bot.editMessageText(`üé® –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: **${text}**

üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª):

üí° –ü—Ä–∏–º–µ—Ä—ã: üêï üè† üöó üçî üíä üé¨ ‚úàÔ∏è

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ —ç–º–æ–¥–∑–∏.`, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç–º–æ–¥–∑–∏', callback_data: 'skip_emoji' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'manage_categories' }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error handling category name input:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    stateManager.clearState(chatId);
  }
}

// Handle category emoji input
async function handleCategoryEmojiInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId, categoryName } = userState.data;

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 'üíé –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!');
    stateManager.clearState(chatId);
    return;
  }

  // Validate emoji (allow skipping with "-" or default emoji for long text)
  let emoji = text;
  if (text === '-' || text.length > 2) {
    emoji = 'üìù'; // Default emoji if skipped or invalid
  }

  try {
    // Ask for keywords instead of creating immediately
    logger.info(`üîß Setting WAITING_CATEGORY_KEYWORDS state for chatId: ${chatId}, categoryName: ${categoryName}`);
    stateManager.setState(chatId, STATE_TYPES.WAITING_CATEGORY_KEYWORDS, {
      categoryName,
      emoji: emoji
    });

    await bot.sendMessage(chatId, `üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

${emoji} **${categoryName}**

–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–ª —Ç—Ä–∞—Ç—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –ø–∏—Ü—Ü–∞, –µ–¥–∞" –∏–ª–∏ "–∞–≤—Ç–æ–±—É—Å, —Ç–∞–∫—Å–∏, –º–µ—Ç—Ä–æ"

‚úÖ –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"`, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    logger.error('Error creating category with emoji:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    stateManager.clearState(chatId);
  }
}

// Handle category name edit input
async function handleCategoryNameEditInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId, categoryId, currentName } = userState.data;

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 'üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!');
    stateManager.clearState(chatId);
    return;
  }

  if (text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).');
    return;
  }

  if (text.length < 2) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).');
    return;
  }

  if (text === currentName) {
    await bot.sendMessage(chatId, '‚ùå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ.');
    return;
  }

  try {
    // Check if category name already exists
    const existing = await customCategoryService.findByUserIdAndName(user.id, text);
    if (existing && existing.id !== categoryId) {
      await bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      return;
    }

    // Update category name
    await customCategoryService.update(categoryId, { name: text });

    await bot.editMessageText(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!

–°—Ç–∞—Ä–æ–µ: **${currentName}**
–ù–æ–≤–æ–µ: **${text}**`, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `edit_category:${categoryId}` }]]
      }
    });
  } catch (error) {
    logger.error('Error updating category name:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.');
  }

  stateManager.clearState(chatId);
}

// Handle category emoji edit input
async function handleCategoryEmojiEditInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId, categoryId, currentEmoji } = userState.data;

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 'üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!');
    stateManager.clearState(chatId);
    return;
  }

  // Validate emoji (should be 1-2 characters for emoji)
  if (text.length > 2) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏.');
    return;
  }

  if (text === currentEmoji) {
    await bot.sendMessage(chatId, '‚ùå –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ.');
    return;
  }

  try {
    // Update category emoji
    await customCategoryService.update(categoryId, { emoji: text });

    await bot.editMessageText(`‚úÖ –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω!

–°—Ç–∞—Ä—ã–π: ${currentEmoji || 'üìÅ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}
–ù–æ–≤—ã–π: ${text}`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `edit_category:${categoryId}` }]]
      }
    });
  } catch (error) {
    logger.error('Error updating category emoji:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏.');
  }

  stateManager.clearState(chatId);
}

async function handleCustomExportDatesInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { format, messageId } = userState.data;
  
  // Parse date range format: DD.MM.YYYY - DD.MM.YYYY
  const dateRangeRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s*-\s*(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
  const match = text.match(dateRangeRegex);
  
  if (!match) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: 01.12.2024 - 31.12.2024');
    return;
  }
  
  try {
    const [, startDay, startMonth, startYear, endDay, endMonth, endYear] = match;
    
    const startDate = new Date(startYear, startMonth - 1, startDay);
    const endDate = new Date(endYear, endMonth - 1, endDay, 23, 59, 59);
    
    // Validate dates
    if (startDate > endDate) {
      await bot.sendMessage(chatId, '‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!');
      return;
    }
    
    const now = new Date();
    if (startDate > now || endDate > now) {
      await bot.sendMessage(chatId, '‚ùå –î–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!');
      return;
    }
    
    // Generate export directly (duplicate of callbacks.js logic for now)
    await generateCustomExport(chatId, messageId, msg.user, format, startDate, endDate);
    
  } catch (error) {
    logger.error('Date parsing error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
  }
  
  stateManager.clearState(chatId);
}

async function generateCustomExport(chatId, messageId, user, format, startDate, endDate) {
  const bot = getBot();
  const { expenseService } = require('../../services/supabase');
  const logger = require('../../utils/logger');
  
  // Show processing message
  await bot.editMessageText('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç...', {
    chat_id: chatId,
    message_id: messageId
  });
  
  try {
    // Get user's expenses for the period
    const expenses = await expenseService.getExpensesForExport(user.id, startDate, endDate);
    
    if (expenses.length === 0) {
      await bot.editMessageText('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // Generate CSV content
    const headers = ['–î–∞—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—É–º–º–∞', '–í–∞–ª—é—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–æ–µ–∫—Ç'];
    const rows = [headers];
    
    expenses.forEach(expense => {
      rows.push([
        expense.expense_date,
        expense.description,
        expense.amount,
        expense.currency,
        expense.category,
        expense.project_name || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'
      ]);
    });
    
    const csvData = rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
    const fileContent = Buffer.from(csvData, 'utf-8');
    
    const formatDate = (date) => date.toISOString().split('T')[0].replace(/-/g, '.');
    const fileName = `expenses_${formatDate(startDate)}_${formatDate(endDate)}.${format === 'xlsx' ? 'xlsx' : 'csv'}`;
    
    // Send file
    await bot.sendDocument(chatId, fileContent, {
      filename: fileName,
      contentType: format === 'xlsx' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'text/csv'
    });
    
    // Update message
    await bot.editMessageText(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤!\n\nüìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${expenses.length} –∑–∞–ø–∏—Å–µ–π\nüìÖ –ü–µ—Ä–∏–æ–¥: ${formatDate(startDate)} - ${formatDate(endDate)}`, {
      chat_id: chatId,
      message_id: messageId
    });
    
  } catch (error) {
    logger.error('Export generation error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

async function syncExistingExpensesToSheets(userId, projectId, sheetId) {
  const { expenseService } = require('../../services/supabase');
  const googleSheetsService = require('../../services/googleSheets');
  const logger = require('../../utils/logger');
  
  try {
    logger.info(`Starting sync of existing expenses for user ${userId}, project ${projectId} to sheet ${sheetId}`);
    
    // Get all expenses for this project
    const expenses = await expenseService.findByProject(projectId, 1000, 0); // Get up to 1000 expenses
    
    if (!expenses || expenses.length === 0) {
      logger.info('No expenses to sync');
      return;
    }
    
    logger.info(`Found ${expenses.length} expenses to sync`);
    
    // Setup the sheet with headers first
    await googleSheetsService.ensureSheetStructure(sheetId);

    // Sync expenses in batches to avoid API limits
    const BATCH_SIZE = 20; // Reduced batch size for more reliable sync
    for (let i = 0; i < expenses.length; i += BATCH_SIZE) {
      const batch = expenses.slice(i, i + BATCH_SIZE);

      logger.info(`Syncing batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(expenses.length / BATCH_SIZE)}: ${batch.length} expenses`);

      for (const expense of batch) {
        try {
          // Use the existing addExpenseToSheet method with projectId
          await googleSheetsService.addExpenseToSheet(expense, projectId);

          // Small delay to avoid rate limiting
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (expenseError) {
          logger.error(`Failed to sync expense ${expense.id}:`, expenseError);
          // Continue with other expenses even if one fails
        }
      }

      // Longer delay between batches
      if (i + BATCH_SIZE < expenses.length) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    logger.info(`Successfully synced ${expenses.length} expenses to Google Sheets`);
    
  } catch (error) {
    logger.error('Error in syncExistingExpensesToSheets:', error);
    throw error;
  }
}

async function syncExistingIncomesToSheets(userId, projectId, sheetId) {
  const { incomeService } = require('../../services/supabase');
  const googleSheetsService = require('../../services/googleSheets');
  const logger = require('../../utils/logger');

  try {
    logger.info(`Starting sync of existing incomes for user ${userId}, project ${projectId} to sheet ${sheetId}`);

    // Get all incomes for this project
    const incomes = await incomeService.findByProject(projectId, 1000, 0); // Get up to 1000 incomes

    if (!incomes || incomes.length === 0) {
      logger.info('No incomes to sync');
      return;
    }

    logger.info(`Found ${incomes.length} incomes to sync`);

    // Sync incomes in batches to avoid API limits
    const BATCH_SIZE = 20; // Reduced batch size for more reliable sync
    for (let i = 0; i < incomes.length; i += BATCH_SIZE) {
      const batch = incomes.slice(i, i + BATCH_SIZE);

      logger.info(`Syncing income batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(incomes.length / BATCH_SIZE)}: ${batch.length} incomes`);

      for (const income of batch) {
        try {
          // Use the existing addIncomeToSheet method with projectId
          await googleSheetsService.addIncomeToSheet(income, projectId);

          // Small delay to avoid rate limiting
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (incomeError) {
          logger.error(`Failed to sync income ${income.id}:`, incomeError);
          // Continue with other incomes even if one fails
        }
      }

      // Longer delay between batches
      if (i + BATCH_SIZE < incomes.length) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    logger.info(`Successfully synced ${incomes.length} incomes to Google Sheets`);

  } catch (error) {
    logger.error('Error in syncExistingIncomesToSheets:', error);
    throw error;
  }
}

async function handleIncomeAmountEdit(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { tempId } = userState.data;
  
  const incomeData = tempIncomes.get(tempId);
  if (!incomeData) {
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  const amount = parseFloat(text);
  if (isNaN(amount) || amount <= 0) {
    await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
    return;
  }

  incomeData.amount = amount;
  tempIncomes.set(tempId, incomeData);
  stateManager.clearState(chatId);

  try {
    const project = await projectService.findById(incomeData.project_id);
    
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.sendMessage(chatId, confirmationText, {
      reply_markup: getIncomeConfirmationKeyboard(tempId, msg.user.is_premium)
    });

  } catch (error) {
    logger.error('Error updating income amount:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã.');
  }
}

async function handleIncomeDescriptionEdit(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const { tempId } = userState.data;
  
  const incomeData = tempIncomes.get(tempId);
  if (!incomeData) {
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  if (text.length === 0 || text.length > 200) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }

  incomeData.description = text;
  tempIncomes.set(tempId, incomeData);
  stateManager.clearState(chatId);

  try {
    const project = await projectService.findById(incomeData.project_id);
    
    const confirmationText = `üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${incomeData.description}
üíµ –°—É–º–º–∞: ${incomeData.amount} ${incomeData.currency}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${incomeData.category}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;

    await bot.sendMessage(chatId, confirmationText, {
      reply_markup: getIncomeConfirmationKeyboard(tempId, msg.user.is_premium)
    });

  } catch (error) {
    logger.error('Error updating income description:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.');
  }
}

// Handle project name edit input
async function handleProjectNameEditInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { projectId, messageId, currentName } = userState.data;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  if (text === currentName) {
    await bot.sendMessage(chatId, '‚ùå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ!');
    return;
  }
  
  try {
    // Check if project name already exists for this user (excluding current project)
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.id !== projectId && p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }

    // Update project name
    const updatedProject = await projectService.update(projectId, { name: text });

    // Update Google Sheets if connected
    if (updatedProject.google_sheet_id) {
      try {
        const googleSheetsService = require('../../services/googleSheets');
        await googleSheetsService.renameSheet(updatedProject.google_sheet_id, currentName, text);
        logger.info(`Google Sheets renamed from "${currentName}" to "${text}"`);
      } catch (error) {
        logger.error('Failed to rename Google Sheet:', error);
        // Continue anyway - project name is updated in database
      }
    }

    stateManager.clearState(chatId);

    // Try to delete the old message
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (e) {
      // Ignore if can't delete
    }

    await bot.sendMessage(chatId, 
      `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n` +
      `üìã –ë—ã–ª–æ: "${currentName}"\n` +
      `üìã –°—Ç–∞–ª–æ: "${text}"`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
          ]]
        }
      }
    );

    // If this project has Google Sheets integration, the sheet tab will be updated automatically
    // when new expenses/incomes are added
    
  } catch (error) {
    logger.error('Error updating project name:', error);
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.');
  }
}

// Handle project keywords edit input
async function handleProjectKeywordsEditInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { projectId } = userState.data;

  logger.info(`üîß Processing project keywords edit: "${text}" for projectId: ${projectId}`);

  try {
    let keywords = null;

    if (text !== '-' && text.length > 0) {
      // Validate keywords (allow letters, spaces, commas, and common punctuation)
      if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s,.-]+$/.test(text)) {
        await bot.sendMessage(chatId, '‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ!');
        return;
      }

      keywords = text;
    }

    // Update project with new keywords
    const updatedProject = await projectService.update(projectId, { keywords });

    const keywordsText = keywords ? `üîç –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: \`${keywords}\`` : 'üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã';

    await bot.sendMessage(chatId, `‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!

üìÅ **${updatedProject.name}**
${keywordsText}

–¢–µ–ø–µ—Ä—å AI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `edit_project:${projectId}` }],
          [{ text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }]
        ]
      }
    });

  } catch (error) {
    logger.error('Error updating project keywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  // Clear state
  stateManager.clearState(chatId);
}

// Handle project name input for existing sheet option
async function handleProjectNameInputForExistingSheet(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId } = userState.data;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if project name already exists for this user
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }

    // Create project
    const newProject = await projectService.create({
      owner_id: user.id,
      name: text,
      description: `–ü—Ä–æ–µ–∫—Ç "${text}"`,
      is_active: false
    });

    // Find existing project with Google Sheets
    const projectsWithSheets = existingProjects.filter(p => p.google_sheet_id);
    const existingSheetProject = projectsWithSheets[0]; // Take the first one

    if (existingSheetProject && existingSheetProject.google_sheet_id) {
      try {
        // Create worksheet in existing sheet
        await googleSheetsService.createWorksheet(existingSheetProject.google_sheet_id, text);
        
        // Update new project with same Google Sheets ID
        await projectService.update(newProject.id, {
          google_sheet_id: existingSheetProject.google_sheet_id
        });

        stateManager.clearState(chatId);

        // Delete the old message
        try {
          await bot.deleteMessage(chatId, messageId);
        } catch (e) {
          // Ignore if can't delete
        }

        await bot.sendMessage(chatId, 
          `‚úÖ –ü—Ä–æ–µ–∫—Ç "${text}" —Å–æ–∑–¥–∞–Ω!\n\n` +
          `üìä –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç "${text}" –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Google —Ç–∞–±–ª–∏—Ü–µ.\n\n` +
          `üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`,
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
              ]]
            }
          }
        );
      } catch (sheetsError) {
        logger.error('Error creating worksheet:', sheetsError);
        await bot.sendMessage(chatId, 
          `‚úÖ –ü—Ä–æ–µ–∫—Ç "${text}" —Å–æ–∑–¥–∞–Ω!\n\n` +
          `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –≤ Google —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –ø—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`
        );
      }
    } else {
      await bot.sendMessage(chatId, 
        `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Google —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞.`
      );
    }
    
  } catch (error) {
    logger.error('Error creating project with existing sheet:', error);
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
  }
}

// Handle project name input for new sheet option
async function handleProjectNameInputForNewSheet(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { messageId } = userState.data;
  
  if (text.length < 2 || text.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!');
    return;
  }
  
  try {
    // Check if project name already exists for this user
    const existingProjects = await projectService.findByUserId(user.id);
    const nameExists = existingProjects.some(p => 
      p.name.toLowerCase() === text.toLowerCase()
    );
    
    if (nameExists) {
      await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–µ–∫—Ç "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }

    // Create project without Google Sheets ID for now
    const newProject = await projectService.create({
      owner_id: user.id,
      name: text,
      description: `–ü—Ä–æ–µ–∫—Ç "${text}"`,
      is_active: false
    });

    stateManager.clearState(chatId);

    // Delete the old message
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (e) {
      // Ignore if can't delete
    }

    await bot.sendMessage(chatId,
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${text}" —Å–æ–∑–¥–∞–Ω!\n\n` +
      `üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /connect`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìã –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏', callback_data: 'back_to_projects' }
          ]]
        }
      }
    );
    
  } catch (error) {
    logger.error('Error creating project with new sheet:', error);
    stateManager.clearState(chatId);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
  }
}

async function handleSyncCommand(msg) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  if (!user) {
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return;
  }

  try {
    // Get user's projects
    const projects = await projectService.findByUserId(user.id);

    if (projects.length === 0) {
      await bot.sendMessage(chatId, 'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üìã –ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    // Filter projects that have Google Sheets connected
    const projectsWithSheets = projects.filter(p => p.google_sheet_id);

    if (projectsWithSheets.length === 0) {
      await bot.sendMessage(chatId,
        'üìä –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Sheets.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã –∫ –ø—Ä–æ–µ–∫—Ç—É.'
      );
      return;
    }

    // Check daily sync limit for non-premium users
    if (!user.is_premium) {
      const syncLimit = 3; // Free users get 3 syncs per day
      if (user.daily_syncs_used >= syncLimit) {
        await bot.sendMessage(chatId,
          `üìä –õ–∏–º–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω (${syncLimit}/–¥–µ–Ω—å)\n\nüíé PRO –ø–ª–∞–Ω: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`
        );
        return;
      }
    }

    // Create keyboard with projects
    const keyboard = projectsWithSheets.map(project => ([{
      text: `üìä ${project.name}${project.is_active ? ' ‚úÖ' : ''}`,
      callback_data: `sync_project:${project.id}`
    }]));

    keyboard.push([{
      text: '‚ùå –û—Ç–º–µ–Ω–∞',
      callback_data: 'cancel_sync'
    }]);

    await bot.sendMessage(chatId,
      `üìä **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets**\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n` +
      `(–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã –≤ –±–æ—Ç)\n\n` +
      `üíé –õ–∏–º–∏—Ç: ${user.is_premium ? '‚àû' : `${user.daily_syncs_used || 0}/3`}`,
      {
        reply_markup: { inline_keyboard: keyboard }
      }
    );

  } catch (error) {
    logger.error('Error in handleSyncCommand:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤');
  }
}

async function handleGoogleSheetsConnected(chatId, userId, project, sheetId) {
  const bot = getBot();

  try {
    // Send processing message
    const processingMsg = await bot.sendMessage(chatId,
      `‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}"!\n\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É...`
    );

    // Sync all existing expenses and incomes to Google Sheets
    try {
      await syncExistingExpensesToSheets(userId, project.id, sheetId);
      await syncExistingIncomesToSheets(userId, project.id, sheetId);

      await bot.editMessageText(
        `‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}"!\n\nüìä –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π.\n\nüí° –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É.`,
        {
          chat_id: chatId,
          message_id: processingMsg.message_id
        }
      );
    } catch (syncError) {
      logger.error('Error syncing existing transactions:', syncError);
      await bot.editMessageText(
        `‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}"!\n\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.`,
        {
          chat_id: chatId,
          message_id: processingMsg.message_id
        }
      );
    }
  } catch (error) {
    logger.error('Error in handleGoogleSheetsConnected:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.');
  }
}

// Handle category keywords input
async function handleCategoryKeywordsInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { categoryName, emoji, messageId } = userState.data;

  logger.info(`üîß Processing category keywords: "${text}" for category: ${categoryName}`);

  try {
    let keywords = null;

    if (text !== '-' && text.length > 0) {
      // Validate keywords (allow letters, spaces, commas, and common punctuation)
      if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s,.-]+$/.test(text)) {
        await bot.sendMessage(chatId, '‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ!');
        return;
      }

      keywords = text;
    }

    // Create category with keywords
    const categoryData = {
      user_id: user.id,
      name: categoryName,
      emoji: emoji
    };

    // Add keywords only if provided and DB supports it
    if (keywords) {
      categoryData.keywords = keywords;
    }

    const newCategory = await customCategoryService.create(categoryData);

    const keywordsText = keywords ?
      `\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords}\n\n‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —ç—Ç–∏—Ö —Å–ª–æ–≤ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!` :
      `\nüìù –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é "${categoryName}".`;

    await bot.editMessageText(
      `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!

${emoji} **${categoryName}**${keywordsText}

–¢–µ–ø–µ—Ä—å —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'manage_categories' }]]
        }
      }
    );

  } catch (error) {
    logger.error('Error creating category with keywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  // Clear state
  stateManager.clearState(chatId);
}

// Handle category keywords edit input
async function handleCategoryKeywordsEditInput(msg, userState) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const bot = getBot();
  const user = msg.user;
  const { categoryId } = userState.data;

  logger.info(`üîß Processing category keywords edit: "${text}" for categoryId: ${categoryId}`);

  try {
    let keywords = null;

    if (text !== '-' && text.length > 0) {
      // Validate keywords (allow letters, spaces, commas, and common punctuation)
      if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s,.-]+$/.test(text)) {
        await bot.sendMessage(chatId, '‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ!');
        return;
      }

      keywords = text;
    }

    // Update category with new keywords
    const updatedCategory = await customCategoryService.update(categoryId, { keywords });

    const keywordsText = keywords ? `üîç –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: \`${keywords}\`` : 'üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã';

    await bot.sendMessage(chatId, `‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!

${updatedCategory.emoji || 'üìÅ'} **${updatedCategory.name}**
${keywordsText}

–¢–µ–ø–µ—Ä—å AI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `edit_custom_category:${categoryId}` }],
          [{ text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'manage_categories' }]
        ]
      }
    });

  } catch (error) {
    logger.error('Error updating category keywords:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  // Clear state
  stateManager.clearState(chatId);
}

// Export temp expenses store for callback handlers
module.exports = {
  handleText,
  tempExpenses,
  tempIncomes,
  handleCurrencySelection,
  createFirstProject,
  handleExpenseText,
  handleGoogleSheetsConnected
};
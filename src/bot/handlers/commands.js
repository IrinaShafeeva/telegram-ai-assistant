const { userService, projectService, expenseService } = require('../../services/supabase');
const googleSheetsService = require('../../services/googleSheets');
const { getMainMenuKeyboard, getCurrencyKeyboard } = require('../keyboards/reply');
const { getProjectSelectionKeyboard, getSettingsKeyboard, getUpgradeKeyboard } = require('../keyboards/inline');
const { SUPPORTED_CURRENCIES, SUBSCRIPTION_LIMITS } = require('../../config/constants');
const { getBot } = require('../../utils/bot');
const logger = require('../../utils/logger');

// Command: /start
async function handleStart(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  try {
    if (!user) {
      return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }

    // Check if user needs currency setup
    if (!user.primary_currency || user.primary_currency === 'USD') {
      await bot.sendMessage(chatId, 
        `üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Expense Tracker!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã:
‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
‚Ä¢ üí¨ –ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º "–∫–æ—Ñ–µ 200—Ä"
‚Ä¢ üìä –ü–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å AI
‚Ä¢ üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets

üí∞ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:`
      );

      const currencyKeyboard = {
        inline_keyboard: [
          [
            { text: 'üá∑üá∫ –†—É–±–ª—å (RUB)', callback_data: 'set_currency_RUB' },
            { text: 'üá∫üá∏ –î–æ–ª–ª–∞—Ä (USD)', callback_data: 'set_currency_USD' }
          ],
          [
            { text: 'üá™üá∫ –ï–≤—Ä–æ (EUR)', callback_data: 'set_currency_EUR' },
            { text: 'üá¨üáß –§—É–Ω—Ç (GBP)', callback_data: 'set_currency_GBP' }
          ],
          [
            { text: 'üá∞üáø –¢–µ–Ω–≥–µ (KZT)', callback_data: 'set_currency_KZT' },
            { text: 'üá∫üá¶ –ì—Ä–∏–≤–Ω–∞ (UAH)', callback_data: 'set_currency_UAH' }
          ]
        ]
      };

      return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:', { reply_markup: currencyKeyboard });
    }

    // Check if user already has projects
    const userProjects = await projectService.findByUserId(user.id);
    
    if (userProjects.length === 0) {
      // First time user - create project immediately
      await bot.sendMessage(chatId, 
        `‚ú® –°–æ–∑–¥–∞—é –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç...`
      );

      // Create first project automatically
      const project = await projectService.create({
        owner_id: user.id,
        name: '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
        is_active: true
      });

      await bot.sendMessage(chatId, 
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" —Å–æ–∑–¥–∞–Ω!

‚ú® –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"

üìä –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect [ID_—Ç–∞–±–ª–∏—Ü—ã]`,
        { reply_markup: getMainMenuKeyboard() }
      );
    } else {
      // Existing user - show main menu
      await bot.sendMessage(chatId, 
        `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name || '–¥—Ä—É–≥'}!

üè¶ Expense Tracker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–∫–æ—Ñ–µ 200 —Ä—É–±–ª–µ–π"
‚Ä¢ "—Ç–∞–∫—Å–∏ 15 –¥–æ–ª–ª–∞—Ä–æ–≤"
‚Ä¢ "–ø—Ä–æ–¥—É–∫—Ç—ã 3500"`, 
        { reply_markup: getMainMenuKeyboard() }
      );
    }
  } catch (error) {
    logger.error('Start command error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Command: /help
async function handleHelp(msg, match) {
  const chatId = msg.chat.id;
  const bot = getBot();
  
  const helpText = `üè¶ Expense Tracker - –°–ø—Ä–∞–≤–∫–∞

üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä" –∏–ª–∏ "15$ —Ç–∞–∫—Å–∏"

üéØ –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/projects - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è PRO)  
/connect - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google —Ç–∞–±–ª–∏—Ü—É
/sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/categories - –°–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (PRO)
/upgrade - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –ø–ª–∞–Ω–µ

ü§ñ AI –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã):
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –µ–¥—É –≤ –∞–≤–≥—É—Å—Ç–µ?"
‚Ä¢ "–ù–∞ —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—á—É?"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Å –ø—Ä–æ—à–ª—ã–º"

üí° –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —É–º–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
‚Ä¢ üìã –ü—Ä–æ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ üìÇ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ (PRO)
‚Ä¢ üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

‚ùì –ü—Ä–æ–±–ª–µ–º—ã? –ù–∞–ø–∏—à–∏—Ç–µ @support_bot`;

  await bot.sendMessage(chatId, helpText);
}

// Command: /projects
async function handleProjects(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  try {
    const projects = await projectService.findByUserId(user.id);
    
    if (projects.length === 0) {
      await bot.sendMessage(chatId, 
        'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç?',
        { 
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' }
            ]]
          }
        }
      );
      return;
    }

    let message = 'üìã –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n';
    projects.forEach((project, index) => {
      const isOwner = project.owner_id === user.id;
      const status = project.is_active ? '‚úÖ' : '‚è∏Ô∏è';
      message += `${index + 1}. ${project.name} ${status}\n`;
      message += `   ${isOwner ? 'üëë –í–ª–∞–¥–µ–ª–µ—Ü' : 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'}\n`;
      if (project.google_sheet_url) {
        message += `   üìä Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã\n`;
      }
      message += '\n';
    });

    await bot.sendMessage(chatId, message, {
      reply_markup: getProjectSelectionKeyboard(projects, 'manage', user.is_premium)
    });
  } catch (error) {
    logger.error('Projects command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
  }
}


// Command: /sync
async function handleSync(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  try {
    // Check sync limits
    const canSync = await userService.checkDailyLimits(user.id, 'sync');
    if (!canSync) {
      const limit = user.is_premium ? 10 : 1;
      await bot.sendMessage(chatId, 
        `‚õî –õ–∏–º–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω (${limit} —Ä–∞–∑ –≤ –¥–µ–Ω—å).\n\nüíé –í PRO –ø–ª–∞–Ω–µ: –¥–æ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –≤ –¥–µ–Ω—å.`,
        { reply_markup: getUpgradeKeyboard() }
      );
      return;
    }

    const projects = await projectService.findByUserId(user.id);
    const projectsWithSheets = projects.filter(p => p.google_sheet_id);

    if (projectsWithSheets.length === 0) {
      await bot.sendMessage(chatId, 
        'üìä –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ Google Sheets.\n\nGoogle Sheets —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.'
      );
      return;
    }

    await bot.sendMessage(chatId, 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...');

    let totalImported = 0;
    let totalErrors = 0;

    for (const project of projectsWithSheets) {
      try {
        const result = await googleSheetsService.syncFromGoogleSheets(user.id, project.id);
        totalImported += result.imported;
        totalErrors += result.errors.length;
      } catch (error) {
        logger.error(`Sync failed for project ${project.id}:`, error);
        totalErrors++;
      }
    }

    // Increment usage counter
    await userService.incrementDailyUsage(user.id, 'sync');

    await bot.sendMessage(chatId, 
      `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported} –∑–∞–ø–∏—Å–µ–π\n${totalErrors > 0 ? `‚ùå –û—à–∏–±–æ–∫: ${totalErrors}` : ''}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /stats`
    );
  } catch (error) {
    logger.error('Sync command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Command: /settings
async function handleSettings(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  const settingsText = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.username ? `(@${user.username})` : ''}
üí± –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${user.primary_currency}
üíé –ü–ª–∞–Ω: ${user.is_premium ? 'PRO' : 'FREE'}

${user.is_premium ? '‚ú® –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ PRO —Ñ—É–Ω–∫—Ü–∏–∏!' : 'üíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!'}`;

  await bot.sendMessage(chatId, settingsText, {
    reply_markup: getSettingsKeyboard(user.is_premium)
  });
}

// Command: /categories (PRO only)
async function handleCategories(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 
      'üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!',
      { reply_markup: getUpgradeKeyboard() }
    );
    return;
  }

  await bot.sendMessage(chatId, 
    `üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    
üÜì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
‚Ä¢ üçî –ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
‚Ä¢ üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 
‚Ä¢ üè† –î–æ–º –∏ –±—ã—Ç
‚Ä¢ üõçÔ∏è –ü–æ–∫—É–ø–∫–∏
‚Ä¢ üíä –ó–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ üíº –†–∞–±–æ—Ç–∞
‚Ä¢ ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
‚Ä¢ üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

üíé –í PRO –ø–ª–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏!`,
    { reply_markup: getUpgradeKeyboard() }
  );
}

// Command: /upgrade
async function handleUpgrade(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  if (user.is_premium) {
    await bot.sendMessage(chatId, 
      'üíé –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å PRO –ø–ª–∞–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè'
    );
    return;
  }

  const upgradeText = `üíé Expense Tracker PRO

üÜì FREE –ø–ª–∞–Ω:
‚Ä¢ 1 –ø—Ä–æ–µ–∫—Ç
‚Ä¢ 50 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü
‚Ä¢ 5 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚Ä¢ 1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–¥–µ–Ω—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üíé PRO –ø–ª–∞–Ω—ã:
‚Ä¢ ‚àû –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ ‚àû –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
‚Ä¢ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚Ä¢ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚Ä¢ üìÇ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ –¶–µ–Ω—ã (Telegram Stars):
‚Ä¢ 1 –º–µ—Å—è—Ü: 250 ‚≠ê (~$5)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: 1200 ‚≠ê (~$24) üî• –≠–∫–æ–Ω–æ–º–∏—è $6
‚Ä¢ 1 –≥–æ–¥: 2000 ‚≠ê (~$40) üî•üî• –≠–∫–æ–Ω–æ–º–∏—è $20`;

  await bot.sendMessage(chatId, upgradeText, {
    reply_markup: getUpgradeKeyboard()
  });
}

// Command: /invite (PRO only)
async function handleInvite(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const username = match[1];
  const bot = getBot();

  if (!user.is_premium) {
    await bot.sendMessage(chatId, 
      'üíé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ PRO –ø–ª–∞–Ω–µ!',
      { reply_markup: getUpgradeKeyboard() }
    );
    return;
  }

  await bot.sendMessage(chatId, 
    `üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (PRO —Ñ—É–Ω–∫—Ü–∏—è)

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –≤ –∫–æ–º–∞–Ω–¥—É?

üíé –í PRO –ø–ª–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ username
‚Ä¢ –û–±—â–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`,
    { reply_markup: getUpgradeKeyboard() }
  );
}

// Command: /email - Set Google email for sheet access
async function handleEmail(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const email = match[1];
  const bot = getBot();

  try {
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }

    // Update user's email
    await userService.update(user.id, { email: email });

    // Share existing project sheets with the user
    const projects = await projectService.findByUserId(user.id);
    let sharedCount = 0;

    for (const project of projects) {
      if (project.google_sheet_id) {
        const shared = await googleSheetsService.shareSheetWithUser(
          project.google_sheet_id, 
          email, 
          user.first_name
        );
        if (shared) sharedCount++;
      }
    }

    let message = `‚úÖ Email ${email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`;
    if (sharedCount > 0) {
      message += `\nüìä ${sharedCount} —Ç–∞–±–ª–∏—Ü(—ã) —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º Google Drive`;
    }

    await bot.sendMessage(chatId, message);
  } catch (error) {
    logger.error('Email command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email.');
  }
}

// Command: /connect - Connect to user's Google Sheet
async function handleConnect(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const spreadsheetId = match ? match[1] : null;
  const bot = getBot();

  try {
    // If no spreadsheet ID provided, ask for link with instructions
    if (!spreadsheetId) {
      const { stateManager } = require('../../utils/stateManager');
      stateManager.setState(chatId, 'WAITING_GOOGLE_SHEETS_LINK');
      
      await bot.sendMessage(chatId,
        `üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets**\n\n` +
        `**–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n\n` +
        `1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É\n` +
        `2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø"** ‚Üí **"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"**\n` +
        `3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ email: **ai-assistant@your-project.iam.gserviceaccount.com**\n` +
        `4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞: **"–†–µ–¥–∞–∫—Ç–æ—Ä"**\n` +
        `5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ\n\n` +
        `üìù **–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:**\n` +
        `https://docs.google.com/spreadsheets/d/1A2B3C.../edit\n\n` +
        `‚ú® –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫—É—é —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!`,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // Extract spreadsheet ID from URL if full URL provided
    let cleanSpreadsheetId = spreadsheetId;
    if (spreadsheetId.includes('docs.google.com')) {
      const match = spreadsheetId.match(/\/d\/([a-zA-Z0-9-_]+)/);
      if (match) {
        cleanSpreadsheetId = match[1];
      } else {
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É.');
        return;
      }
    }

    // Validate spreadsheet ID format
    if (!/^[a-zA-Z0-9-_]+$/.test(cleanSpreadsheetId)) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–∞–±–ª–∏—Ü—ã.');
      return;
    }

    await bot.sendMessage(chatId, 'üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü–µ...');

    // Connect to the sheet
    const result = await googleSheetsService.connectToUserSheet(cleanSpreadsheetId, user.email);

    if (!result.success) {
      await bot.sendMessage(chatId, `‚ùå ${result.error}`);
      return;
    }

    // Get user's active project or create one
    const projects = await projectService.findByUserId(user.id);
    let activeProject = projects.find(p => p.is_active) || projects[0];

    if (!activeProject) {
      // Create new project
      activeProject = await projectService.create({
        owner_id: user.id,
        name: '–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã',
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
        is_active: true
      });
    }

    // Update project with sheet info
    await projectService.update(activeProject.id, {
      google_sheet_id: cleanSpreadsheetId,
      google_sheet_url: result.sheetUrl
    });

    await bot.sendMessage(chatId, 
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!

üìä –¢–∞–±–ª–∏—Ü–∞: ${result.title}
üîó –°—Å—ã–ª–∫–∞: ${result.sheetUrl}

–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É.

‚ú® –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É:
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 200 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: "–∫–æ—Ñ–µ 200—Ä"`,
      { reply_markup: getMainMenuKeyboard() }
    );

  } catch (error) {
    logger.error('Connect command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ.');
  }
}



// Secret command: /devpro - Activate PRO for developers
async function handleDevPro(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();

  try {
    // Update user to PRO status
    await userService.update(user.id, { is_premium: true });

    await bot.sendMessage(chatId, 
      `üéâ PRO –ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

üíé –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ ‚àû –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ ‚àû –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏  
‚Ä¢ 20 AI –≤–æ–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚Ä¢ 10 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π/–¥–µ–Ω—å
‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚Ä¢ üìÇ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PRO! üöÄ`
    );
  } catch (error) {
    logger.error('DevPro command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ PRO.');
  }
}

// Command: /ask - AI questions about expenses
async function handleAsk(msg, match) {
  const chatId = msg.chat.id;
  const user = msg.user;
  const bot = getBot();
  const question = match[1]?.trim();

  if (!question) {
    await bot.sendMessage(chatId, 
      `ü§ñ AI-–∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç–∞—Ö:\n\nüìù –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /ask —Å–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –µ–¥—É –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n‚Ä¢ /ask –∫–∞–∫–∞—è –º–æ—è —Å–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?\n‚Ä¢ /ask —Å–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç—Ä–∞—á—É –≤ –¥–µ–Ω—å?\n‚Ä¢ /ask —Å—Ä–∞–≤–Ω–∏ —Ä–∞—Å—Ö–æ–¥—ã —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å –ø—Ä–æ—à–ª—ã–º`
    );
    return;
  }

  try {
    // Check AI limits
    const canUseAI = await userService.checkDailyLimits(user.id, 'ai_question');
    if (!canUseAI) {
      const limit = user.is_premium ? 20 : 5;
      await bot.sendMessage(chatId, 
        `‚õî –õ–∏–º–∏—Ç AI-–≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω (${limit} –≤ –¥–µ–Ω—å).\n\nüíé –í PRO –ø–ª–∞–Ω–µ: –¥–æ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.`,
        { reply_markup: getUpgradeKeyboard() }
      );
      return;
    }

    // Get user's active project
    const projects = await projectService.findByUserId(user.id);
    const activeProject = projects.find(p => p.is_active);

    if (!activeProject) {
      await bot.sendMessage(chatId, 
        'üìä –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' }
            ]]
          }
        }
      );
      return;
    }

    await bot.sendMessage(chatId, 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã...');

    // Get recent expenses (last 3 months)
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    
    const expenses = await expenseService.findByProject(activeProject.id, 1000, 0);
    const recentExpenses = expenses.filter(exp => 
      new Date(exp.expense_date) >= threeMonthsAgo
    );

    if (recentExpenses.length === 0) {
      await bot.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
      return;
    }

    // Use analytics service to generate AI response
    const analyticsService = require('../../services/analytics');
    const response = await analyticsService.askAIAnalytics(user.id, question);

    await bot.sendMessage(chatId, `ü§ñ ${response}`);

    // Increment usage counter
    await userService.incrementDailyUsage(user.id, 'ai_question');

  } catch (error) {
    logger.error('Ask command error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  handleStart,
  handleHelp,
  handleProjects,
  handleSync,
  handleSettings,
  handleCategories,
  handleUpgrade,
  handleInvite,
  handleEmail,
  handleConnect,
  handleDevPro,
  handleAsk
};
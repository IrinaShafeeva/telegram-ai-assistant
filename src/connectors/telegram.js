/**
 * Telegram Connector
 * Handles delivery to Telegram DMs and channels
 */

class TelegramConnector {
    constructor(bot) {
        this.bot = bot;
        this.name = 'telegram_dm';
    }

    async deliver(record, delivery) {
        const { target } = delivery;
        
        try {
            const message = this.formatMessage(record);
            
            // Send message
            await this.bot.sendMessage(target, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });

            return {
                message_sent: true,
                chat_id: target,
                message_length: message.length
            };
        } catch (error) {
            console.error('Telegram delivery error:', error);
            throw error;
        }
    }

    formatMessage(record) {
        const { kind, title, body, amount, currency, url, tags, assignee } = record;
        
        let message = '';
        let emoji = '';
        
        switch (kind) {
            case 'expense':
                emoji = 'üí∞';
                message = `${emoji} *–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥*\n\n`;
                message += `*${title}*\n`;
                if (amount) message += `–°—É–º–º–∞: ${amount} ${currency}\n`;
                if (body) message += `–î–µ—Ç–∞–ª–∏: ${body}\n`;
                break;
                
            case 'task':
                emoji = 'üìã';
                message = `${emoji} *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞*\n\n`;
                message += `*${title}*\n`;
                if (body) message += `${body}\n`;
                if (assignee?.display_name) message += `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${assignee.display_name}\n`;
                if (record.due_at) {
                    const dueDate = new Date(record.due_at).toLocaleDateString('ru-RU');
                    message += `–°—Ä–æ–∫: ${dueDate}\n`;
                }
                break;
                
            case 'bookmark':
                emoji = 'üîñ';
                message = `${emoji} *–ù–æ–≤–∞—è –∑–∞–∫–ª–∞–¥–∫–∞*\n\n`;
                message += `*${title}*\n`;
                if (url) message += `üîó ${url}\n`;
                if (body) message += `–ó–∞–º–µ—Ç–∫–∞: ${body}\n`;
                break;
                
            default:
                emoji = 'üìù';
                message = `${emoji} *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å*\n\n`;
                message += `*${title}*\n`;
                if (body) message += `${body}\n`;
        }
        
        if (tags && tags.length > 0) {
            message += `–¢–µ–≥–∏: ${tags.map(tag => `#${tag}`).join(' ')}\n`;
        }
        
        message += `\n_–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}_`;
        
        return message;
    }

    async validateTarget(target) {
        try {
            const chat = await this.bot.getChat(target);
            return {
                valid: true,
                chat_type: chat.type,
                chat_title: chat.title || chat.first_name
            };
        } catch (error) {
            return {
                valid: false,
                error: error.message
            };
        }
    }
}

class TelegramChannelConnector {
    constructor(bot) {
        this.bot = bot;
        this.name = 'telegram_channel';
    }

    async deliver(record, delivery) {
        const { target } = delivery;
        
        try {
            const message = this.formatChannelMessage(record);
            
            await this.bot.sendMessage(target, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });

            return {
                message_sent: true,
                channel_id: target,
                message_length: message.length
            };
        } catch (error) {
            console.error('Telegram channel delivery error:', error);
            throw error;
        }
    }

    formatChannelMessage(record) {
        const { kind, title, body, amount, currency, assignee } = record;
        
        let message = '';
        let emoji = '';
        
        switch (kind) {
            case 'expense':
                emoji = 'üí∏';
                message = `${emoji} *–†–∞—Å—Ö–æ–¥: ${title}*\n`;
                if (amount) message += `üí∞ ${amount} ${currency}\n`;
                break;
                
            case 'task':
                emoji = '‚úÖ';
                message = `${emoji} *–ó–∞–¥–∞—á–∞: ${title}*\n`;
                if (assignee?.display_name) message += `üë§ ${assignee.display_name}\n`;
                break;
                
            case 'bookmark':
                emoji = 'üîó';
                message = `${emoji} *–ó–∞–∫–ª–∞–¥–∫–∞: ${title}*\n`;
                if (record.url) message += `${record.url}\n`;
                break;
        }
        
        if (body && body.length < 100) {
            message += `üìù ${body}\n`;
        }
        
        return message;
    }
}

module.exports = { TelegramConnector, TelegramChannelConnector };
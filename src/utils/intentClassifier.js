const openaiService = require('../services/openai');
const logger = require('./logger');

/**
 * Hybrid intent classifier for user messages
 * Uses regex patterns for obvious cases, AI for ambiguous ones
 *
 * @param {string} text - User input text
 * @returns {Promise<string>} - 'transaction', 'analytics', or 'command'
 */
async function classifyIntent(text) {
  try {
    // Quick check for obvious transactions with amounts
    const hasAmount = /\d+\s*(—Ä—É–±–ª|—Ä—É–±|–¥–æ–ª–ª|–µ–≤—Ä–æ|–¥–æ–ª–ª–∞—Ä|–≥—Ä–∏–≤–µ–Ω|–≥—Ä–∏–≤–Ω|\$|‚Ç¨|‚ÇΩ|‚Ç¥)/i.test(text);
    if (hasAmount) {
      logger.info(`üéØ Classified as TRANSACTION (has amount): "${text}"`);
      return 'transaction';
    }

    // Quick check for obvious analytics questions
    const analyticsPatterns = [
      /–ø–æ–∫–∞–∂–∏?.*–ø–æ—Å–ª–µ–¥–Ω–∏–µ/i,
      /—Å–ø–∏—Å–æ–∫.*—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/i,
      /–ø–æ—Å–ª–µ–¥–Ω–∏–µ.*\d+.*–∑–∞–ø–∏—Å/i,
      /–ø–æ—Å–ª–µ–¥–Ω–∏–µ.*\d+.*—Ç—Ä–∞–Ω–∑–∞–∫—Ü/i,
      /–ø–æ—Å–ª–µ–¥–Ω–∏–µ.*\d+.*—Ä–∞—Å—Ö–æ–¥/i,
      /–ø–æ—Å–ª–µ–¥–Ω–∏–µ.*\d+.*–¥–æ—Ö–æ–¥/i,
      /—Å–∫–æ–ª—å–∫–æ.*–ø–æ—Ç—Ä–∞—Ç–∏–ª/i,
      /—Å–∫–æ–ª—å–∫–æ.*—Ç—Ä–∞—Ç/i,
      /–Ω–∞ —á—Ç–æ.*–ø–æ—Ç—Ä–∞—Ç–∏–ª/i,
      /–Ω–∞ —á—Ç–æ.*—Ç—Ä–∞—á—É/i,
      /–±–∞–ª–∞–Ω—Å/i,
      /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫/i,
      /–∞–Ω–∞–ª–∏—Ç–∏–∫/i,
      /–≤.*–∞–≤–≥—É—Å—Ç–µ/i,
      /–≤.*—Å–µ–Ω—Ç—è–±—Ä–µ/i,
      /–≤.*–æ–∫—Ç—è–±—Ä–µ/i,
      /–≤.*–Ω–æ—è–±—Ä–µ/i,
      /–≤.*–¥–µ–∫–∞–±—Ä–µ/i,
      /–≤.*—è–Ω–≤–∞—Ä–µ/i,
      /–≤.*—Ñ–µ–≤—Ä–∞–ª–µ/i,
      /–≤.*–º–∞—Ä—Ç–µ/i,
      /–≤.*–∞–ø—Ä–µ–ª–µ/i,
      /–≤.*–º–∞–µ/i,
      /–≤.*–∏—é–Ω–µ/i,
      /–≤.*–∏—é–ª–µ/i,
      /–∑–∞.*–º–µ—Å—è—Ü/i,
      /–∑–∞.*–Ω–µ–¥–µ–ª—é/i,
      /–ø–æ–∫–∞–∂–∏.*—Ä–∞—Å—Ö–æ–¥/i,
      /–ø–æ–∫–∞–∂–∏.*–¥–æ—Ö–æ–¥/i
    ];

    const isAnalytics = analyticsPatterns.some(pattern => pattern.test(text));
    if (isAnalytics) {
      logger.info(`üéØ Classified as ANALYTICS (pattern match): "${text}"`);
      return 'analytics';
    }

    // Quick check for obvious commands
    const commandPatterns = [
      /—Ö–æ—á—É.*–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/i,
      /—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.*–∑–∞–ø–∏—Å/i,
      /—É–¥–∞–ª–∏—Ç—å.*–∑–∞–ø–∏—Å/i,
      /–∏–∑–º–µ–Ω–∏—Ç—å.*–∑–∞–ø–∏—Å/i
    ];

    const isCommand = commandPatterns.some(pattern => pattern.test(text));
    if (isCommand) {
      logger.info(`üéØ Classified as COMMAND (pattern match): "${text}"`);
      return 'command';
    }

    // Use AI for ambiguous cases
    const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ö–°–¢: "${text}"

–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
1. TRANSACTION - –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞—Ç–µ –∏–ª–∏ –¥–æ—Ö–æ–¥–µ (–ø—Ä–∏–º–µ—Ä—ã: "25 –ø—Ä–æ–¥—É–∫—Ç—ã", "–∫—É–ø–∏–ª –∫–æ—Ñ–µ", "–ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ —Ç–∞–∫—Å–∏", "–∑–∞—Ä–∞–±–æ—Ç–∞–ª 5000")
2. ANALYTICS - –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ/–∞–Ω–∞–ª–∏–∑–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä—ã: "—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –µ–¥—É", "–±–∞–ª–∞–Ω—Å –∑–∞ –∞–≤–≥—É—Å—Ç", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ç", "–ø–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
3. COMMAND - –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–º–µ—Ä—ã: "—Ö–æ—á—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: TRANSACTION, ANALYTICS –∏–ª–∏ COMMAND`;

    const response = await openaiService.generateResponse(prompt);
    const result = response.trim().toLowerCase();

    logger.info(`ü§ñ AI classified as: ${result.toUpperCase()} for text: "${text}"`);

    if (result === 'analytics') return 'analytics';
    if (result === 'command') return 'command';
    return 'transaction'; // Default

  } catch (error) {
    logger.error('Error classifying intent:', error);
    return 'transaction'; // Safe fallback on error
  }
}

/**
 * Check if text is an analytics question (backward compatibility)
 * @param {string} text - User input text
 * @returns {Promise<boolean>} - true if analytics, false otherwise
 */
async function isAnalyticsQuestion(text) {
  const intent = await classifyIntent(text);
  return intent === 'analytics';
}

module.exports = {
  classifyIntent,
  isAnalyticsQuestion
};

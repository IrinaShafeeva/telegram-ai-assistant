#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è keywords
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);

async function addKeywords() {
  console.log('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è keywords...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ custom_categories...');
    const { data: testCategory, error: testError } = await supabase
      .from('custom_categories')
      .select('*')
      .limit(1);

    if (testError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è categories:', testError.message);
    } else {
      console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ categories —Ä–∞–±–æ—Ç–∞–µ—Ç');

      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å keywords
      if (testCategory && testCategory.length > 0) {
        const { error: updateError } = await supabase
          .from('categories')
          .update({ keywords: 'test' })
          .eq('id', testCategory[0].id);

        if (updateError) {
          console.log('‚ùå –ü–æ–ª–µ keywords –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ categories:', updateError.message);
          console.log('üìù –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ Supabase Dashboard:');
          console.log('   ALTER TABLE categories ADD COLUMN keywords TEXT;');
        } else {
          console.log('‚úÖ –ü–æ–ª–µ keywords —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ categories');

          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          await supabase
            .from('categories')
            .update({ keywords: null })
            .eq('id', testCategory[0].id);
        }
      }
    }

    console.log('\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ projects...');
    const { data: testProject, error: testProjError } = await supabase
      .from('projects')
      .select('*')
      .limit(1);

    if (testProjError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è projects:', testProjError.message);
    } else {
      console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ projects —Ä–∞–±–æ—Ç–∞–µ—Ç');

      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å keywords
      if (testProject && testProject.length > 0) {
        const { error: updateError } = await supabase
          .from('projects')
          .update({ keywords: 'test' })
          .eq('id', testProject[0].id);

        if (updateError) {
          console.log('‚ùå –ü–æ–ª–µ keywords –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ projects:', updateError.message);
          console.log('üìù –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ Supabase Dashboard:');
          console.log('   ALTER TABLE projects ADD COLUMN keywords TEXT;');
        } else {
          console.log('‚úÖ –ü–æ–ª–µ keywords —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ projects');

          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          await supabase
            .from('projects')
            .update({ keywords: null })
            .eq('id', testProject[0].id);
        }
      }
    }

    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

addKeywords().then(() => {
  console.log('\nüìã SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Supabase Dashboard:');
  console.log('ALTER TABLE categories ADD COLUMN keywords TEXT;');
  console.log('ALTER TABLE projects ADD COLUMN keywords TEXT;');
  console.log('\n‚ú® –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!');
  process.exit(0);
});
/**
 * –¢–µ—Å—Ç taskProcessor
 */

const { processTask } = require('./src/services/taskProcessor');

async function testTaskProcessor() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ taskProcessor...\n');

    const mockContext = {
        tenant_id: 'test_tenant',
        user_id: 'test_user'
    };

    const mockChatId = 123456789;

    // –¢–µ—Å—Ç 1: –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
    console.log('üìã –¢–µ—Å—Ç 1: –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞...');
    try {
        const result = await processTask('–ó–∞–¥–∞—á–∞: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ', mockContext, mockChatId);
        console.log('‚úÖ –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ error:', error.message);
    }

    // –¢–µ—Å—Ç 2: –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    console.log('\nüìã –¢–µ—Å—Ç 2: –ó–∞–¥–∞—á–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞...');
    try {
        const result = await processTask('–ó–∞–¥–∞—á–∞ –¥–ª—è –ò–≤–∞–Ω–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫', mockContext, mockChatId);
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ error:', error.message);
    }

    // –¢–µ—Å—Ç 3: –ó–∞–¥–∞—á–∞ —Å –≥–ª–∞–≥–æ–ª–æ–º
    console.log('\nüìã –¢–µ—Å—Ç 3: –ó–∞–¥–∞—á–∞ —Å –≥–ª–∞–≥–æ–ª–æ–º...');
    try {
        const result = await processTask('–ò–≤–∞–Ω —Å–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç', mockContext, mockChatId);
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥–ª–∞–≥–æ–ª–æ–º result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å –≥–ª–∞–≥–æ–ª–æ–º error:', error.message);
    }

    // –¢–µ—Å—Ç 4: –ó–∞–¥–∞—á–∞ –ø–æ–∫—É–ø–∫–∏
    console.log('\nüìã –¢–µ—Å—Ç 4: –ó–∞–¥–∞—á–∞ –ø–æ–∫—É–ø–∫–∏...');
    try {
        const result = await processTask('–ú–∞—à–∞ –∫—É–ø–∏ –ø—Ä–æ–¥—É–∫—Ç—ã', mockContext, mockChatId);
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–∫—É–ø–∫–∏ result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø–æ–∫—É–ø–∫–∏ error:', error.message);
    }

    // –¢–µ—Å—Ç 5: –ó–∞–¥–∞—á–∞ –∑–≤–æ–Ω–∫–∞
    console.log('\nüìã –¢–µ—Å—Ç 5: –ó–∞–¥–∞—á–∞ –∑–≤–æ–Ω–∫–∞...');
    try {
        const result = await processTask('–ü–æ–ø—Ä–æ—Å–∏ –í–∞–Ω—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', mockContext, mockChatId);
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–≤–æ–Ω–∫–∞ result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –∑–≤–æ–Ω–∫–∞ error:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ taskProcessor –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

testTaskProcessor().catch(console.error);

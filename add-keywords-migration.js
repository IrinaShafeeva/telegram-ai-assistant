#!/usr/bin/env node

/**
 * –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è keywords –≤ —Ç–∞–±–ª–∏—Ü—ã categories –∏ projects
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);

async function addKeywordsColumns() {
  console.log('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π keywords...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º keywords –≤ categories
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ categories...');
    const { data: catColumns } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'categories')
      .eq('column_name', 'keywords');

    if (!catColumns || catColumns.length === 0) {
      // –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–º UPDATE-–∑–∞–ø—Ä–æ—Å–æ–º
      const { error: catError } = await supabase
        .from('categories')
        .update({ keywords: '' })
        .eq('id', '00000000-0000-0000-0000-000000000000'); // Fake update just to add column

      console.log('‚ÑπÔ∏è –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ keywords –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
      console.log('   ALTER TABLE categories ADD COLUMN keywords TEXT;');
    } else {
      console.log('‚úÖ –ü–æ–ª–µ keywords —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ categories');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º keywords –≤ projects
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ projects...');
    const { data: projColumns } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'projects')
      .eq('column_name', 'keywords');

    if (!projColumns || projColumns.length === 0) {
      console.log('‚ÑπÔ∏è –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ keywords –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
      console.log('   ALTER TABLE projects ADD COLUMN keywords TEXT;');
    } else {
      console.log('‚úÖ –ü–æ–ª–µ keywords —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ projects');
    }

    console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
addKeywordsColumns().then(() => {
  console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º.');
  process.exit(0);
});
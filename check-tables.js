const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ Supabase...\n');

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function checkTables() {
    try {
        console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...\n');
        
        // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        const expectedTables = [
            'tenants',
            'users', 
            'team_members',
            'records',
            'routes',
            'deliveries',
            'connections',
            'destinations',
            'attachments',
            'categories',
            'merchant_rules',
            'user_tags',
            'entitlements'
        ];
        
        for (const tableName of expectedTables) {
            try {
                const { data, error } = await supabase
                    .from(tableName)
                    .select('count')
                    .limit(1);
                    
                if (error) {
                    console.log(`‚ùå ${tableName}: ${error.message}`);
                } else {
                    console.log(`‚úÖ ${tableName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
                }
            } catch (err) {
                console.log(`‚ùå ${tableName}: –æ—à–∏–±–∫–∞ - ${err.message}`);
            }
        }
        
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è tenant
        const testTenant = {
            name: 'test_chat_' + Date.now(),
            plan: 'free'
        };
        
        const { data: tenantData, error: tenantError } = await supabase
            .from('tenants')
            .insert(testTenant)
            .select()
            .single();
            
        if (tenantError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è tenant:', tenantError.message);
        } else {
            console.log('‚úÖ Tenant —Å–æ–∑–¥–∞–Ω:', tenantData.id);
            
            // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è user
            const testUser = {
                tenant_id: tenantData.id,
                name: 'Test User',
                tg_chat_id: '123456789',
                role: 'user'
            };
            
            const { data: userData, error: userError } = await supabase
                .from('users')
                .insert(testUser)
                .select()
                .single();
                
            if (userError) {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è user:', userError.message);
            } else {
                console.log('‚úÖ User —Å–æ–∑–¥–∞–Ω:', userData.id);
                
                // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è record
                const testRecord = {
                    tenant_id: tenantData.id,
                    user_id: userData.id,
                    kind: 'expense',
                    title: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥',
                    amount: 1000,
                    currency: 'RUB'
                };
                
                const { data: recordData, error: recordError } = await supabase
                    .from('records')
                    .insert(testRecord)
                    .select()
                    .single();
                    
                if (recordError) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è record:', recordError.message);
                } else {
                    console.log('‚úÖ Record —Å–æ–∑–¥–∞–Ω:', recordData.id);
                    
                    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await supabase.from('records').delete().eq('id', recordData.id);
                    await supabase.from('users').delete().eq('id', userData.id);
                    await supabase.from('tenants').delete().eq('id', tenantData.id);
                    
                    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
                }
            }
        }
        
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

checkTables().then(() => {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüí° –ï—Å–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –≤–∞—à –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!');
    process.exit(0);
}).catch(console.error);

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config();

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...\n');

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY');
    process.exit(1);
}

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function fixUsersTable() {
    try {
        console.log('üìä –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ users...\n');
        
        // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        const sqlContent = fs.readFileSync('fix-users-table.sql', 'utf8');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
        const { data, error } = await supabase.rpc('exec_sql', { sql: sqlContent });
        
        if (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å—Ç—è–º
            console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å—Ç—è–º...');
            
            const queries = [
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É meta
                `DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'users' AND column_name = 'meta'
                    ) THEN
                        ALTER TABLE users ADD COLUMN meta JSONB DEFAULT '{}';
                        RAISE NOTICE 'Added meta column to users table';
                    ELSE
                        RAISE NOTICE 'Meta column already exists in users table';
                    END IF;
                END$$;`,
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role
                `DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'users' AND column_name = 'role'
                    ) THEN
                        ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user';
                        RAISE NOTICE 'Added role column to users table';
                    ELSE
                        RAISE NOTICE 'Role column already exists in users table';
                    END IF;
                END$$;`,
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É username
                `DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'users' AND column_name = 'username'
                    ) THEN
                        ALTER TABLE users ADD COLUMN username TEXT;
                        RAISE NOTICE 'Added username column to users table';
                    ELSE
                        RAISE NOTICE 'Username column already exists in users table';
                    END IF;
                END$$;`,
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É first_name
                `DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'users' AND column_name = 'first_name'
                    ) THEN
                        ALTER TABLE users ADD COLUMN first_name TEXT;
                        RAISE NOTICE 'Added first_name column to users table';
                    ELSE
                        RAISE NOTICE 'First_name column already exists in users table';
                    END IF;
                END$$;`,
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_name
                `DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'users' AND column_name = 'last_name'
                    ) THEN
                        ALTER TABLE users ADD COLUMN last_name TEXT;
                        RAISE NOTICE 'Added last_name column to users table';
                    ELSE
                        RAISE NOTICE 'Last_name column already exists in users table';
                    END IF;
                END$$;`
            ];
            
            for (let i = 0; i < queries.length; i++) {
                console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${i + 1}/${queries.length}...`);
                try {
                    const { error: queryError } = await supabase.rpc('exec_sql', { sql: queries[i] });
                    if (queryError) {
                        console.log(`‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å ${i + 1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:`, queryError.message);
                    } else {
                        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    }
                } catch (execError) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ${i + 1}:`, execError.message);
                }
            }
        } else {
            console.log('‚úÖ SQL –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users...');
        
        const { data: columns, error: columnsError } = await supabase
            .from('information_schema.columns')
            .select('column_name, data_type, is_nullable, column_default')
            .eq('table_name', 'users')
            .order('ordinal_position');
            
        if (columnsError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', columnsError.message);
        } else {
            console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
            columns.forEach(col => {
                console.log(`‚Ä¢ ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'} ${col.column_default ? `default: ${col.column_default}` : ''}`);
            });
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π tenant
        const { data: tenant, error: tenantError } = await supabase
            .from('tenants')
            .insert({
                name: 'test_fix_' + Date.now(),
                plan: 'free'
            })
            .select()
            .single();
            
        if (tenantError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è tenant:', tenantError.message);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUser = {
            tenant_id: tenant.id,
            tg_chat_id: 'test_fix_' + Date.now(),
            username: 'testuser',
            first_name: 'Test',
            last_name: 'User',
            role: 'user',
            meta: { test: 'value', setup_date: new Date().toISOString() }
        };
        
        const { data: user, error: userError } = await supabase
            .from('users')
            .insert(testUser)
            .select()
            .single();
            
        if (userError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', user.id);
            console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                username: user.username,
                first_name: user.first_name,
                last_name: user.last_name,
                role: user.role,
                meta: user.meta
            });
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await supabase.from('users').delete().eq('id', user.id);
            await supabase.from('tenants').delete().eq('id', tenant.id);
        }
        
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.log('Stack trace:', error.stack);
    }
}

fixUsersTable().then(() => {
    console.log('\nüéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    process.exit(0);
}).catch(console.error);


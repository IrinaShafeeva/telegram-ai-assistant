require('dotenv').config();
const { supabase } = require('./src/config/database');

async function createTables() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Supabase API...\n');
    
    try {
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tenants
        console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É tenants...');
        const { error: tenantsError } = await supabase
            .from('tenants')
            .insert({
                name: 'default_tenant',
                plan: 'free'
            })
            .select();
            
        if (tenantsError) {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ tenants —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', tenantsError.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tenants —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É records
        console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É records...');
        const { error: recordsError } = await supabase
            .from('records')
            .insert({
                tenant_id: '00000000-0000-0000-0000-000000000000', // placeholder
                user_id: '00000000-0000-0000-0000-000000000000',   // placeholder
                kind: 'test',
                title: 'Test Record',
                body: 'This is a test record'
            })
            .select();
            
        if (recordsError) {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ records —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', recordsError.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ records —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
        const { data: tables, error: tablesError } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .eq('table_schema', 'public');
            
        if (tablesError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:', tablesError.message);
        } else {
            console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
            tables.forEach(table => {
                console.log(`   ‚Ä¢ ${table.table_name}`);
            });
        }
        
        console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
    }
}

createTables();

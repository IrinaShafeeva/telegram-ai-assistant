const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('๐งช ะขะตััะธัะพะฒะฐะฝะธะต ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั...\n');

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    console.log('โ ะัะธะฑะบะฐ: ะััััััะฒััั ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั');
    process.exit(1);
}

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function testTeamSetup() {
    try {
        console.log('๐ ะกะพะทะดะฐะตะผ ัะตััะพะฒัะต ะดะฐะฝะฝัะต...\n');
        
        // ะกะพะทะดะฐะตะผ tenant
        const { data: tenant, error: tenantError } = await supabase
            .from('tenants')
            .insert({
                name: 'test_team_setup_' + Date.now(),
                plan: 'free'
            })
            .select()
            .single();
            
        if (tenantError) {
            console.log('โ ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั tenant:', tenantError.message);
            return;
        }
        
        console.log('โ Tenant ัะพะทะดะฐะฝ:', tenant.id);
        
        // ะกะพะทะดะฐะตะผ ะฟะพะปัะทะพะฒะฐัะตะปั
        const { data: user, error: userError } = await supabase
            .from('users')
            .insert({
                tenant_id: tenant.id,
                tg_chat_id: 'test_team_setup_' + Date.now(),
                username: 'testuser',
                first_name: 'Test',
                last_name: 'User',
                tier: 'free',
                meta: {}
            })
            .select()
            .single();
            
        if (userError) {
            console.log('โ ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั ะฟะพะปัะทะพะฒะฐัะตะปั:', userError.message);
            return;
        }
        
        console.log('โ ะะพะปัะทะพะฒะฐัะตะปั ัะพะทะดะฐะฝ:', user.id);
        
        // ะขะตัั 1: ะัะพะฒะตััะตะผ ัะพััะพัะฝะธะต ะฑะตะท ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั
        console.log('\n๐งช ะขะตัั 1: ะกะพััะพัะฝะธะต ะฑะตะท ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั');
        const context1 = {
            tenant_id: tenant.id,
            user_id: user.id,
            tg_chat_id: user.tg_chat_id,
            meta: user.meta,
            teamSetupState: null
        };
        
        console.log('๐ ะะพะฝัะตะบัั:', context1);
        console.log('๐ teamSetupState:', context1.teamSetupState);
        console.log('๐ ะฃัะปะพะฒะธะต !context.teamSetupState || !context.teamSetupState.step:', !(context1.teamSetupState && context1.teamSetupState.step));
        console.log('โ ะกะพะพะฑัะตะฝะธั ะะะะะะซ ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets');
        
        // ะขะตัั 2: ะัะพะฒะตััะตะผ ัะพััะพัะฝะธะต ั ะฝะฐัััะพะนะบะพะน ะบะพะผะฐะฝะดั
        console.log('\n๐งช ะขะตัั 2: ะกะพััะพัะฝะธะต ั ะฝะฐัััะพะนะบะพะน ะบะพะผะฐะฝะดั');
        const teamSetupState = {
            step: 'name',
            memberData: {},
            createdAt: new Date().toISOString(),
            lastUpdated: new Date().toISOString()
        };
        
        const context2 = {
            tenant_id: tenant.id,
            user_id: user.id,
            tg_chat_id: user.tg_chat_id,
            meta: { ...user.meta, teamSetupState },
            teamSetupState: teamSetupState
        };
        
        console.log('๐ ะะพะฝัะตะบัั:', context2);
        console.log('๐ teamSetupState:', context2.teamSetupState);
        console.log('๐ ะฃัะปะพะฒะธะต !context.teamSetupState || !context.teamSetupState.step:', !(context2.teamSetupState && context2.teamSetupState.step));
        console.log('โ ะกะพะพะฑัะตะฝะธั ะะ ะะะะะะซ ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets');
        
        // ะขะตัั 3: ะัะพะฒะตััะตะผ ัะพััะพัะฝะธะต ั ะฟััััะผ teamSetupState
        console.log('\n๐งช ะขะตัั 3: ะกะพััะพัะฝะธะต ั ะฟััััะผ teamSetupState');
        const context3 = {
            tenant_id: tenant.id,
            user_id: user.id,
            tg_chat_id: user.tg_chat_id,
            meta: { ...user.meta, teamSetupState: {} },
            teamSetupState: {}
        };
        
        console.log('๐ ะะพะฝัะตะบัั:', context3);
        console.log('๐ teamSetupState:', context3.teamSetupState);
        console.log('๐ ะฃัะปะพะฒะธะต !context.teamSetupState || !context.teamSetupState.step:', !(context3.teamSetupState && context3.teamSetupState.step));
        console.log('โ ะกะพะพะฑัะตะฝะธั ะะะะะะซ ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets (ะฝะตั step)');
        
        // ะขะตัั 4: ะัะพะฒะตััะตะผ ัะพััะพัะฝะธะต ั teamSetupState ะฑะตะท step
        console.log('\n๐งช ะขะตัั 4: ะกะพััะพัะฝะธะต ั teamSetupState ะฑะตะท step');
        const teamSetupStateNoStep = {
            memberData: {},
            createdAt: new Date().toISOString(),
            lastUpdated: new Date().toISOString()
        };
        
        const context4 = {
            tenant_id: tenant.id,
            user_id: user.id,
            tg_chat_id: user.tg_chat_id,
            meta: { ...user.meta, teamSetupState: teamSetupStateNoStep },
            teamSetupState: teamSetupStateNoStep
        };
        
        console.log('๐ ะะพะฝัะตะบัั:', context4);
        console.log('๐ teamSetupState:', context4.teamSetupState);
        console.log('๐ ะฃัะปะพะฒะธะต !context.teamSetupState || !context.teamSetupState.step:', !(context4.teamSetupState && context4.teamSetupState.step));
        console.log('โ ะกะพะพะฑัะตะฝะธั ะะะะะะซ ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets (ะฝะตั step)');
        
        // ะขะตัั 5: ะกะธะผัะปะธััะตะผ ัะพััะฐะฝะตะฝะธะต ัะพััะพัะฝะธั ะฒ ะฑะฐะทั ะดะฐะฝะฝัั
        console.log('\n๐งช ะขะตัั 5: ะกะพััะฐะฝะตะฝะธะต ัะพััะพัะฝะธั ะฒ ะฑะฐะทั ะดะฐะฝะฝัั');
        
        // ะะฑะฝะพะฒะปัะตะผ ะฟะพะปัะทะพะฒะฐัะตะปั ั ัะพััะพัะฝะธะตะผ ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั
        const { error: updateError } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...user.meta,
                    teamSetupState: teamSetupState
                }
            })
            .eq('id', user.id);
            
        if (updateError) {
            console.log('โ ะัะธะฑะบะฐ ะพะฑะฝะพะฒะปะตะฝะธั ัะพััะพัะฝะธั:', updateError.message);
        } else {
            console.log('โ ะกะพััะพัะฝะธะต ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั ัะพััะฐะฝะตะฝะพ ะฒ ะฑะฐะทั ะดะฐะฝะฝัั');
            
            // ะะพะปััะฐะตะผ ะพะฑะฝะพะฒะปะตะฝะฝะพะณะพ ะฟะพะปัะทะพะฒะฐัะตะปั
            const { data: updatedUser, error: getError } = await supabase
                .from('users')
                .select('*')
                .eq('id', user.id)
                .single();
                
            if (getError) {
                console.log('โ ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะพะฑะฝะพะฒะปะตะฝะฝะพะณะพ ะฟะพะปัะทะพะฒะฐัะตะปั:', getError.message);
            } else {
                console.log('โ ะะฑะฝะพะฒะปะตะฝะฝัะน ะฟะพะปัะทะพะฒะฐัะตะปั ะฟะพะปััะตะฝ');
                console.log('๐ meta:', updatedUser.meta);
                console.log('๐ teamSetupState ะฒ meta:', updatedUser.meta?.teamSetupState);
                
                const context5 = {
                    tenant_id: tenant.id,
                    user_id: updatedUser.id,
                    tg_chat_id: updatedUser.tg_chat_id,
                    meta: updatedUser.meta,
                    teamSetupState: updatedUser.meta?.teamSetupState
                };
                
                console.log('๐ ะฃัะปะพะฒะธะต !context.teamSetupState || !context.teamSetupState.step:', !(context5.teamSetupState && context5.teamSetupState.step));
                console.log('โ ะกะพะพะฑัะตะฝะธั ะะ ะะะะะะซ ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets');
            }
        }
        
        // ะัะธัะฐะตะผ ัะพััะพัะฝะธะต
        console.log('\n๐งน ะัะธัะฐะตะผ ัะพััะพัะฝะธะต ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั...');
        const { error: clearError } = await supabase
            .from('users')
            .update({ 
                meta: {
                    ...user.meta,
                    teamSetupState: null
                }
            })
            .eq('id', user.id);
            
        if (clearError) {
            console.log('โ ะัะธะฑะบะฐ ะพัะธััะบะธ ัะพััะพัะฝะธั:', clearError.message);
        } else {
            console.log('โ ะกะพััะพัะฝะธะต ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั ะพัะธัะตะฝะพ');
        }
        
        // ะฃะดะฐะปัะตะผ ัะตััะพะฒัะต ะดะฐะฝะฝัะต
        console.log('\n๐๏ธ ะฃะดะฐะปัะตะผ ัะตััะพะฒัะต ะดะฐะฝะฝัะต...');
        await supabase.from('users').delete().eq('id', user.id);
        await supabase.from('tenants').delete().eq('id', tenant.id);
        console.log('โ ะขะตััะพะฒัะต ะดะฐะฝะฝัะต ัะดะฐะปะตะฝั');
        
        console.log('\n๐ ะัะพะณะพะฒัะต ะฒัะฒะพะดั:');
        console.log('โ ะะพะปะพะฝะบะฐ meta ัะฐะฑะพัะฐะตั ะบะพััะตะบัะฝะพ');
        console.log('โ ะกะพััะพัะฝะธะต ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั ัะพััะฐะฝัะตััั ะฒ meta.teamSetupState');
        console.log('โ ะะพะณะธะบะฐ ะฟัะพะฒะตัะบะธ !context.teamSetupState || !context.teamSetupState.step ัะฐะฑะพัะฐะตั ะฟัะฐะฒะธะปัะฝะพ');
        console.log('โ ะะพ ะฒัะตะผั ะฝะฐัััะพะนะบะธ ะบะพะผะฐะฝะดั ัะพะพะฑัะตะฝะธั ะะ ะฑัะดัั ะทะฐะฟะธััะฒะฐัััั ะฒ Google Sheets');
        
    } catch (error) {
        console.log('โ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error.message);
        console.log('Stack trace:', error.stack);
    }
}

testTeamSetup().then(() => {
    console.log('\n๐ฏ ะขะตััะธัะพะฒะฐะฝะธะต ะทะฐะฒะตััะตะฝะพ!');
    process.exit(0);
}).catch(console.error);


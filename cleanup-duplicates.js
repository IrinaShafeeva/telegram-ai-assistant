require('dotenv').config();
const { supabase } = require('./src/services/supabase');

async function cleanupDuplicateProjects() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: projects, error } = await supabase
      .from('projects')
      .select('*')
      .eq('owner_id', 182087110) // –¢–≤–æ–π user_id
      .order('created_at', { ascending: true });
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const grouped = projects.reduce((acc, project) => {
      if (!acc[project.name]) {
        acc[project.name] = [];
      }
      acc[project.name].push(project);
      return acc;
    }, {});
    
    for (const [name, projectsGroup] of Object.entries(grouped)) {
      if (projectsGroup.length > 1) {
        console.log(`\nüî• –î—É–±–ª–∏–∫–∞—Ç—ã "${name}": ${projectsGroup.length} —à—Ç.`);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π (–∏–ª–∏ —Ç–æ—Ç —á—Ç–æ —Å Google Sheets)
        const keepProject = projectsGroup.find(p => p.google_sheet_id) || projectsGroup[0];
        const toDelete = projectsGroup.filter(p => p.id !== keepProject.id);
        
        console.log(`‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: ${keepProject.id} (${keepProject.google_sheet_id ? '—Å Google Sheets' : '–ø–µ—Ä–≤—ã–π'})`);
        console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ${toDelete.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for (const project of toDelete) {
          const { error: deleteError } = await supabase
            .from('projects')
            .delete()
            .eq('id', project.id);
            
          if (deleteError) {
            console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${project.id}:`, deleteError);
          } else {
            console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω: ${project.id}`);
          }
        }
      }
    }
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (err) {
    console.error('Exception:', err);
  }
  
  process.exit(0);
}

cleanupDuplicateProjects();
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const { supabase } = require('./src/config/database');
require('dotenv').config();

const TENANT_ID = '3292135f-f4f9-4767-a6ce-71774c170cb0';

async function checkIntegrations() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞:', TENANT_ID);
    console.log('=' .repeat(50));
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º connections (Google API)
        const { data: connections, error: connError } = await supabase
            .from('connections')
            .select('*')
            .eq('tenant_id', TENANT_ID);
            
        if (connError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è connections:', connError.message);
        } else {
            console.log('üîó Connections –Ω–∞–π–¥–µ–Ω–æ:', connections.length);
            connections.forEach(conn => {
                console.log('  üìã ID:', conn.id);
                console.log('  üîß Provider:', conn.provider);
                console.log('  üîë Scopes:', conn.scopes);
                console.log('  üìÖ –°–æ–∑–¥–∞–Ω:', new Date(conn.created_at).toLocaleString('ru'));
                console.log('  ---');
            });
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º destinations (Google Sheets/Calendar)
        const { data: destinations, error: destError } = await supabase
            .from('destinations')
            .select('*')
            .eq('tenant_id', TENANT_ID);
            
        if (destError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è destinations:', destError.message);
        } else {
            console.log('\nüìã Destinations –Ω–∞–π–¥–µ–Ω–æ:', destinations.length);
            destinations.forEach(dest => {
                console.log('  üìã ID:', dest.id);
                console.log('  üìä Type:', dest.type);
                console.log('  üîß Provider:', dest.provider);
                console.log('  üÜî External ID:', dest.external_id);
                console.log('  üìÖ –°–æ–∑–¥–∞–Ω:', new Date(dest.created_at).toLocaleString('ru'));
                console.log('  ---');
            });
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º team_members
        const { data: members, error: membersError } = await supabase
            .from('team_members')
            .select('*')
            .eq('tenant_id', TENANT_ID);
            
        if (membersError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è team_members:', membersError.message);
        } else {
            console.log('\nüë• Team Members –Ω–∞–π–¥–µ–Ω–æ:', members.length);
            members.forEach(member => {
                console.log('  üìã ID:', member.id);
                console.log('  üë§ Display Name:', member.display_name);
                console.log('  üì± TG Chat ID:', member.tg_chat_id);
                console.log('  üìÖ GCal Connection ID:', member.gcal_connection_id);
                console.log('  ‚úÖ Active:', member.is_active);
                console.log('  üìÖ –°–æ–∑–¥–∞–Ω:', new Date(member.created_at).toLocaleString('ru'));
                console.log('  ---');
            });
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('tenant_id', TENANT_ID)
            .single();
            
        if (userError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
        } else {
            console.log('\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
            console.log('  üìã ID:', user.id);
            console.log('  üì± TG Chat ID:', user.tg_chat_id);
            console.log('  üë§ Username:', user.username);
            console.log('  üé≠ First Name:', user.first_name);
            console.log('  üìä Tier:', user.tier);
            console.log('  üìã Meta:', JSON.stringify(user.meta, null, 2));
        }
        
        console.log('\n' + '=' .repeat(50));
        console.log('üìä –ò—Ç–æ–≥–∏:');
        console.log('‚Ä¢ Google Connections:', connections ? connections.length : 0);
        console.log('‚Ä¢ Destinations (Sheets/Calendar):', destinations ? destinations.length : 0);
        console.log('‚Ä¢ Team Members:', members ? members.length : 0);
        
        return {
            connections: connections || [],
            destinations: destinations || [],
            members: members || [],
            user: user
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        return null;
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
    checkIntegrations().then(result => {
        if (result) {
            console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
            
            if (result.connections.length === 0) {
                console.log('‚Ä¢ –ù–µ—Ç Google API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π - –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ /setup');
            }
            
            if (result.destinations.length === 0) {
                console.log('‚Ä¢ –ù–µ—Ç Google Sheets/Calendar - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /sheets –∏–ª–∏ /team');
            }
            
            if (result.members.length === 0) {
                console.log('‚Ä¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /team');
            }
            
            console.log('\nüîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar:');
            console.log('1. –í Google Cloud Console –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
            console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥—ã');
            console.log('3. Email —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ credentials.json');
        }
    }).catch(console.error);
}

module.exports = { checkIntegrations };
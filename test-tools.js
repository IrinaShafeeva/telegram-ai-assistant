/**
 * –¢–µ—Å—Ç AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */

const { ToolsService } = require('./src/tools');

async function testTools() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');

    const toolsService = new ToolsService();

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
    const tools = toolsService.getTools();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:`);
    tools.forEach((tool, index) => {
        console.log(`   ${index + 1}. ${tool.name} - ${tool.description}`);
    });

    // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ resolve_person
    console.log('\nüìã –¢–µ—Å—Ç 2: resolve_person...');
    try {
        const result = await toolsService.executeTool('resolve_person', {
            name: 'test_user'
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ resolve_person result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è resolve_person error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ add_expense
    console.log('\nüìã –¢–µ—Å—Ç 3: add_expense...');
    try {
        const result = await toolsService.executeTool('add_expense', {
            title: 'Test Expense',
            amount: -1000,
            currency: 'RUB',
            body: 'Test expense for testing'
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ add_expense result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è add_expense error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ add_task
    console.log('\nüìã –¢–µ—Å—Ç 4: add_task...');
    try {
        const result = await toolsService.executeTool('add_task', {
            title: 'Test Task',
            body: 'Test task for testing',
            assignee: 'test_user',
            due_at: new Date().toISOString()
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ add_task result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è add_task error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ add_bookmark
    console.log('\nüìã –¢–µ—Å—Ç 5: add_bookmark...');
    try {
        const result = await toolsService.executeTool('add_bookmark', {
            title: 'Test Bookmark',
            url: 'https://example.com',
            body: 'Test bookmark for testing'
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ add_bookmark result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è add_bookmark error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    // –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ search
    console.log('\nüìã –¢–µ—Å—Ç 6: search...');
    try {
        const result = await toolsService.executeTool('search', {
            query: 'test',
            kind: 'expense',
            limit: 5
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ search result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è search error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    // –¢–µ—Å—Ç 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ route
    console.log('\nüìã –¢–µ—Å—Ç 7: route...');
    try {
        const result = await toolsService.executeTool('route', {
            record: {
                id: 1,
                title: 'Test Record',
                kind: 'expense',
                tenant_id: 'test_tenant'
            }
        }, {
            tenant_id: 'test_tenant',
            user_id: 'test_user'
        });
        console.log('‚úÖ route result:', result);
    } catch (error) {
        console.log('‚ö†Ô∏è route error (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ë–î):', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

testTools().catch(console.error);

/**
 * Team Setup Script
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Google Calendar –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

const { createClient } = require('@supabase/supabase-js');
const readline = require('readline');
require('dotenv').config();

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
);

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setupTeam() {
    console.log('üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Google Calendar –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º tenant
        const { data: tenants, error: tenantError } = await supabase
            .from('tenants')
            .select('*')
            .limit(1);
            
        if (tenantError) throw tenantError;
        
        let tenantId;
        if (tenants && tenants.length > 0) {
            tenantId = tenants[0].id;
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tenant: ${tenants[0].name}`);
        } else {
            const { data: tenant, error } = await supabase
                .from('tenants')
                .insert({ name: 'default_tenant', plan: 'free' })
                .select()
                .single();
                
            if (error) throw error;
            tenantId = tenant.id;
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π tenant');
        }
        
        console.log('\nüìã –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...\n');
        
        const teamMembers = [];
        let continueAdding = true;
        
        while (continueAdding) {
            console.log(`\n--- –£—á–∞—Å—Ç–Ω–∏–∫ ${teamMembers.length + 1} ---`);
            
            const displayName = await question('üë§ –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ');
            if (!displayName.trim()) break;
            
            const aliases = await question('üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
            const tgChatId = await question('üì± Telegram Chat ID (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
            const gcalEmail = await question('üìÖ Google Calendar Email (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
            const gcalId = await question('üÜî Google Calendar ID (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
            
            teamMembers.push({
                tenant_id: tenantId,
                display_name: displayName.trim(),
                aliases: aliases.trim() ? aliases.split(',').map(a => a.trim()) : [],
                tg_chat_id: tgChatId.trim() || null,
                gcal_connection_id: null, // –ë—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–∑–∂–µ
                meta: {
                    gcal_email: gcalEmail.trim() || null,
                    gcal_id: gcalId.trim() || null,
                    setup_date: new Date().toISOString()
                },
                is_active: true
            });
            
            const more = await question('\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞? (y/n): ');
            continueAdding = more.toLowerCase() === 'y' || more.toLowerCase() === '–¥–∞';
        }
        
        if (teamMembers.length === 0) {
            console.log('\n‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            return;
        }
        
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const { data: savedMembers, error: saveError } = await supabase
            .from('team_members')
            .upsert(teamMembers, { 
                onConflict: 'tenant_id,display_name',
                ignoreDuplicates: false 
            })
            .select();
            
        if (saveError) throw saveError;
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedMembers.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã`);
        
        // –°–æ–∑–¥–∞–µ–º Google Calendar connections
        console.log('\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
        
        for (const member of savedMembers) {
            if (member.meta.gcal_email || member.meta.gcal_id) {
                const { data: connection, error: connError } = await supabase
                    .from('connections')
                    .upsert({
                        tenant_id: tenantId,
                        provider: 'google',
                        secret_ref: `gcal_${member.id}`,
                        scopes: ['https://www.googleapis.com/auth/calendar'],
                        owner_user_id: null,
                        meta: {
                            member_id: member.id,
                            gcal_email: member.meta.gcal_email,
                            gcal_id: member.meta.gcal_id,
                            type: 'calendar'
                        }
                    }, { 
                        onConflict: 'tenant_id,provider,secret_ref',
                        ignoreDuplicates: false 
                    })
                    .select()
                    .single();
                    
                if (connError) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${member.display_name}:`, connError.message);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º member —Å connection_id
                    await supabase
                        .from('team_members')
                        .update({ gcal_connection_id: connection.id })
                        .eq('id', member.id);
                        
                    console.log(`‚úÖ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è ${member.display_name}`);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º destinations –¥–ª—è Google Sheets
        console.log('\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets destinations...');
        
        const { data: destinations, error: destError } = await supabase
            .from('destinations')
            .upsert([
                {
                    tenant_id: tenantId,
                    type: 'sheet',
                    provider: 'google',
                    external_id: 'TEAM_SHEETS_ID', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
                    meta: { name: 'Team Google Sheets' }
                },
                {
                    tenant_id: tenantId,
                    type: 'calendar',
                    provider: 'google',
                    external_id: 'TEAM_CALENDAR_ID', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
                    meta: { name: 'Team Google Calendar' }
                }
            ], { 
                onConflict: 'tenant_id,type,provider',
                ignoreDuplicates: false 
            })
            .select();
            
        if (destError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è destinations:', destError.message);
        } else {
            console.log('‚úÖ Google destinations —Å–æ–∑–¥–∞–Ω—ã');
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log('\nüõ£Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        
        const routes = [
            {
                tenant_id: tenantId,
                name: 'Team reminders to Google Calendar',
                priority: 1,
                enabled: true,
                match: { kind: 'reminder', type: 'team' },
                action: [{ connector: 'google_calendar', target: '{{assignee.gcal_connection_id}}' }]
            },
            {
                tenant_id: tenantId,
                name: 'Team notifications to Telegram',
                priority: 2,
                enabled: true,
                match: { kind: 'reminder', type: 'team' },
                action: [{ connector: 'telegram_dm', target: '{{assignee.tg_chat_id}}' }]
            }
        ];
        
        for (const route of routes) {
            await supabase
                .from('routes')
                .upsert(route, { 
                    onConflict: 'tenant_id,name',
                    ignoreDuplicates: false 
                });
        }
        
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã');
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('\nüìã –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:');
        console.log(`‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${savedMembers.length}`);
        console.log(`‚Ä¢ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${savedMembers.filter(m => m.meta.gcal_email || m.meta.gcal_id).length}`);
        console.log(`‚Ä¢ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${savedMembers.filter(m => m.tg_chat_id).length}`);
        
        console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google API credentials (google-credentials.json)');
        console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ TEAM_SHEETS_ID –∏ TEAM_CALENDAR_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID');
        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm run dev');
        console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: "–ù–∞–ø–æ–º–Ω–∏—Ç—å [–ò–º—è] –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"');
        
        // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:');
        for (const member of savedMembers) {
            console.log(`‚Ä¢ ${member.display_name}`);
            if (member.meta.gcal_email) console.log(`  üìÖ Google Calendar: ${member.meta.gcal_email}`);
            if (member.tg_chat_id) console.log(`  üì± Telegram: ${member.tg_chat_id}`);
            if (member.aliases.length > 0) console.log(`  üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: ${member.aliases.join(', ')}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
        
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
            console.log('\nüîß –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
            console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ supabase-schema.sql –≤ Supabase Dashboard');
            console.log('2. –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
        }
    } finally {
        rl.close();
    }
}

if (require.main === module) {
    setupTeam();
}

module.exports = { setupTeam };
